name: release

on: 
  push:
    branches:
      - prerelease
      - release

jobs:
  linux:
    runs-on: ubuntu-latest
    container: quay.io/pypa/manylinux2014_x86_64
    strategy:
      matrix:
        python:
          - 37
          - 38
          - 39
    steps:
      - uses: actions/checkout@v2
      - name: Set python version
        run: |
          if [[ "${{ matrix.python }}" == "37" ]]; then
            echo "/opt/python/cp37-cp37m/bin" >> $GITHUB_PATH
          else
            echo "/opt/python/cp${{ matrix.python }}-cp${{ matrix.python }}/bin" >> $GITHUB_PATH
          fi

      - name: Install Poetry
        run: |
          echo $(which python)
          pip install poetry

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2021-02-15
          components: rustfmt
          default: true

      - name: Install other dependent tools
        run: |
          cargo install just
          yum install -y openssl-devel

      - name: Install python dependencies
        run: |
          just bootstrap-python

      - name: build python dependencies
        run: |
          just ci-build-python-extention
      
      - name: Print the result
        run: ls connector-agent-python/connector_agent

      - name: Build wheel
        run: |
          just ci-build-python-wheel ci-rename-wheel
          echo "Built artifacts"
          ls connector-agent-python/dist

      - name: Persist artifacts
        uses: actions/upload-artifact@v2
        with:
          name: "linux-${{ matrix.python }}"
          path: connector-agent-python/dist/*.whl
          
  darwin:
    runs-on: macos-10.15
    strategy:
      matrix:
        python:
          - 3.7.10
          - 3.8.8
          - 3.9.2
    steps:
      - uses: actions/checkout@v2
      - name: Install tools
        run: |
          brew install openssl readline sqlite3 xz zlib

      - name: Install Pyenv 
        run: |
          curl https://pyenv.run | bash
          echo "$HOME/.pyenv/bin" >> $GITHUB_PATH

      - name: Install Python
        run: |
          eval "$(pyenv init -)"
          eval "$(pyenv virtualenv-init -)"
          pyenv install "${{ matrix.python }}"
          pyenv global "${{ matrix.python }}"
          pip install -U pip  # upgrade pip after installing python
          pip install poetry

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2021-02-15
          components: rustfmt
          default: true

      - name: Install other dependent tools
        run: |
          cargo install cargo-quickinstall
          cargo quickinstall just

      - name: Install python dependencies
        run: |
          eval "$(pyenv init -)"
          eval "$(pyenv virtualenv-init -)"
          just bootstrap-python

      - name: build python dependencies
        run: |
          eval "$(pyenv init -)"
          eval "$(pyenv virtualenv-init -)"
          just ci-build-python-extention
      
      - name: Print the result
        run: ls connector-agent-python/connector_agent

      - name: Build wheel
        run: |
          eval "$(pyenv init -)"
          eval "$(pyenv virtualenv-init -)" 
          just ci-build-python-wheel ci-rename-wheel
          echo "Built artifacts"
          ls connector-agent-python/dist

      - name: Persist artifacts
        uses: actions/upload-artifact@v2
        with:
          name: "darwin-${{ matrix.python }}"
          path: connector-agent-python/dist/*.whl

  win32:
    runs-on: windows-latest
    strategy:
      matrix:
        python:
          - 3.7.7
          - 3.8.2
    steps:
      - uses: actions/checkout@v2
      - name: Install Pyenv
        run: |
          pip install pyenv-win --target $HOME\\.pyenv

          cat $env:GITHUB_PATH | Out-File -FilePath PATH_TEMP -Encoding utf8

          echo "$HOME\.pyenv\pyenv-win\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8
          echo "$HOME\.pyenv\pyenv-win\shims" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "$HOME\.pyenv\pyenv-win\versions\{{ $matrix.python }}\Scripts" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          cat PATH_TEMP | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

          echo "PYENV=$HOME\.pyenv\pyenv-win\" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "PYENV_HOME=$HOME\.pyenv\pyenv-win\" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          
      - name: List supported pythons 
        run: |
          pyenv install --list

      - name: Install Python
        run: |
          pyenv install "${{ matrix.python }}"
          pyenv global "${{ matrix.python }}"
          pyenv rehash

          pip install -U pip  # upgrade pip after installing python
          pip install poetry
          pyenv rehash
          echo $(which python)

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2021-02-15
          components: rustfmt
          default: true

      - name: Install other dependent tools
        run: |
          cargo install cargo-quickinstall
          cargo quickinstall just

      - name: Install python dependencies
        run: |
          echo $(which python)
          just bootstrap-python

      - name: build python dependencies
        run: |
          just ci-build-python-extention
      
      - name: Print the result
        run: ls connector-agent-python/connector_agent

      - name: Build wheel
        run: |
          just ci-build-python-wheel ci-rename-wheel
          echo "Built artifacts"
          ls connector-agent-python/dist

      - name: Persist artifacts
        uses: actions/upload-artifact@v2
        with:
          name: "win32-${{ matrix.python }}"
          path: connector-agent-python/dist/*.whl

  upload:
    runs-on: ubuntu-latest
    needs: [win32, darwin, linux]
    if: github.ref == 'refs/heads/release'
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v2

      - name: Show downloaded artifacts
        run: tree .

      - name: Install Twine
        run: pip install twine

      - name: Upload to PyPI test site
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          for file in $(ls **/*.whl)
          do
            twine upload --non-interactive -u __token__ -p $PYPI_TOKEN $file || continue
          done

  upload-test:
    runs-on: ubuntu-latest
    needs: [win32, darwin, linux]
    if: github.ref == 'refs/heads/prerelease'
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v2

      - name: Show downloaded artifacts
        run: tree .

      - name: Install Twine
        run: pip install twine

      - name: Upload to PyPI test site
        env:
          PYPI_TEST_TOKEN: ${{ secrets.PYPI_TEST_TOKEN }}
        run: |
          for file in $(ls **/*.whl)
          do
            twine upload --non-interactive --repository-url https://test.pypi.org/legacy/ -u __token__ -p $PYPI_TEST_TOKEN $file || continue
          done
