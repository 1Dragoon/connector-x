name: ci

on:
  pull_request:
    branches:
      - main
      - prerelease
  push:
    branches:
      - main

jobs:
  rust:
    runs-on: ubuntu-latest
    container: ubuntu
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      # mysql
      mysql:
        image: mysql
        env:
          MYSQL_DATABASE: mysql
          MYSQL_ROOT_PASSWORD: mysql
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      mssql:
        image: mcr.microsoft.com/mssql/server:2019-latest
        env:
          ACCEPT_EULA: y
          SA_PASSWORD: mssql!Password
        ports:
          - 1433:1433
        options: >-
          --health-cmd "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P \"$SA_PASSWORD\" -Q 'SELECT 1' || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 20

    steps:
      - uses: actions/checkout@v2
      - uses: mstachniuk/ci-skip@v1
        with:
          fail-fast: true

      - name: Install tools
        run: |
          apt-get update
          apt-get install -y curl postgresql-client build-essential pkg-config libssl-dev git sqlite3 libsqlite3-dev mysql-client python3 python3-pip libicu66
          pip3 install mssql-cli
          ln -s /usr/bin/python3 /usr/bin/python
        env:
          DEBIAN_FRONTEND: noninteractive

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2021-05-30
          components: rustfmt
          default: true

      - name: Install other dependent tools
        run: |
          cargo install just

      - name: Is the code formatted?
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check -q

      - name: Clippy linting
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --features all

      - name: Seed the database
        run: just seed-db
        env:
          POSTGRES_URL: "postgresql://postgres:postgres@postgres:5432/postgres"
          SQLITE_URL: "sqlite:///tmp/test.db"
          MYSQL_HOST: mysql
          MYSQL_PORT: 3306
          MYSQL_DB: mysql
          MYSQL_USER: root
          MYSQL_PASSWORD: mysql
          MSSQL_HOST: mssql
          MSSQL_PORT: 1433
          MSSQL_DB: tempdb
          MSSQL_USER: sa
          MSSQL_PASSWORD: mssql!Password

      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --features all
        env:
          POSTGRES_URL: "postgresql://postgres:postgres@postgres:5432/postgres"
          SQLITE_URL: "sqlite:///tmp/test.db"
          MYSQL_URL: "mysql://root:mysql@mysql:3306/mysql"
          MSSQL_URL: "mssql://sa:mssql!Password@mssql:1433/tempdb"

      - name: Test build docs
        uses: actions-rs/cargo@v1
        with:
          command: doc
          args: --no-deps --features all

  python:
    runs-on: ubuntu-latest
    container: ubuntu
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      # mysql
      mysql:
        image: mysql
        env:
          MYSQL_DATABASE: mysql
          MYSQL_ROOT_PASSWORD: mysql
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      mssql:
        image: mcr.microsoft.com/mssql/server:2019-latest
        env:
          ACCEPT_EULA: y
          SA_PASSWORD: mssql!Password
        ports:
          - 1433:1433
        options: >-
          --health-cmd "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P \"$SA_PASSWORD\" -Q 'SELECT 1' || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 20

    steps:
      - uses: actions/checkout@v2

      - name: Install tools
        run: |
          apt-get update
          apt-get install -y curl postgresql-client build-essential python3-dev python3-pip pkg-config libssl-dev git sqlite3 libsqlite3-dev mysql-client libmysqlclient-dev python3 python3-pip libicu66
          pip3 install mssql-cli
          ln -s /usr/bin/python3 /usr/bin/python
        env:
          DEBIAN_FRONTEND: noninteractive

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2021-05-30
          components: rustfmt
          default: true

      - name: Clippy linting
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --features all --all

      - name: Install other dependent tools
        run: |
          pip3 install poetry
          cargo install just

      - name: Install python dependencies
        run: just bootstrap-python

      - name: Seed the database
        run: just seed-db
        env:
          POSTGRES_URL: "postgresql://postgres:postgres@postgres:5432/postgres"
          SQLITE_URL: "sqlite:///tmp/test.db"
          MYSQL_HOST: mysql
          MYSQL_PORT: 3306
          MYSQL_DB: mysql
          MYSQL_USER: root
          MYSQL_PASSWORD: mysql
          MSSQL_HOST: mssql
          MSSQL_PORT: 1433
          MSSQL_DB: tempdb
          MSSQL_USER: sa
          MSSQL_PASSWORD: mssql!Password

      - name: Test python
        run: just test-python
        env:
          POSTGRES_URL: "postgresql://postgres:postgres@postgres:5432/postgres"
          SQLITE_URL: "sqlite:///tmp/test.db"
          MYSQL_URL: "mysql://root:mysql@mysql:3306/mysql"
          MSSQL_URL: "mssql://sa:mssql!Password@mssql:1433/tempdb"
          SQLITE3_STATIC: 1
          MYSQL_HOST: mysql
          MYSQL_PORT: 3306
          MYSQL_DB: mysql
          MYSQL_USER: root
          MYSQL_PASSWORD: mysql
          MSSQL_HOST: mssql
          MSSQL_PORT: 1433
          MSSQL_DB: tempdb
          MSSQL_USER: sa
          MSSQL_PASSWORD: mssql!Password
