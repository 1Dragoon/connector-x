var searchIndex = JSON.parse('{\
"connector_agent":{"doc":"","i":[[0,"typesystem","connector_agent","",null,null],[8,"TypeSystem","connector_agent::typesystem","<code>TypeSystem</code> describes a type system in a value type (e.g. …",null,null],[11,"check","","Check whether T is the same type as defined by self.",0,[[],["result",6]]],[8,"TypeAssoc","","Associate a static type to a TypeSystem",null,null],[10,"check","","",1,[[],["result",6]]],[8,"Realize","","Realize means that a TypeSystem can realize a …",null,null],[10,"realize","","realize a parameterized function with the type that self …",2,[[],["result",6]]],[8,"ParameterizedFunc","","A ParameterizedFunc refers to a function that is …",null,null],[16,"Function","","",3,null],[11,"realize","","",3,[[]]],[8,"ParameterizedOn","","<code>ParameterizedOn</code> indicates a parameterized function <code>Self</code> …",null,null],[10,"parameterize","","",4,[[]]],[8,"TypeConversion","","",null,null],[10,"convert","","",5,[[]]],[8,"TypeSystemConversion","","",null,null],[10,"from","","",6,[[],["result",6]]],[0,"data_sources","connector_agent","",null,null],[0,"postgres","connector_agent::data_sources","",null,null],[4,"PostgresDTypes","connector_agent::data_sources::postgres","",null,null],[13,"Bool","","",7,null],[13,"Float4","","",7,null],[13,"Float8","","",7,null],[13,"Int4","","",7,null],[13,"Int8","","",7,null],[13,"Date","","",7,null],[13,"BpChar","","",7,null],[13,"VarChar","","",7,null],[13,"Text","","",7,null],[13,"Timestamp","","",7,null],[13,"TimestampTz","","",7,null],[3,"PostgresSource","","",null,null],[11,"new","","",8,[[["usize",15],["str",15]]]],[11,"buf_size","","",8,[[["usize",15]]]],[3,"PostgresSourcePartition","","",null,null],[11,"new","","",9,[[["usize",15],["postgresconnectionmanager",3],["pooledconnection",3],["str",15]]]],[3,"PostgresSourceParser","","",null,null],[11,"new","","",10,[[["usize",15],["binarycopyoutiter",3]]]],[3,"MyBinaryCopyOutRow","","",null,null],[8,"Source","connector_agent::data_sources","",null,null],[18,"DATA_ORDERS","","Supported data orders, ordering by preference.",11,null],[16,"TypeSystem","","The type system this <code>Source</code> associated with.",11,null],[16,"Partition","","",11,null],[10,"set_data_order","","",11,[[["dataorder",4]],["result",6]]],[10,"set_queries","","",11,[[]]],[10,"fetch_metadata","","",11,[[],["result",6]]],[10,"names","","",11,[[],[["string",3],["vec",3]]]],[10,"schema","","",11,[[],["vec",3]]],[10,"partition","","",11,[[],[["result",6],["vec",3]]]],[8,"PartitionedSource","","In general, a <code>DataSource</code> abstracts the data source as a …",null,null],[16,"TypeSystem","","",12,null],[16,"Parser","","",12,null],[10,"prepare","","Run the query and put the result into Self.",12,[[],["result",6]]],[10,"parser","","",12,[[],["result",6]]],[10,"nrows","","Number of rows this <code>DataSource</code> got. Sometimes it is not …",12,[[],["usize",15]]],[10,"ncols","","Number of cols this <code>DataSource</code> got.",12,[[],["usize",15]]],[8,"Parser","","",null,null],[16,"TypeSystem","","",13,null],[11,"read","","Read a value <code>T</code> by calling <code>Produce<T>::produce</code>. Usually …",13,[[],["result",6]]],[8,"Produce","","A type implemented <code>Produce<T></code> means that it can produce a …",null,null],[10,"produce","","",14,[[],["result",6]]],[0,"transmit","connector_agent","",null,null],[3,"Transmit","connector_agent::transmit","",null,null],[3,"TransmitChecked","","",null,null],[0,"writers","connector_agent","",null,null],[0,"arrow","connector_agent::writers","",null,null],[3,"ArrowWriter","connector_agent::writers::arrow","",null,null],[11,"new","","",15,[[]]],[11,"finish","","",15,[[["string",3],["vec",3]],[["connectoragenterror",4],["result",4],["vec",3]]]],[3,"ArrowPartitionWriter","","",null,null],[0,"memory","connector_agent::writers","",null,null],[3,"MemoryWriter","connector_agent::writers::memory","This <code>Writer</code> can support mixed data type.",null,null],[11,"new","","",16,[[]]],[11,"buffer_view","","",16,[[["usize",15]],[["arrayview2",6],["option",4]]]],[11,"column_view","","",16,[[["usize",15]],[["option",4],["arrayview1",6]]]],[11,"column_buffer_index","","",16,[[["usize",15]]]],[3,"MemoryPartitionWriter","","The <code>PartitionedWriter</code> of <code>MemoryWriter</code>.",null,null],[0,"pandas","connector_agent::writers","",null,null],[8,"PandasDType","connector_agent::writers::pandas","",null,null],[10,"dtype","","",17,[[],["str",15]]],[10,"npdtype","","",17,[[],["str",15]]],[10,"parse","","",17,[[["str",15]],["result",6]]],[4,"PandasTypes","","",null,null],[13,"F64","","",18,null],[13,"I64","","",18,null],[13,"Bool","","",18,null],[13,"String","","",18,null],[13,"DateTime","","",18,null],[8,"Writer","connector_agent::writers","A <code>Writer</code> is associated with a <code>TypeSystem</code> and a …",null,null],[18,"DATA_ORDERS","","",19,null],[16,"TypeSystem","","",19,null],[16,"PartitionWriter","","",19,null],[10,"allocate","","Construct the <code>Writer</code>. This allocates the memory based on …",19,[[["usize",15],["dataorder",4]],["result",6]]],[10,"partition_writers","","Create a bunch of partition writers, with each write <code>count</code>…",19,[[],[["result",6],["vec",3]]]],[10,"schema","","Return the schema of the writer.",19,[[]]],[8,"PartitionWriter","","<code>PartitionWriter</code> writes values to its own region. …",null,null],[16,"TypeSystem","","",20,null],[11,"write","","Write a value of type T to the location (row, col). The …",20,[[]]],[11,"write_checked","","Write a value of type T to the location (row, col), …",20,[[],["result",6]]],[10,"nrows","","Number of rows this <code>PartitionWriter</code> controls.",20,[[],["usize",15]]],[10,"ncols","","Number of rows this <code>PartitionWriter</code> controls.",20,[[],["usize",15]]],[11,"finalize","","Final clean ups",20,[[],["result",6]]],[8,"Consume","","A type implemented <code>Consume<T></code> means that it can consume a …",null,null],[10,"consume","","",21,[[]]],[10,"consume_checked","","",21,[[],["result",6]]],[3,"AnyArray","connector_agent","",null,null],[3,"AnyArrayView","","",null,null],[3,"AnyArrayViewMut","","",null,null],[4,"DataOrder","","",null,null],[13,"RowMajor","","",22,null],[13,"ColumnMajor","","",22,null],[3,"Dispatcher","","A dispatcher owns a <code>SourceBuilder</code> <code>SB</code> and a vector of …",null,null],[4,"ConnectorAgentError","","Errors that can be raised from this library.",null,null],[13,"UnexpectedType","","The required type does not same as the schema defined.",23,null],[13,"OutOfBound","","",23,null],[13,"UnsupportedDataOrder","","",23,null],[13,"CannotResolveDataOrder","","",23,null],[13,"CannotParse","","",23,null],[13,"DuplicatedAllocation","","",23,null],[13,"WriterNotAllocated","","",23,null],[13,"NoTypeSystemConversionRule","","",23,null],[13,"IOError","","",23,null],[13,"PostgresPoolError","","",23,null],[13,"PostgresError","","",23,null],[13,"CSVError","","",23,null],[13,"Other","","Any other errors that are too trivial to be put here …",23,null],[6,"Result","","",null,null],[4,"DataType","","This is our intermediate type system used in this library.…",null,null],[13,"F64","","",24,null],[13,"I64","","",24,null],[13,"Bool","","",24,null],[13,"String","","",24,null],[13,"DateTime","","",24,null],[14,"define_typesystem","","A macro to implement <code>TypeAssoc</code> and <code>Realize</code> which saves …",null,null],[14,"associate_typesystems","","A macro to define how to convert between one type system …",null,null],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"vzip","","",25,[[]]],[11,"init","","",25,[[],["usize",15]]],[11,"deref","","",25,[[["usize",15]]]],[11,"deref_mut","","",25,[[["usize",15]]]],[11,"drop","","",25,[[["usize",15]]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"vzip","","",26,[[]]],[11,"init","","",26,[[],["usize",15]]],[11,"deref","","",26,[[["usize",15]]]],[11,"deref_mut","","",26,[[["usize",15]]]],[11,"drop","","",26,[[["usize",15]]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"vzip","","",27,[[]]],[11,"init","","",27,[[],["usize",15]]],[11,"deref","","",27,[[["usize",15]]]],[11,"deref_mut","","",27,[[["usize",15]]]],[11,"drop","","",27,[[["usize",15]]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"equivalent","","",22,[[],["bool",15]]],[11,"vzip","","",22,[[]]],[11,"init","","",22,[[],["usize",15]]],[11,"deref","","",22,[[["usize",15]]]],[11,"deref_mut","","",22,[[["usize",15]]]],[11,"drop","","",22,[[["usize",15]]]],[11,"from","connector_agent::data_sources::postgres","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"init","","",7,[[],["usize",15]]],[11,"deref","","",7,[[["usize",15]]]],[11,"deref_mut","","",7,[[["usize",15]]]],[11,"drop","","",7,[[["usize",15]]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"init","","",8,[[],["usize",15]]],[11,"deref","","",8,[[["usize",15]]]],[11,"deref_mut","","",8,[[["usize",15]]]],[11,"drop","","",8,[[["usize",15]]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"init","","",9,[[],["usize",15]]],[11,"deref","","",9,[[["usize",15]]]],[11,"deref_mut","","",9,[[["usize",15]]]],[11,"drop","","",9,[[["usize",15]]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"init","","",10,[[],["usize",15]]],[11,"deref","","",10,[[["usize",15]]]],[11,"deref_mut","","",10,[[["usize",15]]]],[11,"drop","","",10,[[["usize",15]]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"vzip","","",28,[[]]],[11,"init","","",28,[[],["usize",15]]],[11,"deref","","",28,[[["usize",15]]]],[11,"deref_mut","","",28,[[["usize",15]]]],[11,"drop","","",28,[[["usize",15]]]],[11,"from","connector_agent","",29,[[]]],[11,"into","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"vzip","","",29,[[]]],[11,"init","","",29,[[],["usize",15]]],[11,"deref","","",29,[[["usize",15]]]],[11,"deref_mut","","",29,[[["usize",15]]]],[11,"drop","","",29,[[["usize",15]]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_string","","",23,[[],["string",3]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"vzip","","",23,[[]]],[11,"init","","",23,[[],["usize",15]]],[11,"deref","","",23,[[["usize",15]]]],[11,"deref_mut","","",23,[[["usize",15]]]],[11,"drop","","",23,[[["usize",15]]]],[11,"from","connector_agent::transmit","",30,[[]]],[11,"into","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"vzip","","",30,[[]]],[11,"init","","",30,[[],["usize",15]]],[11,"deref","","",30,[[["usize",15]]]],[11,"deref_mut","","",30,[[["usize",15]]]],[11,"drop","","",30,[[["usize",15]]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"vzip","","",31,[[]]],[11,"init","","",31,[[],["usize",15]]],[11,"deref","","",31,[[["usize",15]]]],[11,"deref_mut","","",31,[[["usize",15]]]],[11,"drop","","",31,[[["usize",15]]]],[11,"from","connector_agent","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"equivalent","","",24,[[],["bool",15]]],[11,"vzip","","",24,[[]]],[11,"init","","",24,[[],["usize",15]]],[11,"deref","","",24,[[["usize",15]]]],[11,"deref_mut","","",24,[[["usize",15]]]],[11,"drop","","",24,[[["usize",15]]]],[11,"from","connector_agent::writers::arrow","",15,[[]]],[11,"into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"vzip","","",15,[[]]],[11,"init","","",15,[[],["usize",15]]],[11,"deref","","",15,[[["usize",15]]]],[11,"deref_mut","","",15,[[["usize",15]]]],[11,"drop","","",15,[[["usize",15]]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"vzip","","",32,[[]]],[11,"init","","",32,[[],["usize",15]]],[11,"deref","","",32,[[["usize",15]]]],[11,"deref_mut","","",32,[[["usize",15]]]],[11,"drop","","",32,[[["usize",15]]]],[11,"from","connector_agent::writers::memory","",16,[[]]],[11,"into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"vzip","","",16,[[]]],[11,"init","","",16,[[],["usize",15]]],[11,"deref","","",16,[[["usize",15]]]],[11,"deref_mut","","",16,[[["usize",15]]]],[11,"drop","","",16,[[["usize",15]]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"vzip","","",33,[[]]],[11,"init","","",33,[[],["usize",15]]],[11,"deref","","",33,[[["usize",15]]]],[11,"deref_mut","","",33,[[["usize",15]]]],[11,"drop","","",33,[[["usize",15]]]],[11,"from","connector_agent::writers::pandas","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"equivalent","","",18,[[],["bool",15]]],[11,"vzip","","",18,[[]]],[11,"init","","",18,[[],["usize",15]]],[11,"deref","","",18,[[["usize",15]]]],[11,"deref_mut","","",18,[[["usize",15]]]],[11,"drop","","",18,[[["usize",15]]]],[11,"realize","connector_agent::data_sources::postgres","",7,[[],["result",6]]],[11,"realize","connector_agent","",24,[[],["result",6]]],[11,"realize","connector_agent::writers::pandas","",18,[[],["result",6]]],[11,"parameterize","connector_agent::transmit","",30,[[]]],[11,"parameterize","","",31,[[]]],[11,"from","connector_agent","",24,[[["postgresdtypes",4]],["result",6]]],[11,"from","connector_agent::writers::pandas","",18,[[["postgresdtypes",4]],["result",6]]],[11,"from","connector_agent::data_sources::postgres","",7,[[["postgresdtypes",4]],[["result",6],["postgresdtypes",4]]]],[11,"from","connector_agent","",24,[[["datatype",4]],[["datatype",4],["result",6]]]],[11,"from","connector_agent::writers::pandas","",18,[[["pandastypes",4]],[["result",6],["pandastypes",4]]]],[11,"set_data_order","connector_agent::data_sources::postgres","",8,[[["dataorder",4]],["result",6]]],[11,"set_queries","","",8,[[]]],[11,"fetch_metadata","","",8,[[],["result",6]]],[11,"names","","",8,[[],[["string",3],["vec",3]]]],[11,"schema","","",8,[[],["vec",3]]],[11,"partition","","",8,[[],[["result",6],["vec",3]]]],[11,"prepare","","",9,[[],["result",6]]],[11,"parser","","",9,[[],["result",6]]],[11,"nrows","","",9,[[],["usize",15]]],[11,"ncols","","",9,[[],["usize",15]]],[11,"produce","","",10,[[],[["result",6],["i32",15]]]],[11,"produce","","",10,[[],[["option",4],["result",6]]]],[11,"produce","","",10,[[],[["i64",15],["result",6]]]],[11,"produce","","",10,[[],[["result",6],["option",4]]]],[11,"produce","","",10,[[],[["result",6],["f32",15]]]],[11,"produce","","",10,[[],[["option",4],["result",6]]]],[11,"produce","","",10,[[],[["f64",15],["result",6]]]],[11,"produce","","",10,[[],[["option",4],["result",6]]]],[11,"produce","","",10,[[],[["bool",15],["result",6]]]],[11,"produce","","",10,[[],[["option",4],["result",6]]]],[11,"produce","","",10,[[],[["datetime",3],["result",6]]]],[11,"produce","","",10,[[],[["result",6],["option",4]]]],[11,"produce","","",10,[[],[["result",6],["naivedatetime",3]]]],[11,"produce","","",10,[[],[["result",6],["option",4]]]],[11,"produce","","",10,[[],[["result",6],["naivedate",3]]]],[11,"produce","","",10,[[],[["option",4],["result",6]]]],[11,"produce","","",10,[[],["result",6]]],[11,"produce","","",10,[[],[["option",4],["result",6]]]],[11,"dtype","connector_agent::writers::pandas","",18,[[],["str",15]]],[11,"npdtype","","",18,[[],["str",15]]],[11,"parse","","",18,[[["str",15]],[["result",4],["connectoragenterror",4]]]],[11,"allocate","connector_agent::writers::arrow","",15,[[["usize",15],["dataorder",4]],[["connectoragenterror",4],["result",4]]]],[11,"partition_writers","","",15,[[],[["connectoragenterror",4],["result",4],["vec",3]]]],[11,"schema","","",15,[[]]],[11,"allocate","connector_agent::writers::memory","",16,[[["usize",15],["dataorder",4]],[["connectoragenterror",4],["result",4]]]],[11,"partition_writers","","",16,[[],[["connectoragenterror",4],["result",4],["vec",3]]]],[11,"schema","","",16,[[]]],[11,"nrows","connector_agent::writers::arrow","",32,[[],["usize",15]]],[11,"ncols","","",32,[[],["usize",15]]],[11,"nrows","connector_agent::writers::memory","",33,[[],["usize",15]]],[11,"ncols","","",33,[[],["usize",15]]],[11,"consume","connector_agent::writers::arrow","",32,[[]]],[11,"consume_checked","","",32,[[],["result",6]]],[11,"consume","connector_agent::writers::memory","",33,[[]]],[11,"consume_checked","","",33,[[],["result",6]]],[11,"from","connector_agent","",25,[[["array",6]]]],[11,"from","connector_agent::data_sources::postgres","",7,[[["type",3]],["postgresdtypes",4]]],[11,"from","connector_agent","",23,[[["error",3]]]],[11,"from","","",23,[[["error",3]]]],[11,"from","","",23,[[["error",3]]]],[11,"from","","",23,[[["error",3]]]],[11,"from","","",23,[[["error",3]]]],[11,"clone","","",22,[[],["dataorder",4]]],[11,"clone","connector_agent::data_sources::postgres","",7,[[],["postgresdtypes",4]]],[11,"clone","connector_agent","",24,[[],["datatype",4]]],[11,"clone","connector_agent::writers::pandas","",18,[[],["pandastypes",4]]],[11,"cmp","connector_agent","",24,[[["datatype",4]],["ordering",4]]],[11,"cmp","connector_agent::writers::pandas","",18,[[["pandastypes",4]],["ordering",4]]],[11,"eq","connector_agent","",22,[[["dataorder",4]],["bool",15]]],[11,"eq","","",24,[[["datatype",4]],["bool",15]]],[11,"ne","","",24,[[["datatype",4]],["bool",15]]],[11,"eq","connector_agent::writers::pandas","",18,[[["pandastypes",4]],["bool",15]]],[11,"ne","","",18,[[["pandastypes",4]],["bool",15]]],[11,"partial_cmp","connector_agent","",24,[[["datatype",4]],[["ordering",4],["option",4]]]],[11,"partial_cmp","connector_agent::writers::pandas","",18,[[["pandastypes",4]],[["ordering",4],["option",4]]]],[11,"fmt","connector_agent","",22,[[["formatter",3]],["result",6]]],[11,"fmt","connector_agent::data_sources::postgres","",7,[[["formatter",3]],["result",6]]],[11,"fmt","connector_agent","",23,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","connector_agent::writers::pandas","",18,[[["formatter",3]],["result",6]]],[11,"fmt","connector_agent","",23,[[["formatter",3]],["result",6]]],[11,"hash","","",24,[[]]],[11,"hash","connector_agent::writers::pandas","",18,[[]]],[11,"source","connector_agent","",23,[[],[["option",4],["error",8]]]],[11,"new","","",25,[[["array",6]]]],[11,"view","","",25,[[],["anyarrayview",3]]],[11,"view_mut","","",25,[[],["anyarrayviewmut",3]]],[11,"downcast_ref","","",25,[[],[["array",6],["option",4]]]],[11,"downcast_mut","","",25,[[],[["option",4],["array",6]]]],[11,"new","","",26,[[["arrayview",6]]]],[11,"downcast","","",26,[[],[["option",4],["arrayview",6]]]],[11,"udowncast","","",26,[[],["arrayview",6]]],[11,"split_at","","",26,[[["axis",3],["ix",6]]]],[11,"new","","",27,[[["arrayviewmut",6]]]],[11,"downcast","","",27,[[],[["arrayviewmut",6],["option",4]]]],[11,"udowncast","","",27,[[],["arrayviewmut",6]]],[11,"split_at","","",27,[[["axis",3],["ix",6]]]],[11,"reborrow","","",27,[[]]],[11,"new","","Create a new dispatcher by providing a source builder, …",29,[[]]],[11,"run_checked","","",29,[[],["result",6]]],[11,"run","","",29,[[],["result",6]]]],"p":[[8,"TypeSystem"],[8,"TypeAssoc"],[8,"Realize"],[8,"ParameterizedFunc"],[8,"ParameterizedOn"],[8,"TypeConversion"],[8,"TypeSystemConversion"],[4,"PostgresDTypes"],[3,"PostgresSource"],[3,"PostgresSourcePartition"],[3,"PostgresSourceParser"],[8,"Source"],[8,"PartitionedSource"],[8,"Parser"],[8,"Produce"],[3,"ArrowWriter"],[3,"MemoryWriter"],[8,"PandasDType"],[4,"PandasTypes"],[8,"Writer"],[8,"PartitionWriter"],[8,"Consume"],[4,"DataOrder"],[4,"ConnectorAgentError"],[4,"DataType"],[3,"AnyArray"],[3,"AnyArrayView"],[3,"AnyArrayViewMut"],[3,"MyBinaryCopyOutRow"],[3,"Dispatcher"],[3,"Transmit"],[3,"TransmitChecked"],[3,"ArrowPartitionWriter"],[3,"MemoryPartitionWriter"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);