(function() {var implementors = {};
implementors["aho_corasick"] = [{"text":"impl&lt;S&gt; RefUnwindSafe for AhoCorasick&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AhoCorasickBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; RefUnwindSafe for FindIter&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; RefUnwindSafe for FindOverlappingIter&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, S&gt; RefUnwindSafe for StreamFindIter&lt;'a, R, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Match","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MatchKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl&lt;'s, 'h&gt; RefUnwindSafe for FindIter&lt;'s, 'h&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Searcher","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MatchKind","synthetic":true,"types":[]}];
implementors["anyhow"] = [{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Chain&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["arrayvec"] = [{"text":"impl&lt;A&gt; RefUnwindSafe for ArrayString&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for CapacityError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for ArrayVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; RefUnwindSafe for Drain&lt;'a, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["arrow"] = [{"text":"impl RefUnwindSafe for ArrayData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArrayDataBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DecimalArray","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FixedSizeBinaryArray","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BooleanArray","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; !RefUnwindSafe for DictionaryArray&lt;K&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for FixedSizeListArray","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for PrimitiveArray&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as ArrowPrimitiveType&gt;::Native: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for StructArray","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UnionArray","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NullArray","synthetic":true,"types":[]},{"text":"impl&lt;OffsetSize&gt; RefUnwindSafe for GenericBinaryArray&lt;OffsetSize&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;OffsetSize: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;OffsetSize&gt; !RefUnwindSafe for GenericListArray&lt;OffsetSize&gt;","synthetic":true,"types":[]},{"text":"impl&lt;OffsetSize&gt; RefUnwindSafe for GenericStringArray&lt;OffsetSize&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;OffsetSize: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BooleanBufferBuilder","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for BufferBuilder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BooleanBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DecimalBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FixedSizeBinaryBuilder","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for FixedSizeListBuilder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for PrimitiveBuilder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as ArrowPrimitiveType&gt;::Native: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; RefUnwindSafe for PrimitiveDictionaryBuilder&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;K as ArrowPrimitiveType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;V as ArrowPrimitiveType&gt;::Native: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; RefUnwindSafe for StringDictionaryBuilder&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;K as ArrowPrimitiveType&gt;::Native: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for StructBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnionBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for MutableArrayData&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for PrimitiveIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as ArrowPrimitiveType&gt;::Native: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for BooleanIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for GenericStringIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for GenericBinaryIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bitmap","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Buffer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MutableBuffer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bytes","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Deallocation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SortOptions","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SortColumn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TakeOptions","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Reader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReaderBuilder","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for Writer&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WriterBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Field","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BooleanType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Int8Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Int16Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Int32Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Int64Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UInt8Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UInt16Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UInt32Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UInt64Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Float32Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Float64Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TimestampSecondType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TimestampMillisecondType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TimestampMicrosecondType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TimestampNanosecondType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Date32Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Date64Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Time32SecondType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Time32MillisecondType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Time64MicrosecondType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Time64NanosecondType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntervalYearMonthType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntervalDayTimeType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DurationSecondType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DurationMillisecondType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DurationMicrosecondType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DurationNanosecondType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Schema","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DataType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DateUnit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TimeUnit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntervalUnit","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ArrowError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FFI_ArrowSchema","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FFI_ArrowArray","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArrowArray","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !RefUnwindSafe for FileReader&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !RefUnwindSafe for StreamReader&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IpcWriteOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IpcDataGenerator","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DictionaryTracker","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; !RefUnwindSafe for FileWriter&lt;W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; !RefUnwindSafe for StreamWriter&lt;W&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EncodedData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Block","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Footer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for FooterArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; RefUnwindSafe for FooterBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FooterOffset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompressionType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BodyCompressionMethod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MessageHeader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MessageHeaderUnionTableOffset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FieldNode","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for BodyCompression&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BodyCompressionArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; RefUnwindSafe for BodyCompressionBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for RecordBatch&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for RecordBatchArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; RefUnwindSafe for RecordBatchBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for DictionaryBatch&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for DictionaryBatchArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; RefUnwindSafe for DictionaryBatchBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Message&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for MessageArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; RefUnwindSafe for MessageBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BodyCompressionOffset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RecordBatchOffset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DictionaryBatchOffset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MessageOffset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MetadataVersion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Feature","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnionMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Precision","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DateUnit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TimeUnit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntervalUnit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeUnionTableOffset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DictionaryKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Endianness","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Buffer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Null&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NullArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; RefUnwindSafe for NullBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Struct_&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Struct_Args","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; RefUnwindSafe for Struct_Builder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for List&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; RefUnwindSafe for ListBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for LargeList&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LargeListArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; RefUnwindSafe for LargeListBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for FixedSizeList&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FixedSizeListArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; RefUnwindSafe for FixedSizeListBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Map&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MapArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; RefUnwindSafe for MapBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Union&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for UnionArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; RefUnwindSafe for UnionBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Int&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; RefUnwindSafe for IntBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for FloatingPoint&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FloatingPointArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; RefUnwindSafe for FloatingPointBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Utf8&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Utf8Args","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; RefUnwindSafe for Utf8Builder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Binary&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BinaryArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; RefUnwindSafe for BinaryBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for LargeUtf8&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LargeUtf8Args","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; RefUnwindSafe for LargeUtf8Builder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for LargeBinary&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LargeBinaryArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; RefUnwindSafe for LargeBinaryBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for FixedSizeBinary&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FixedSizeBinaryArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; RefUnwindSafe for FixedSizeBinaryBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Bool&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BoolArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; RefUnwindSafe for BoolBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Decimal&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DecimalArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; RefUnwindSafe for DecimalBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Date&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DateArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; RefUnwindSafe for DateBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Time&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TimeArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; RefUnwindSafe for TimeBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Timestamp&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for TimestampArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; RefUnwindSafe for TimestampBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Interval&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntervalArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; RefUnwindSafe for IntervalBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Duration&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DurationArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; RefUnwindSafe for DurationBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for KeyValue&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for KeyValueArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; RefUnwindSafe for KeyValueBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for DictionaryEncoding&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for DictionaryEncodingArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; RefUnwindSafe for DictionaryEncodingBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Field&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for FieldArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; RefUnwindSafe for FieldBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Schema&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SchemaArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; RefUnwindSafe for SchemaBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NullOffset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Struct_Offset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListOffset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LargeListOffset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FixedSizeListOffset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MapOffset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnionOffset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntOffset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FloatingPointOffset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Utf8Offset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BinaryOffset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LargeUtf8Offset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LargeBinaryOffset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FixedSizeBinaryOffset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BoolOffset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DecimalOffset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DateOffset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TimeOffset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TimestampOffset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntervalOffset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DurationOffset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeyValueOffset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DictionaryEncodingOffset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FieldOffset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SchemaOffset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SparseMatrixCompressedAxis","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SparseTensorIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SparseTensorIndexUnionTableOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SparseTensorIndexCOO&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SparseTensorIndexCOOArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; RefUnwindSafe for SparseTensorIndexCOOBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SparseMatrixIndexCSX&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SparseMatrixIndexCSXArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; RefUnwindSafe for SparseMatrixIndexCSXBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SparseTensorIndexCSF&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SparseTensorIndexCSFArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; RefUnwindSafe for SparseTensorIndexCSFBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SparseTensor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SparseTensorArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; RefUnwindSafe for SparseTensorBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SparseTensorIndexCOOOffset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SparseMatrixIndexCSXOffset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SparseTensorIndexCSFOffset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SparseTensorOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for TensorDim&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for TensorDimArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; RefUnwindSafe for TensorDimBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Tensor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for TensorArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; RefUnwindSafe for TensorBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TensorDimOffset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TensorOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; RefUnwindSafe for ValueIter&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Decoder","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Reader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReaderBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RecordBatch","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RecordBatchOptions","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Tensor&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for BitChunks&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for BitChunkIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArrowJson","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArrowJsonSchema","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArrowJsonField","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArrowJsonFieldDictionary","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DictionaryIndexType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArrowJsonBatch","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArrowJsonDictionaryBatch","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArrowJsonColumn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StringWriter","synthetic":true,"types":[]}];
implementors["backtrace"] = [{"text":"impl RefUnwindSafe for Frame","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Symbol","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SymbolName&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !RefUnwindSafe for BacktraceFmt&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'fmt, 'a, 'b&gt; !RefUnwindSafe for BacktraceFrameFmt&lt;'fmt, 'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Backtrace","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BacktraceFrame","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BacktraceSymbol","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for BytesOrWideString&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PrintFmt","synthetic":true,"types":[]}];
implementors["base64"] = [{"text":"impl RefUnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DecodeError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CharacterSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Base64Display&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; RefUnwindSafe for DecoderReader&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for EncoderWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for EncoderStringWriter&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["bstr"] = [{"text":"impl RefUnwindSafe for BStr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BString","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Bytes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Fields&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, F&gt; RefUnwindSafe for FieldsWith&lt;'a, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Find&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for FindReverse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Finder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for FinderReverse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Lines&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for LinesWithTerminator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Split&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SplitN&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SplitNReverse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SplitReverse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for DrainBytes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FromUtf8Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for GraphemeIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Graphemes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SentenceIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Sentences&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for WordIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Words&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for WordsWithBreakIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for WordsWithBreaks&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for CharIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Chars&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Utf8Chunk&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Utf8Chunks&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Utf8Error","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for ByteLines&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for ByteRecords&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["byteorder"] = [{"text":"impl RefUnwindSafe for BigEndian","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LittleEndian","synthetic":true,"types":[]}];
implementors["bytes"] = [{"text":"impl RefUnwindSafe for Bytes","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BytesMut","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; RefUnwindSafe for Chain&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Limit&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Take&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UninitSlice","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for Reader&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for Writer&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["chrono"] = [{"text":"impl&lt;Tz&gt; RefUnwindSafe for Date&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Tz&gt; RefUnwindSafe for DateTime&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseWeekdayError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseMonthError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SecondsFormat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RoundingError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Weekday","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Month","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FixedOffset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Local","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Utc","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for LocalResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NaiveDate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NaiveDateTime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IsoWeek","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NaiveTime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Parsed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InternalNumeric","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InternalFixed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseError","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for DelayedFormat&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pad","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Numeric","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Fixed","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Item&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for StrftimeItems&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["connector_agent"] = [{"text":"impl&lt;S, P, TS&gt; RefUnwindSafe for Worker&lt;S, P, TS&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TS: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConnectorAgentError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DataType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U64CounterSource","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U64Writer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for U64PartitionWriter&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["crc32fast"] = [{"text":"impl RefUnwindSafe for Hasher","synthetic":true,"types":[]}];
implementors["crossbeam_channel"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for TryIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Select&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SelectedOperation&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReadyTimeoutError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SelectTimeoutError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TryReadyError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TrySelectError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RecvTimeoutError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SendTimeoutError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Sender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Receiver&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_deque"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for Injector&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Stealer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Worker&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Steal&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["crossbeam_epoch"] = [{"text":"impl&lt;T:&nbsp;?Sized&gt; RefUnwindSafe for Atomic&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'g, T:&nbsp;?Sized, P&gt; RefUnwindSafe for CompareAndSetError&lt;'g, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; RefUnwindSafe for Owned&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'g, T:&nbsp;?Sized&gt; RefUnwindSafe for Shared&lt;'g, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Collector","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LocalHandle","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Guard","synthetic":true,"types":[]}];
implementors["crossbeam_utils"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for CachePadded&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Backoff","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Parker","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Unparker","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; RefUnwindSafe for ShardedLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; RefUnwindSafe for ShardedLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WaitGroup","synthetic":true,"types":[]},{"text":"impl&lt;'env&gt; !RefUnwindSafe for Scope&lt;'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope, 'env&gt; !RefUnwindSafe for ScopedThreadBuilder&lt;'scope, 'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope, T&gt; RefUnwindSafe for ScopedJoinHandle&lt;'scope, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for AtomicCell&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; RefUnwindSafe for ShardedLock&lt;T&gt;","synthetic":false,"types":[]}];
implementors["csv"] = [{"text":"impl RefUnwindSafe for ByteRecord","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; RefUnwindSafe for ByteRecordIter&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Position","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeserializeError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FromUtf8Error","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; !RefUnwindSafe for IntoInnerError&lt;W&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Utf8Error","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for ByteRecordsIntoIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'r, R&gt; RefUnwindSafe for ByteRecordsIter&lt;'r, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, D&gt; RefUnwindSafe for DeserializeRecordsIntoIter&lt;R, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'r, R, D&gt; RefUnwindSafe for DeserializeRecordsIter&lt;'r, R, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Reader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReaderBuilder","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for StringRecordsIntoIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'r, R&gt; RefUnwindSafe for StringRecordsIter&lt;'r, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StringRecord","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; RefUnwindSafe for StringRecordIter&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for Writer&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WriterBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeserializeErrorKind","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QuoteStyle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Terminator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Trim","synthetic":true,"types":[]}];
implementors["csv_core"] = [{"text":"impl RefUnwindSafe for Reader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReaderBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Writer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WriterBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReadFieldNoCopyResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReadFieldResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReadRecordNoCopyResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReadRecordResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WriteResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Terminator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QuoteStyle","synthetic":true,"types":[]}];
implementors["digest"] = [{"text":"impl RefUnwindSafe for InvalidOutputSize","synthetic":true,"types":[]}];
implementors["env_logger"] = [{"text":"impl&lt;'a&gt; RefUnwindSafe for Env&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Logger","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Target","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WriteStyle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Filter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Timestamp","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Style","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for StyledValue&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Formatter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Color","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TimestampPrecision","synthetic":true,"types":[]}];
implementors["failure"] = [{"text":"impl !RefUnwindSafe for Backtrace","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for Compat&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; !RefUnwindSafe for Context&lt;D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SyncFailure&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'f&gt; !RefUnwindSafe for Causes&lt;'f&gt;","synthetic":true,"types":[]}];
implementors["fallible_iterator"] = [{"text":"impl&lt;T, F&gt; RefUnwindSafe for Map&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; RefUnwindSafe for Chain&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Cloned&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Convert&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Enumerate&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for Filter&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for FilterMap&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; RefUnwindSafe for FlatMap&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as IntoFallibleIterator&gt;::IntoFallibleIter: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Flatten&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as FallibleIterator&gt;::Item as IntoFallibleIterator&gt;::IntoFallibleIter: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Fuse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for Inspect&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Iterator&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for MapErr&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Peekable&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as FallibleIterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Rev&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, St, F&gt; RefUnwindSafe for Scan&lt;I, St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Skip&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; RefUnwindSafe for SkipWhile&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for StepBy&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Take&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; RefUnwindSafe for TakeWhile&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Cycle&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; RefUnwindSafe for Zip&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["flatbuffers"] = [{"text":"impl&lt;'fbb&gt; RefUnwindSafe for FlatBufferBuilder&lt;'fbb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for FollowStart&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TableFinishedWIPOffset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TableUnfinishedWIPOffset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnionWIPOffset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VTableWIPOffset","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for WIPOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for ForwardsUOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for ForwardsVOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for BackwardsSOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SkipSizePrefix&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SkipRootOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FileIdentifier","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SkipFileIdentifier&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Table&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Vector&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for VectorIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'opts, 'buf&gt; RefUnwindSafe for Verifier&lt;'opts, 'buf&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VerifierOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorTraceDetail","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InvalidFlatbuffer","synthetic":true,"types":[]}];
implementors["flate2"] = [{"text":"impl RefUnwindSafe for Crc","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for CrcReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for CrcWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GzBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GzHeader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Compress","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompressError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Decompress","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DecompressError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Compression","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Status","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlushCompress","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlushDecompress","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for DeflateEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for DeflateDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for DeflateEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for DeflateDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for DeflateEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for DeflateDecoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for GzEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !RefUnwindSafe for GzDecoder&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !RefUnwindSafe for MultiGzDecoder&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for GzEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !RefUnwindSafe for GzDecoder&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !RefUnwindSafe for MultiGzDecoder&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for GzEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for GzDecoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for ZlibEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for ZlibDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for ZlibEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for ZlibDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for ZlibEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for ZlibDecoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["fnv"] = [{"text":"impl RefUnwindSafe for FnvHasher","synthetic":true,"types":[]}];
implementors["futures_channel"] = [{"text":"impl&lt;T&gt; !RefUnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for UnboundedSender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for UnboundedReceiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SendError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for Cancellation&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Canceled","synthetic":true,"types":[]}];
implementors["futures_executor"] = [{"text":"impl&lt;S&gt; RefUnwindSafe for BlockingStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LocalPool","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LocalSpawner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Enter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EnterError","synthetic":true,"types":[]}];
implementors["futures_task"] = [{"text":"impl RefUnwindSafe for SpawnError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for WakerRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for FutureObj&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for LocalFutureObj&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["futures_util"] = [{"text":"impl&lt;F&gt; RefUnwindSafe for Flatten&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Output: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for Fuse&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; RefUnwindSafe for Inspect&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for IntoStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; RefUnwindSafe for Map&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for NeverError&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; RefUnwindSafe for Then&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for UnitError&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, T&gt; RefUnwindSafe for MapInto&lt;Fut, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for FlattenStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Output: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for CatchUnwind&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; !RefUnwindSafe for Remote&lt;Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for RemoteHandle&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; !RefUnwindSafe for Shared&lt;Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; !RefUnwindSafe for WeakShared&lt;Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; RefUnwindSafe for AndThen&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, E&gt; RefUnwindSafe for ErrInto&lt;Fut, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, E&gt; RefUnwindSafe for OkInto&lt;Fut, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; RefUnwindSafe for InspectErr&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; RefUnwindSafe for InspectOk&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for IntoFuture&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; RefUnwindSafe for MapErr&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; RefUnwindSafe for MapOk&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; RefUnwindSafe for OrElse&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for TryFlattenStream&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as TryFuture&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; RefUnwindSafe for UnwrapOrElse&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F, G&gt; RefUnwindSafe for MapOkOrElse&lt;Fut, F, G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2&gt; RefUnwindSafe for TryFlatten&lt;Fut1, Fut2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, Si&gt; RefUnwindSafe for FlattenSink&lt;Fut, Si&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for Lazy&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Pending&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for OptionFuture&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Ready&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2&gt; RefUnwindSafe for Join&lt;Fut1, Fut2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3&gt; RefUnwindSafe for Join3&lt;Fut1, Fut2, Fut3&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as Future&gt;::Output: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4&gt; RefUnwindSafe for Join4&lt;Fut1, Fut2, Fut3, Fut4&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as Future&gt;::Output: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as Future&gt;::Output: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; RefUnwindSafe for Join5&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut5: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as Future&gt;::Output: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as Future&gt;::Output: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut5 as Future&gt;::Output: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for JoinAll&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Output: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for Select&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for SelectAll&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2&gt; RefUnwindSafe for TryJoin&lt;Fut1, Fut2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3&gt; RefUnwindSafe for TryJoin3&lt;Fut1, Fut2, Fut3&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4&gt; RefUnwindSafe for TryJoin4&lt;Fut1, Fut2, Fut3, Fut4&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Ok: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as TryFuture&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; RefUnwindSafe for TryJoin5&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut5: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Ok: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as TryFuture&gt;::Ok: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut5 as TryFuture&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for TryJoinAll&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as TryFuture&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for TrySelect&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for SelectOk&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; !RefUnwindSafe for Abortable&lt;Fut&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AbortHandle","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AbortRegistration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Aborted","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for MaybeDone&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as Future&gt;::Output: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for TryMaybeDone&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as TryFuture&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for Either&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St1, St2&gt; RefUnwindSafe for Chain&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, C&gt; RefUnwindSafe for Collect&lt;St, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for Concat&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for Cycle&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for Enumerate&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for Filter&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for FilterMap&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, U, F&gt; RefUnwindSafe for FlatMap&lt;St, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for Flatten&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, T, F&gt; RefUnwindSafe for Fold&lt;St, Fut, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for ForEach&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for Fuse&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; RefUnwindSafe for Inspect&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; RefUnwindSafe for Map&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St:&nbsp;?Sized&gt; RefUnwindSafe for Next&lt;'a, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St&gt; RefUnwindSafe for Peek&lt;'a, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for Peekable&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, S, Fut, F&gt; RefUnwindSafe for Scan&lt;St, S, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St:&nbsp;?Sized&gt; RefUnwindSafe for SelectNextSome&lt;'a, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for Skip&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for SkipWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for StreamFuture&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for Take&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut&gt; RefUnwindSafe for TakeUntil&lt;St, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as Future&gt;::Output: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for TakeWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for Then&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, FromA, FromB&gt; RefUnwindSafe for Unzip&lt;St, FromA, FromB&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;FromA: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;FromB: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St1, St2&gt; RefUnwindSafe for Zip&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St1 as Stream&gt;::Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St2 as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for CatchUnwind&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for Chunks&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for ReadyChunks&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Si&gt; RefUnwindSafe for Forward&lt;St, Si&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; !RefUnwindSafe for BufferUnordered&lt;St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; !RefUnwindSafe for Buffered&lt;St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; !RefUnwindSafe for ForEachConcurrent&lt;St, Fut, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, Item&gt; !RefUnwindSafe for ReuniteError&lt;T, Item&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S, Item&gt; !RefUnwindSafe for SplitSink&lt;S, Item&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for SplitStream&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for AndThen&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, E&gt; RefUnwindSafe for ErrInto&lt;St, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; RefUnwindSafe for InspectErr&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; RefUnwindSafe for InspectOk&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for IntoStream&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; RefUnwindSafe for MapErr&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; RefUnwindSafe for MapOk&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for OrElse&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, C&gt; RefUnwindSafe for TryCollect&lt;St, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for TryConcat&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for TryFilter&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for TryFilterMap&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for TryFlatten&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, T, F&gt; RefUnwindSafe for TryFold&lt;St, Fut, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for TryForEach&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St:&nbsp;?Sized&gt; RefUnwindSafe for TryNext&lt;'a, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for TrySkipWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for TryTakeWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, Fut&gt; RefUnwindSafe for TryUnfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for IntoAsyncRead&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; !RefUnwindSafe for TryBufferUnordered&lt;St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; !RefUnwindSafe for TryBuffered&lt;St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; !RefUnwindSafe for TryForEachConcurrent&lt;St, Fut, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Iter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Repeat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for RepeatWith&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Empty&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for Once&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Pending&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St1, St2&gt; RefUnwindSafe for Select&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, Fut&gt; RefUnwindSafe for Unfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for FuturesOrdered&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; !RefUnwindSafe for FuturesUnordered&lt;Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; !RefUnwindSafe for SelectAll&lt;St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !RefUnwindSafe for Iter&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !RefUnwindSafe for IterMut&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !RefUnwindSafe for IterPinMut&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !RefUnwindSafe for IterPinRef&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si:&nbsp;?Sized, Item&gt; RefUnwindSafe for Close&lt;'a, Si, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Drain&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si1, Si2&gt; RefUnwindSafe for Fanout&lt;Si1, Si2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si2: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si:&nbsp;?Sized, Item&gt; RefUnwindSafe for Feed&lt;'a, Si, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si:&nbsp;?Sized, Item&gt; RefUnwindSafe for Flush&lt;'a, Si, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item, E&gt; RefUnwindSafe for SinkErrInto&lt;Si, Item, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, F&gt; RefUnwindSafe for SinkMapErr&lt;Si, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si:&nbsp;?Sized, Item&gt; RefUnwindSafe for Send&lt;'a, Si, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si:&nbsp;?Sized, St:&nbsp;?Sized&gt; RefUnwindSafe for SendAll&lt;'a, Si, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, R&gt; RefUnwindSafe for Unfold&lt;T, F, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item, U, Fut, F&gt; RefUnwindSafe for With&lt;Si, Item, U, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item, U, St, F&gt; RefUnwindSafe for WithFlatMap&lt;Si, Item, U, St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item&gt; RefUnwindSafe for Buffer&lt;Si, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for AllowStdIo&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for BufReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for BufWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; RefUnwindSafe for Chain&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; RefUnwindSafe for Close&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, W:&nbsp;?Sized&gt; RefUnwindSafe for Copy&lt;'a, R, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, W:&nbsp;?Sized&gt; RefUnwindSafe for CopyBuf&lt;'a, R, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Cursor&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Empty","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; RefUnwindSafe for FillBuf&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; RefUnwindSafe for Flush&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W, Item&gt; RefUnwindSafe for IntoSink&lt;W, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Lines&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; RefUnwindSafe for Read&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; RefUnwindSafe for ReadVectored&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; RefUnwindSafe for ReadExact&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; RefUnwindSafe for ReadLine&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; RefUnwindSafe for ReadToEnd&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; RefUnwindSafe for ReadToString&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; RefUnwindSafe for ReadUntil&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Repeat","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; RefUnwindSafe for Seek&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sink","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for ReadHalf&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for WriteHalf&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for ReuniteError&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Take&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Window&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; RefUnwindSafe for Write&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; RefUnwindSafe for WriteVectored&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; RefUnwindSafe for WriteAll&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, U&gt; !RefUnwindSafe for MappedMutexGuard&lt;'a, T, U&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Mutex&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for MutexLockFuture&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for MutexGuard&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["getrandom"] = [{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["hex"] = [{"text":"impl RefUnwindSafe for FromHexError","synthetic":true,"types":[]}];
implementors["hmac"] = [{"text":"impl&lt;D&gt; RefUnwindSafe for Hmac&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;D as BlockInput&gt;::BlockSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["http"] = [{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Extensions","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for GetAll&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for HeaderMap&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Keys&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for OccupiedEntry&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for VacantEntry&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for ValueDrain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for ValueIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for ValueIterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Values&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for ValuesMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HeaderName","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InvalidHeaderName","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HeaderValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InvalidHeaderValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ToStrError","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Entry&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Method","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InvalidMethod","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Request&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Parts","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Response&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Parts","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StatusCode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InvalidStatusCode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Authority","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PathAndQuery","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Port&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Scheme","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Uri","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Parts","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InvalidUri","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InvalidUriParts","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Version","synthetic":true,"types":[]}];
implementors["http_body"] = [{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; RefUnwindSafe for Data&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; RefUnwindSafe for Trailers&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SizeHint","synthetic":true,"types":[]}];
implementors["httparse"] = [{"text":"impl RefUnwindSafe for InvalidChunkSize","synthetic":true,"types":[]},{"text":"impl&lt;'headers, 'buf&gt; RefUnwindSafe for Request&lt;'headers, 'buf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'headers, 'buf&gt; RefUnwindSafe for Response&lt;'headers, 'buf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Header&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Status&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["httpdate"] = [{"text":"impl RefUnwindSafe for HttpDate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["humantime"] = [{"text":"impl RefUnwindSafe for FormattedDuration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Duration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Timestamp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rfc3339Timestamp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["hyper"] = [{"text":"impl !RefUnwindSafe for Body","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Sender","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Upgraded","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OnUpgrade","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Parts&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for HttpConnector&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl&lt;C, B&nbsp;=&nbsp;Body&gt; !RefUnwindSafe for Client&lt;C, B&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ResponseFuture","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HttpInfo","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Connected","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Name","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GaiResolver","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GaiAddrs","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GaiFuture","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InvalidNameError","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; !RefUnwindSafe for SendRequest&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, B&gt; !RefUnwindSafe for Connection&lt;T, B&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ResponseFuture","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Parts&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, B, T&gt; !RefUnwindSafe for Connect&lt;C, B, T&gt;","synthetic":true,"types":[]}];
implementors["hyper_tls"] = [{"text":"impl&lt;T&gt; !RefUnwindSafe for HttpsConnecting&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for HttpsConnector&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for MaybeHttpsStream&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["indexmap"] = [{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for OccupiedEntry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for VacantEntry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V, S&gt; RefUnwindSafe for IndexMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for ValuesMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for IterMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; RefUnwindSafe for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Drain&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Entry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; RefUnwindSafe for IndexSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; RefUnwindSafe for Difference&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; RefUnwindSafe for Intersection&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S1, S2&gt; RefUnwindSafe for SymmetricDifference&lt;'a, T, S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; RefUnwindSafe for Union&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["itoa"] = [{"text":"impl RefUnwindSafe for Buffer","synthetic":true,"types":[]}];
implementors["lexical_core"] = [{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorCode","synthetic":true,"types":[]}];
implementors["log"] = [{"text":"impl&lt;'a&gt; !RefUnwindSafe for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for RecordBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Metadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for MetadataBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetLoggerError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseLevelError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Level","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LevelFilter","synthetic":true,"types":[]}];
implementors["md5"] = [{"text":"impl RefUnwindSafe for Digest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Context","synthetic":true,"types":[]}];
implementors["memchr"] = [{"text":"impl&lt;'a&gt; RefUnwindSafe for Memchr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Memchr2&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Memchr3&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["mio"] = [{"text":"impl RefUnwindSafe for Interest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Poll","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Registry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Token","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Waker","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SourceFd&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SocketAddr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sender","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Receiver","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Events","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TcpListener","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TcpSocket","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TcpStream","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TcpKeepalive","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UdpSocket","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnixDatagram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnixListener","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnixStream","synthetic":true,"types":[]}];
implementors["native_tls"] = [{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Identity","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Certificate","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for MidHandshakeTlsStream&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TlsConnectorBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TlsConnector","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TlsAcceptorBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TlsAcceptor","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for TlsStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for HandshakeError&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Protocol","synthetic":true,"types":[]}];
implementors["ndarray"] = [{"text":"impl&lt;I:&nbsp;?Sized&gt; RefUnwindSafe for Dim&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Axis","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AxisDescription","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IxDynImpl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ShapeError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Slice","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized, D&gt; RefUnwindSafe for SliceInfo&lt;T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Parts, D&gt; RefUnwindSafe for Zip&lt;Parts, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Parts: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, D&gt; RefUnwindSafe for ArrayBase&lt;S, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as RawData&gt;::Elem: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for OwnedRepr&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for OwnedArcRepr&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for RawViewRepr&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for ViewRepr&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; RefUnwindSafe for Shape&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; RefUnwindSafe for StrideShape&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SliceOrIndex","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for FoldWhile&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; RefUnwindSafe for CowRepr&lt;'a, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, D&gt; RefUnwindSafe for Axes&lt;'a, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; RefUnwindSafe for Indices&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; RefUnwindSafe for IndicesIter&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; RefUnwindSafe for AxisChunksIter&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; RefUnwindSafe for AxisChunksIterMut&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; RefUnwindSafe for AxisIter&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; RefUnwindSafe for AxisIterMut&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; RefUnwindSafe for ExactChunks&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; RefUnwindSafe for ExactChunksIter&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; RefUnwindSafe for ExactChunksIterMut&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; RefUnwindSafe for ExactChunksMut&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; RefUnwindSafe for IndexedIter&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; RefUnwindSafe for IndexedIterMut&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; RefUnwindSafe for Iter&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; RefUnwindSafe for IterMut&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; RefUnwindSafe for Lanes&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; RefUnwindSafe for LanesIter&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; RefUnwindSafe for LanesIterMut&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; RefUnwindSafe for LanesMut&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; RefUnwindSafe for Windows&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_bigint"] = [{"text":"impl RefUnwindSafe for ParseBigIntError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for TryFromBigIntError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BigUint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BigInt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sign","synthetic":true,"types":[]}];
implementors["num_complex"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for Complex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for ParseComplexError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A&gt; RefUnwindSafe for ExtendedGcd&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IterBinomial&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_iter"] = [{"text":"impl&lt;A&gt; RefUnwindSafe for Range&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for RangeInclusive&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for RangeStep&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for RangeStepInclusive&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for RangeFrom&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for RangeStepFrom&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseRatioError","synthetic":true,"types":[]}];
implementors["num_traits"] = [{"text":"impl RefUnwindSafe for ParseFloatError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FloatErrorKind","synthetic":true,"types":[]}];
implementors["once_cell"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for OnceCell&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;RefUnwindSafe + UnwindSafe&gt; RefUnwindSafe for OnceCell&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, F:&nbsp;RefUnwindSafe&gt; RefUnwindSafe for Lazy&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;OnceCell&lt;T&gt;: RefUnwindSafe,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, F:&nbsp;RefUnwindSafe&gt; RefUnwindSafe for Lazy&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;OnceCell&lt;T&gt;: RefUnwindSafe,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["openssl"] = [{"text":"impl RefUnwindSafe for KeyError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AesKey","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Asn1GeneralizedTime","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Asn1GeneralizedTimeRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TimeDiff","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Asn1Time","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Asn1TimeRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Asn1String","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Asn1StringRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Asn1Integer","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Asn1IntegerRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Asn1BitString","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Asn1BitStringRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Asn1Object","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Asn1ObjectRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MsbOption","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BigNumContext","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for BigNumContextRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BigNum","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for BigNumRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CMSOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CmsContentInfo","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CmsContentInfoRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConfMethod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Conf","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ConfRef","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Deriver&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Dh&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for DhRef&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Dsa&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for DsaRef&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PointConversionForm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Asn1Flag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EcGroup","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for EcGroupRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EcPoint","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for EcPointRef","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for EcKey&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for EcKeyRef&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EcdsaSig","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for EcdsaSigRef","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Encrypter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Decrypter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Seal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Open","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorStack","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; RefUnwindSafe for Index&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MessageDigest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Hasher","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DigestBytes","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SignatureAlgorithms","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Nid","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OcspFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OcspResponseStatus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OcspCertStatus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OcspRevokedStatus","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for OcspStatus&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OcspBasicResponse","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OcspBasicResponseRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OcspCertId","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OcspCertIdRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OcspResponse","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OcspResponseRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OcspRequest","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OcspRequestRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OcspOneReq","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OcspOneReqRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pkcs12","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Pkcs12Ref","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParsedPkcs12","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pkcs12Builder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeyIvPair","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pkcs7","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Pkcs7Ref","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pkcs7Flags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Id","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for PKey&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for PKeyRef&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Params","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Public","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Private","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Padding","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Rsa&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for RsaRef&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RsaPrivateKeyBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sha1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sha224","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sha256","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sha384","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sha512","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RsaPssSaltlen","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Signer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Verifier&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SrtpProtectionProfile","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SrtpProtectionProfileRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SrtpProfileId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConnectConfiguration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslAcceptor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslAcceptorBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslConnector","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslConnectorBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorCode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslMethod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslVerifyMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslSessionCacheMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExtensionContext","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslFiletype","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StatusType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NameType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SniError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslAlert","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AlpnError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClientHelloResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslVersion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslContextBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslContext","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SslContextRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CipherBits","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslCipher","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SslCipherRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslSession","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SslSessionRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ssl","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SslRef","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for MidHandshakeSslStream&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for SslStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for SslStreamBuilder&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ShutdownState","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for HandshakeError&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ShutdownResult","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Stack&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Stackable&gt;::StackType: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Stackable&gt;::StackType: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for StackRef&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OpensslString","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OpensslStringRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Cipher","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Crypter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509StoreContext","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for X509StoreContextRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509Builder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for X509Ref","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for X509v3Context&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509Extension","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for X509ExtensionRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509NameBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509Name","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for X509NameRef","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for X509NameEntries&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509NameEntry","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for X509NameEntryRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509ReqBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509Req","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for X509ReqRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509VerifyResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GeneralName","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GeneralNameRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509Algorithm","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for X509AlgorithmRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509Object","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for X509ObjectRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509CheckFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509VerifyFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509VerifyParam","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for X509VerifyParamRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BasicConstraints","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeyUsage","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExtendedKeyUsage","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SubjectKeyIdentifier","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AuthorityKeyIdentifier","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SubjectAlternativeName","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509StoreBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for X509StoreBuilderRef","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for X509Lookup&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for X509LookupRef&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HashDir","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for X509LookupMethod&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for X509LookupMethodRef&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509Store","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for X509StoreRef","synthetic":true,"types":[]}];
implementors["openssl_probe"] = [{"text":"impl RefUnwindSafe for ProbeResult","synthetic":true,"types":[]}];
implementors["openssl_sys"] = [{"text":"impl RefUnwindSafe for AES_KEY","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ASN1_ENCODING","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ERR_STRING_DATA","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509V3_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SHA_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SHA256_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SHA512_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SRTP_PROTECTION_PROFILE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_VAL","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GENERAL_NAME","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AUTHORITY_KEYID","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_ASN1_OBJECT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BIO_METHOD","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CMS_ContentInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_void","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for point_conversion_form_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EC_METHOD","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EC_GROUP","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EC_POINT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ECDSA_SIG","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OCSP_CERTID","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OCSP_ONEREQ","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OCSP_REQUEST","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OCSP_BASICRESP","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ASN1_INTEGER","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ASN1_GENERALIZEDTIME","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ASN1_STRING","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ASN1_BIT_STRING","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ASN1_TIME","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ASN1_TYPE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ASN1_OBJECT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ASN1_OCTET_STRING","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for bio_st","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BIO","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BIGNUM","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BN_BLINDING","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BN_MONT_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BN_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BN_GENCB","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EVP_CIPHER","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EVP_CIPHER_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EVP_MD","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EVP_MD_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EVP_PKEY","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PKCS8_PRIV_KEY_INFO","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EVP_PKEY_ASN1_METHOD","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EVP_PKEY_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HMAC_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DH","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DH_METHOD","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DSA","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DSA_METHOD","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RSA","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RSA_METHOD","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EC_KEY","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_ALGOR","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_LOOKUP_METHOD","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_NAME","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_STORE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_STORE_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_VERIFY_PARAM","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CONF","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OPENSSL_INIT_SETTINGS","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ENGINE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SSL","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SSL_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for COMP_METHOD","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CRYPTO_EX_DATA","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OCSP_RESPONSE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PKCS12","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PKCS7_SIGNED","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PKCS7_ENVELOPE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PKCS7_SIGN_ENVELOPE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PKCS7_DIGEST","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PKCS7_ENCRYPT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PKCS7","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_OPENSSL_STRING","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SSL_METHOD","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SSL_CIPHER","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SSL_SESSION","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_SSL_CIPHER","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_SRTP_PROTECTION_PROFILE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OPENSSL_STACK","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_NAME_ENTRY","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_X509_NAME","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_EXTENSION","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_X509_EXTENSION","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_X509_ATTRIBUTE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_REQ_INFO","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_CRL","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_X509_CRL","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_CRL_INFO","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_REVOKED","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_X509_REVOKED","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_REQ","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_CINF","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_X509","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_OBJECT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_X509_OBJECT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_LOOKUP","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_X509_LOOKUP","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CONF_METHOD","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_GENERAL_NAME","synthetic":true,"types":[]}];
implementors["parking_lot"] = [{"text":"impl RefUnwindSafe for Condvar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WaitTimeoutResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Once","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawFairMutex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawMutex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawRwLock","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawThreadId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OnceState","synthetic":true,"types":[]}];
implementors["parking_lot_core"] = [{"text":"impl RefUnwindSafe for ParkToken","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnparkResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnparkToken","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpinWait","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FilterOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParkResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RequeueOp","synthetic":true,"types":[]}];
implementors["percent_encoding"] = [{"text":"impl RefUnwindSafe for AsciiSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for PercentEncode&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for PercentDecode&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["phf"] = [{"text":"impl&lt;K, V&gt; RefUnwindSafe for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Set&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Entries&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["phf_shared"] = [{"text":"impl RefUnwindSafe for Hashes","synthetic":true,"types":[]}];
implementors["postgres"] = [{"text":"impl RefUnwindSafe for CancelToken","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Client","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for CopyInWriter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for CopyOutReader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Notifications&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for RowIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Transaction&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for TransactionBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for BinaryCopyInWriter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for BinaryCopyOutIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for BlockingIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for TimeoutIter&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["postgres_protocol"] = [{"text":"impl RefUnwindSafe for IsNull","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChannelBinding","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ScramSha256","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Header","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AuthenticationMd5PasswordBody","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AuthenticationGssContinueBody","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AuthenticationSaslBody","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SaslMechanisms&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AuthenticationSaslContinueBody","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AuthenticationSaslFinalBody","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BackendKeyDataBody","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CommandCompleteBody","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CopyDataBody","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CopyInResponseBody","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ColumnFormats&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CopyOutResponseBody","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DataRowBody","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for DataRowRanges&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorResponseBody","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ErrorFields&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ErrorField&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NoticeResponseBody","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NotificationResponseBody","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParameterDescriptionBody","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Parameters&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParameterStatusBody","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReadyForQueryBody","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RowDescriptionBody","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Fields&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Field&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Message","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for CopyData&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for BindError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for HstoreEntries&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Varbit&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Array&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ArrayDimensions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArrayDimension","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ArrayValues&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Point","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Box","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Path&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for PathPoints&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Inet","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for RangeBound&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Range&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["postgres_types"] = [{"text":"impl RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Field","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WasNull","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WrongType","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Date&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Timestamp&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Kind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IsNull","synthetic":true,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl RefUnwindSafe for TokenStream","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LexError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Span","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Punct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ident","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TokenTree","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Delimiter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Spacing","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntoIter","synthetic":true,"types":[]}];
implementors["pyo3"] = [{"text":"impl&lt;'a&gt; !RefUnwindSafe for PyDowncastError&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyErr","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GILGuard","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GILPool","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Py&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'p&gt; !RefUnwindSafe for Python&lt;'p&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'p&gt; RefUnwindSafe for PythonVersionInfo&lt;'p&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyAny","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for PyBuffer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for ReadOnlyCell&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ElementType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompareOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyTraverseError","synthetic":true,"types":[]},{"text":"impl&lt;'p&gt; !RefUnwindSafe for PyVisit&lt;'p&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; RefUnwindSafe for IterNextOutput&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyBufferProcs","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; RefUnwindSafe for IterANextOutput&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyBaseException","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyException","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyStopAsyncIteration","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyStopIteration","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyGeneratorExit","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyArithmeticError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyLookupError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyAssertionError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyAttributeError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyBufferError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyEOFError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyFloatingPointError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyOSError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyImportError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyModuleNotFoundError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyIndexError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyKeyError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyKeyboardInterrupt","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyMemoryError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyNameError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyOverflowError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyRuntimeError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyRecursionError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyNotImplementedError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PySyntaxError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyReferenceError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PySystemError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PySystemExit","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyTypeError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyUnboundLocalError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyUnicodeError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyUnicodeDecodeError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyUnicodeEncodeError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyUnicodeTranslateError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyValueError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyZeroDivisionError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyBlockingIOError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyBrokenPipeError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyChildProcessError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyConnectionError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyConnectionAbortedError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyConnectionRefusedError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyConnectionResetError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyFileExistsError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyFileNotFoundError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyInterruptedError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyIsADirectoryError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyNotADirectoryError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyPermissionError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyProcessLookupError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyTimeoutError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyEnvironmentError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyIOError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CancelledError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for InvalidStateError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TimeoutError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for IncompleteReadError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LimitOverrunError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for QueueEmpty","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for QueueFull","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for herror","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for gaierror","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for timeout","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyFutureFeatures","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Py_complex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyComplexObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyDateTime_Delta","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyDateTime_Time","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyDateTime_Date","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyDateTime_DateTime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyDateTime_CAPI","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyDateTimeAPI","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyGetSetDef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyFloatObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyGenObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyListObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyLongObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyMethodDef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyModuleDef_Base","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyModuleDef_Slot","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyModuleDef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyVarObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Py_buffer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyNumberMethods","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PySequenceMethods","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyMappingMethods","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyAsyncMethods","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyTypeObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyHeapTypeObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyType_Slot","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyType_Spec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyObjectArenaAllocator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyArena","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyBaseExceptionObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PySyntaxErrorObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyImportErrorObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyUnicodeErrorObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PySystemExitObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyOSErrorObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyStopIterationObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyHash_FuncDef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyMemAllocatorEx","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyInterpreterState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyThreadState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyCompilerFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _mod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for symtable","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _node","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for setentry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PySetObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PySliceObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyStructSequence_Field","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyStructSequence_Desc","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyTupleObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyWeakReference","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyCodeObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyDictKeysObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyDictObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyTryBlock","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyFrameObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyMemAllocatorDomain","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyGILState_STATE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyMemberDef","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for FreeList&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Slot&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for GILOnceCell&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PanicException","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyModule","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for PyCell&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'p, T&gt; !RefUnwindSafe for PyRef&lt;'p, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'p, T&gt; !RefUnwindSafe for PyRefMut&lt;'p, T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyBorrowError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyBorrowMutError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for PyNativeTypeInitializer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for PyClassInitializer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as PyTypeInfo&gt;::BaseType as PyTypeInfo&gt;::Initializer: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyClassDummySlot","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyClassDictSlot","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyClassWeakRefSlot","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyBool","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyByteArray","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyBytes","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyComplex","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyDate","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyDateTime","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyDelta","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyTime","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyTzInfo","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyDict","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyFloat","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyCFunction","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyFunction","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyIterator","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyList","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyLong","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PySequence","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyFrozenSet","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PySet","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PySlice","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PySliceIndices","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyString","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyTuple","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PyType","synthetic":true,"types":[]}];
implementors["pyo3_macros_backend"] = [{"text":"impl RefUnwindSafe for PyClassArgs","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PyFunctionAttr","synthetic":true,"types":[]}];
implementors["r2d2"] = [{"text":"impl&lt;M&gt; !RefUnwindSafe for Builder&lt;M&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Extensions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NopErrorHandler","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LoggingErrorHandler","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NopConnectionCustomizer","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; !RefUnwindSafe for Pool&lt;M&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for State","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; !RefUnwindSafe for PooledConnection&lt;M&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NopEventHandler","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AcquireEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReleaseEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CheckoutEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TimeoutEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CheckinEvent","synthetic":true,"types":[]}];
implementors["r2d2_postgres"] = [{"text":"impl&lt;T&gt; !RefUnwindSafe for PostgresConnectionManager&lt;T&gt;","synthetic":true,"types":[]}];
implementors["rand"] = [{"text":"impl RefUnwindSafe for Bernoulli","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Open01","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OpenClosed01","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Alphanumeric","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; RefUnwindSafe for Uniform&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Binomial","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Cauchy","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dirichlet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Exp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Exp1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Beta","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChiSquared","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FisherF","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Gamma","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StudentT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LogNormal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Normal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StandardNormal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pareto","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Poisson","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Triangular","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnitCircle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnitSphereSurface","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Weibull","synthetic":true,"types":[]},{"text":"impl&lt;D, R, T&gt; RefUnwindSafe for DistIter&lt;D, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Standard","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BernoulliError","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; RefUnwindSafe for UniformInt&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; RefUnwindSafe for UniformFloat&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UniformDuration","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; RefUnwindSafe for WeightedIndex&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WeightedError","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for WeightedIndex&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;W as SampleUniform&gt;::Sampler: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EntropyRng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StdRng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ThreadRng","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ReadError","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for ReadRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Rsdr&gt; RefUnwindSafe for ReseedingRng&lt;R, Rsdr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Rsdr: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StepRng","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, T&gt; RefUnwindSafe for SliceChooseIter&lt;'a, S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IndexVec","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for IndexVecIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IndexVecIntoIter","synthetic":true,"types":[]}];
implementors["rand_chacha"] = [{"text":"impl RefUnwindSafe for ChaCha12Core","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChaCha12Rng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChaCha20Core","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChaCha20Rng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChaCha8Core","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChaCha8Rng","synthetic":true,"types":[]}];
implementors["rand_core"] = [{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OsRng","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; RefUnwindSafe for BlockRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; RefUnwindSafe for BlockRng64&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rayon"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; RefUnwindSafe for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for IterMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; RefUnwindSafe for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for IterMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Drain&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for Chain&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Chunks&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Cloned&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Copied&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Empty&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Enumerate&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; RefUnwindSafe for Filter&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; RefUnwindSafe for FilterMap&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for FlatMap&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for FlatMapIter&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Flatten&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for FlattenIter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, ID, F&gt; RefUnwindSafe for Fold&lt;I, ID, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;ID: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; RefUnwindSafe for FoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for Inspect&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; RefUnwindSafe for Interleave&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; RefUnwindSafe for InterleaveShortest&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Intersperse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as ParallelIterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for MaxLen&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for MinLen&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for Map&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, INIT, F&gt; RefUnwindSafe for MapInit&lt;I, INIT, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;INIT: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T, F&gt; RefUnwindSafe for MapWith&lt;I, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for MultiZip&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Once&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for PanicFuse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Iter&gt; RefUnwindSafe for IterBridge&lt;Iter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Iter: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; RefUnwindSafe for Positions&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Repeat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for RepeatN&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Rev&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Skip&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D, S&gt; RefUnwindSafe for Split&lt;D, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Take&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, ID, F&gt; RefUnwindSafe for TryFold&lt;I, U, ID, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;ID: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; RefUnwindSafe for TryFoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as Try&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for Update&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for WhileSome&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for Zip&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for ZipEq&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for StepBy&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; RefUnwindSafe for Iter&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; RefUnwindSafe for Chunks&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; RefUnwindSafe for ChunksExact&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; RefUnwindSafe for Windows&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; RefUnwindSafe for IterMut&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; RefUnwindSafe for ChunksMut&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; RefUnwindSafe for ChunksExactMut&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T, P&gt; RefUnwindSafe for Split&lt;'data, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T, P&gt; RefUnwindSafe for SplitMut&lt;'data, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; RefUnwindSafe for Chars&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; RefUnwindSafe for CharIndices&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; RefUnwindSafe for Bytes&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; RefUnwindSafe for EncodeUtf16&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; RefUnwindSafe for Split&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; RefUnwindSafe for SplitTerminator&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; RefUnwindSafe for Lines&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; RefUnwindSafe for SplitWhitespace&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; RefUnwindSafe for Matches&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; RefUnwindSafe for MatchIndices&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Drain&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; RefUnwindSafe for Drain&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rayon_core"] = [{"text":"impl !RefUnwindSafe for ThreadBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; !RefUnwindSafe for Scope&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; !RefUnwindSafe for ScopeFifo&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ThreadPool","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ThreadPoolBuildError","synthetic":true,"types":[]},{"text":"impl&lt;S&nbsp;=&nbsp;DefaultSpawn&gt; !RefUnwindSafe for ThreadPoolBuilder&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Configuration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FnContext","synthetic":true,"types":[]}];
implementors["regex"] = [{"text":"impl RefUnwindSafe for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegexBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegexSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetMatches","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; RefUnwindSafe for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; RefUnwindSafe for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; RefUnwindSafe for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; RefUnwindSafe for NoExpand&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; RefUnwindSafe for ReplacerRef&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; RefUnwindSafe for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegexBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; RefUnwindSafe for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; RefUnwindSafe for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; RefUnwindSafe for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; RefUnwindSafe for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; RefUnwindSafe for ReplacerRef&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; RefUnwindSafe for NoExpand&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegexSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetMatches","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["regex_automata"] = [{"text":"impl&lt;D&gt; RefUnwindSafe for Regex&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; RefUnwindSafe for DenseDFA&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; RefUnwindSafe for SparseDFA&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; RefUnwindSafe for Standard&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; RefUnwindSafe for ByteClass&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; RefUnwindSafe for Premultiplied&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; RefUnwindSafe for PremultipliedByteClass&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; RefUnwindSafe for Standard&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; RefUnwindSafe for ByteClass&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl !RefUnwindSafe for Parser","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParserBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnicodeWordError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Span","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Position","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WithComments","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Comment","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Alternation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Concat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassPerl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassAscii","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassUnicode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassBracketed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassSetRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassSetUnion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassSetBinaryOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Assertion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Repetition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RepetitionOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CaptureName","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Flags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlagsItem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ast","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LiteralKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpecialLiteralKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HexLiteralKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Class","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassPerlKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassAsciiKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassUnicodeKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassUnicodeOpKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassSetItem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassSetBinaryOpKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AssertionKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RepetitionKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RepetitionRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GroupKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlagsItemKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Flag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParserBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Parser","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Printer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CaseFoldError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Hir","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassUnicode","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ClassUnicodeIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassUnicodeRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassBytes","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ClassBytesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassBytesRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Repetition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HirKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Class","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Anchor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WordBoundary","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GroupKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RepetitionKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RepetitionRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Literals","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Printer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TranslatorBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Translator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Utf8Range","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Utf8Sequences","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Utf8Sequence","synthetic":true,"types":[]}];
implementors["rusoto_core"] = [{"text":"impl !RefUnwindSafe for Client","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for RusotoError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for EventStream&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for HttpResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BufferedHttpResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HttpDispatchError","synthetic":true,"types":[]},{"text":"impl&lt;C&nbsp;=&nbsp;HttpsConnector&lt;HttpConnector&lt;GaiResolver&gt;&gt;&gt; !RefUnwindSafe for HttpClient&lt;C&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HttpConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TlsError","synthetic":true,"types":[]}];
implementors["rusoto_credential"] = [{"text":"impl !RefUnwindSafe for ContainerProvider","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EnvironmentProvider","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for InstanceMetadataProvider","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProfileProvider","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Secret","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StaticProvider","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AwsCredentials","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CredentialsError","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; !RefUnwindSafe for AutoRefreshingProvider&lt;P&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DefaultCredentialsProvider","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ChainProvider","synthetic":true,"types":[]},{"text":"impl&lt;T, E&nbsp;=&nbsp;CredentialsError&gt; !RefUnwindSafe for Variable&lt;T, E&gt;","synthetic":true,"types":[]}];
implementors["rusoto_s3"] = [{"text":"impl RefUnwindSafe for AbortIncompleteMultipartUpload","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AbortIncompleteMultipartUploadSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AbortMultipartUploadOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AbortMultipartUploadRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AccelerateConfiguration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AccelerateConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AccessControlPolicy","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AccessControlPolicySerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AccessControlTranslation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AccessControlTranslationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AccountIdSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AllowQuotedRecordDelimiterSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AllowedHeaderSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AllowedHeadersSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AllowedMethodSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AllowedMethodsSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AllowedOriginSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AllowedOriginsSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AnalyticsAndOperator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AnalyticsAndOperatorSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AnalyticsConfiguration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AnalyticsConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AnalyticsExportDestination","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AnalyticsExportDestinationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AnalyticsFilter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AnalyticsFilterSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AnalyticsIdSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AnalyticsS3BucketDestination","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AnalyticsS3BucketDestinationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AnalyticsS3ExportFileFormatSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BodySerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bucket","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BucketAccelerateStatusSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BucketKeyEnabledSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BucketLifecycleConfiguration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BucketLifecycleConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BucketLocationConstraintSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BucketLoggingStatus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BucketLoggingStatusSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BucketLogsPermissionSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BucketNameSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BucketVersioningStatusSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CORSConfiguration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CORSConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CORSRule","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CORSRuleSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CORSRulesSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CSVInput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CSVInputSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CSVOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CSVOutputSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CloudFunctionSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CloudFunctionConfiguration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CloudFunctionConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CloudFunctionInvocationRoleSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CommentsSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CommonPrefix","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompleteMultipartUploadOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompleteMultipartUploadRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompletedMultipartUpload","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompletedMultipartUploadSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompletedPart","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompletedPartSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompletedPartListSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompressionTypeSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Condition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConditionSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ContinuationEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CopyObjectOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CopyObjectRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CopyObjectResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CopyPartResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CreateBucketConfiguration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CreateBucketConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CreateBucketOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CreateBucketRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CreateMultipartUploadOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CreateMultipartUploadRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DateSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DaysSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DaysAfterInitiationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DefaultRetention","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DefaultRetentionSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Delete","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteBucketAnalyticsConfigurationRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteBucketCorsRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteBucketEncryptionRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteBucketIntelligentTieringConfigurationRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteBucketInventoryConfigurationRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteBucketLifecycleRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteBucketMetricsConfigurationRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteBucketOwnershipControlsRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteBucketPolicyRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteBucketReplicationRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteBucketRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteBucketTaggingRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteBucketWebsiteRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteMarkerEntry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteMarkerReplication","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteMarkerReplicationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteMarkerReplicationStatusSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteObjectOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteObjectRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteObjectTaggingOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteObjectTaggingRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteObjectsOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteObjectsRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeletePublicAccessBlockRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeletedObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DelimiterSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DescriptionSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Destination","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DestinationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DisplayNameSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ETagSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EmailAddressSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EnableRequestProgressSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EncodingTypeSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Encryption","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EncryptionSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EncryptionConfiguration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EncryptionConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EndSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EndEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for S3Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorDocument","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorDocumentSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EventSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EventListSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExistingObjectReplication","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExistingObjectReplicationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExistingObjectReplicationStatusSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExpirationStatusSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExpiredObjectDeleteMarkerSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExposeHeaderSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExposeHeadersSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExpressionSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExpressionTypeSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FetchOwnerSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FieldDelimiterSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FileHeaderInfoSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FilterRule","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FilterRuleSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FilterRuleListSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FilterRuleNameSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FilterRuleValueSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketAccelerateConfigurationOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketAccelerateConfigurationRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketAclOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketAclRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketAnalyticsConfigurationOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketAnalyticsConfigurationRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketCorsOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketCorsRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketEncryptionOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketEncryptionRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketIntelligentTieringConfigurationOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketIntelligentTieringConfigurationRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketInventoryConfigurationOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketInventoryConfigurationRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketLifecycleConfigurationOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketLifecycleConfigurationRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketLifecycleOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketLifecycleRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketLocationOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketLocationRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketLoggingOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketLoggingRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketMetricsConfigurationOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketMetricsConfigurationRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketNotificationConfigurationRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketOwnershipControlsOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketOwnershipControlsRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketPolicyOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketPolicyRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketPolicyStatusOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketPolicyStatusRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketReplicationOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketReplicationRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketRequestPaymentOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketRequestPaymentRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketTaggingOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketTaggingRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketVersioningOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketVersioningRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketWebsiteOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketWebsiteRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetObjectAclOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetObjectAclRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetObjectLegalHoldOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetObjectLegalHoldRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetObjectLockConfigurationOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetObjectLockConfigurationRequest","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GetObjectOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetObjectRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetObjectRetentionOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetObjectRetentionRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetObjectTaggingOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetObjectTaggingRequest","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GetObjectTorrentOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetObjectTorrentRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetPublicAccessBlockOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetPublicAccessBlockRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GlacierJobParameters","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GlacierJobParametersSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Grant","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GrantSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Grantee","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GranteeSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GrantsSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HeadBucketRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HeadObjectOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HeadObjectRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HostNameSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HttpErrorCodeReturnedEqualsSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HttpRedirectCodeSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IDSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IndexDocument","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IndexDocumentSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Initiator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InputSerialization","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InputSerializationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntelligentTieringAccessTierSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntelligentTieringAndOperator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntelligentTieringAndOperatorSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntelligentTieringConfiguration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntelligentTieringConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntelligentTieringDaysSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntelligentTieringFilter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntelligentTieringFilterSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntelligentTieringIdSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntelligentTieringStatusSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InventoryConfiguration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InventoryConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InventoryDestination","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InventoryDestinationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InventoryEncryption","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InventoryEncryptionSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InventoryFilter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InventoryFilterSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InventoryFormatSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InventoryFrequencySerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InventoryIdSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InventoryIncludedObjectVersionsSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InventoryOptionalFieldSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InventoryOptionalFieldsSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InventoryS3BucketDestination","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InventoryS3BucketDestinationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InventorySchedule","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InventoryScheduleSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IsEnabledSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for JSONInput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for JSONInputSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for JSONOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for JSONOutputSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for JSONTypeSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KMSContextSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeyMarkerSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeyPrefixEqualsSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LambdaFunctionArnSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LambdaFunctionConfiguration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LambdaFunctionConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LambdaFunctionConfigurationListSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LifecycleConfiguration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LifecycleConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LifecycleExpiration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LifecycleExpirationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LifecycleRule","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LifecycleRuleSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LifecycleRuleAndOperator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LifecycleRuleAndOperatorSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LifecycleRuleFilter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LifecycleRuleFilterSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LifecycleRulesSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListBucketAnalyticsConfigurationsOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListBucketAnalyticsConfigurationsRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListBucketIntelligentTieringConfigurationsOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListBucketIntelligentTieringConfigurationsRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListBucketInventoryConfigurationsOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListBucketInventoryConfigurationsRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListBucketMetricsConfigurationsOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListBucketMetricsConfigurationsRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListBucketsOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListMultipartUploadsOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListMultipartUploadsRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListObjectVersionsOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListObjectVersionsRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListObjectsOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListObjectsRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListObjectsV2Output","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListObjectsV2Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListPartsOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListPartsRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LocationPrefixSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LoggingEnabled","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LoggingEnabledSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MFADeleteSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MarkerSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MaxAgeSecondsSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MaxKeysSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MaxPartsSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MaxUploadsSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MetadataEntry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MetadataEntrySerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MetadataKeySerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MetadataValueSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Metrics","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MetricsSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MetricsAndOperator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MetricsAndOperatorSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MetricsConfiguration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MetricsConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MetricsFilter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MetricsFilterSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MetricsIdSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MetricsStatusSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MinutesSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MultipartUpload","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MultipartUploadIdSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NoncurrentVersionExpiration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NoncurrentVersionExpirationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NoncurrentVersionTransition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NoncurrentVersionTransitionSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NoncurrentVersionTransitionListSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NotificationConfiguration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NotificationConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NotificationConfigurationDeprecated","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NotificationConfigurationDeprecatedSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NotificationConfigurationFilter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NotificationConfigurationFilterSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NotificationIdSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Object","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ObjectCannedACLSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ObjectIdentifier","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ObjectIdentifierSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ObjectIdentifierListSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ObjectKeySerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ObjectLockConfiguration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ObjectLockConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ObjectLockEnabledSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ObjectLockLegalHold","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ObjectLockLegalHoldSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ObjectLockLegalHoldStatusSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ObjectLockRetention","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ObjectLockRetentionSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ObjectLockRetentionModeSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ObjectLockRule","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ObjectLockRuleSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ObjectOwnershipSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ObjectVersion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ObjectVersionIdSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OutputLocation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OutputLocationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OutputSerialization","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OutputSerializationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Owner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OwnerSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OwnerOverrideSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OwnershipControls","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OwnershipControlsSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OwnershipControlsRule","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OwnershipControlsRuleSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OwnershipControlsRulesSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParquetInput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParquetInputSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Part","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PartNumberSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PartNumberMarkerSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PayerSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PermissionSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PolicyStatus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PrefixSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PrioritySerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Progress","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProgressEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProtocolSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PublicAccessBlockConfiguration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PublicAccessBlockConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketAccelerateConfigurationRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketAclRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketAnalyticsConfigurationRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketCorsRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketEncryptionRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketIntelligentTieringConfigurationRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketInventoryConfigurationRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketLifecycleConfigurationRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketLifecycleRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketLoggingRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketMetricsConfigurationRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketNotificationConfigurationRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketNotificationRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketOwnershipControlsRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketPolicyRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketReplicationRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketRequestPaymentRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketTaggingRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketVersioningRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketWebsiteRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutObjectAclOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutObjectAclRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutObjectLegalHoldOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutObjectLegalHoldRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutObjectLockConfigurationOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutObjectLockConfigurationRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutObjectOutput","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PutObjectRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutObjectRetentionOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutObjectRetentionRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutObjectTaggingOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutObjectTaggingRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutPublicAccessBlockRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QueueArnSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QueueConfiguration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QueueConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QueueConfigurationDeprecated","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QueueConfigurationDeprecatedSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QueueConfigurationListSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QuietSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QuoteCharacterSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QuoteEscapeCharacterSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QuoteFieldsSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RecordDelimiterSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RecordsEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Redirect","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RedirectSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RedirectAllRequestsTo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RedirectAllRequestsToSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReplaceKeyPrefixWithSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReplaceKeyWithSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReplicaKmsKeyIDSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReplicaModifications","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReplicaModificationsSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReplicaModificationsStatusSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReplicationConfiguration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReplicationConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReplicationRule","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReplicationRuleSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReplicationRuleAndOperator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReplicationRuleAndOperatorSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReplicationRuleFilter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReplicationRuleFilterSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReplicationRuleStatusSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReplicationRulesSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReplicationTime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReplicationTimeSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReplicationTimeStatusSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReplicationTimeValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReplicationTimeValueSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RequestPaymentConfiguration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RequestPaymentConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RequestProgress","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RequestProgressSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResponseCacheControlSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResponseContentDispositionSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResponseContentEncodingSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResponseContentLanguageSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResponseContentTypeSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResponseExpiresSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RestoreObjectOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RestoreObjectRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RestoreRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RestoreRequestSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RestoreRequestTypeSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RoleSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RoutingRule","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RoutingRuleSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RoutingRulesSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rule","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RuleSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RulesSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for S3KeyFilter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for S3KeyFilterSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for S3Location","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for S3LocationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SSEKMS","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SSEKMSSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SSEKMSKeyIdSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SSES3","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SSES3Serializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ScanRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ScanRangeSerializer","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SelectObjectContentOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SelectObjectContentRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SelectObjectContentRequestSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SelectParameters","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SelectParametersSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ServerSideEncryptionSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ServerSideEncryptionByDefault","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ServerSideEncryptionByDefaultSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ServerSideEncryptionConfiguration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ServerSideEncryptionConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ServerSideEncryptionRule","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ServerSideEncryptionRuleSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ServerSideEncryptionRulesSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SettingSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SourceSelectionCriteria","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SourceSelectionCriteriaSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SseKmsEncryptedObjects","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SseKmsEncryptedObjectsSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SseKmsEncryptedObjectsStatusSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StartSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StartAfterSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Stats","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StatsEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StorageClassSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StorageClassAnalysis","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StorageClassAnalysisSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StorageClassAnalysisDataExport","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StorageClassAnalysisDataExportSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StorageClassAnalysisSchemaVersionSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SuffixSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Tag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TagSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TagSetSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Tagging","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TaggingSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TargetBucketSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TargetGrant","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TargetGrantSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TargetGrantsSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TargetPrefixSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TierSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Tiering","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TieringSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TieringListSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TokenSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TopicArnSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TopicConfiguration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TopicConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TopicConfigurationDeprecated","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TopicConfigurationDeprecatedSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TopicConfigurationListSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Transition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TransitionSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TransitionListSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TransitionStorageClassSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for URISerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UploadIdMarkerSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UploadPartCopyOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UploadPartCopyRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UploadPartOutput","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UploadPartRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UserMetadataSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ValueSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VersionIdMarkerSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VersioningConfiguration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VersioningConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WebsiteConfiguration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WebsiteConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for YearsSerializer","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for S3Client","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SelectObjectContentEventStreamItem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AbortMultipartUploadError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompleteMultipartUploadError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CopyObjectError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CreateBucketError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CreateMultipartUploadError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteBucketError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteBucketAnalyticsConfigurationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteBucketCorsError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteBucketEncryptionError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteBucketIntelligentTieringConfigurationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteBucketInventoryConfigurationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteBucketLifecycleError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteBucketMetricsConfigurationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteBucketOwnershipControlsError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteBucketPolicyError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteBucketReplicationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteBucketTaggingError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteBucketWebsiteError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteObjectError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteObjectTaggingError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteObjectsError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeletePublicAccessBlockError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketAccelerateConfigurationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketAclError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketAnalyticsConfigurationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketCorsError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketEncryptionError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketIntelligentTieringConfigurationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketInventoryConfigurationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketLifecycleError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketLifecycleConfigurationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketLocationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketLoggingError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketMetricsConfigurationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketNotificationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketNotificationConfigurationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketOwnershipControlsError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketPolicyError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketPolicyStatusError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketReplicationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketRequestPaymentError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketTaggingError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketVersioningError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketWebsiteError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetObjectError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetObjectAclError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetObjectLegalHoldError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetObjectLockConfigurationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetObjectRetentionError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetObjectTaggingError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetObjectTorrentError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetPublicAccessBlockError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HeadBucketError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HeadObjectError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListBucketAnalyticsConfigurationsError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListBucketIntelligentTieringConfigurationsError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListBucketInventoryConfigurationsError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListBucketMetricsConfigurationsError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListBucketsError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListMultipartUploadsError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListObjectVersionsError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListObjectsError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListObjectsV2Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListPartsError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketAccelerateConfigurationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketAclError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketAnalyticsConfigurationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketCorsError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketEncryptionError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketIntelligentTieringConfigurationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketInventoryConfigurationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketLifecycleError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketLifecycleConfigurationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketLoggingError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketMetricsConfigurationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketNotificationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketNotificationConfigurationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketOwnershipControlsError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketPolicyError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketReplicationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketRequestPaymentError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketTaggingError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketVersioningError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketWebsiteError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutObjectError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutObjectAclError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutObjectLegalHoldError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutObjectLockConfigurationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutObjectRetentionError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutObjectTaggingError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutPublicAccessBlockError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RestoreObjectError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SelectObjectContentError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UploadPartError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UploadPartCopyError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PreSignedRequestOption","synthetic":true,"types":[]}];
implementors["rusoto_signature"] = [{"text":"impl RefUnwindSafe for ParseRegionError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Region","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SignedRequest","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SignedRequestPayload","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ByteStream","synthetic":true,"types":[]}];
implementors["scheduled_thread_pool"] = [{"text":"impl RefUnwindSafe for JobHandle","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ScheduledThreadPool","synthetic":true,"types":[]}];
implementors["serde"] = [{"text":"impl RefUnwindSafe for IgnoredAny","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Unexpected&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for UnitDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for BoolDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for IsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for UsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for F32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for F64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for CharDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; RefUnwindSafe for StrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; RefUnwindSafe for BorrowedStrDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for StringDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; RefUnwindSafe for CowStrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; RefUnwindSafe for BorrowedBytesDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; RefUnwindSafe for SeqDeserializer&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for SeqAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, I, E&gt; RefUnwindSafe for MapDeserializer&lt;'de, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as Iterator&gt;::Item as Pair&gt;::Second: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for MapAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Ok, Error&gt; RefUnwindSafe for Impossible&lt;Ok, Error&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Error: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["serde_json"] = [{"text":"impl&lt;R&gt; RefUnwindSafe for Deserializer&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, R, T&gt; RefUnwindSafe for StreamDeserializer&lt;'de, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;W, F&gt; RefUnwindSafe for Serializer&lt;W, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; RefUnwindSafe for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Number","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Value","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SliceRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for StrRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for IoRead&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Category","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for VacantEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for OccupiedEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Keys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ValuesMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Entry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompactFormatter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for PrettyFormatter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CharEscape","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Serializer","synthetic":true,"types":[]}];
implementors["sha2"] = [{"text":"impl RefUnwindSafe for Sha224","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sha256","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sha384","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sha512","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sha512Trunc224","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sha512Trunc256","synthetic":true,"types":[]}];
implementors["shlex"] = [{"text":"impl&lt;'a&gt; RefUnwindSafe for Shlex&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["signal_hook_registry"] = [{"text":"impl RefUnwindSafe for SigId","synthetic":true,"types":[]}];
implementors["slab"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for Slab&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for VacantEntry&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["socket2"] = [{"text":"impl RefUnwindSafe for SockAddr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Socket","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Domain","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Protocol","synthetic":true,"types":[]}];
implementors["stringprep"] = [{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CaseFoldForNfkc","synthetic":true,"types":[]}];
implementors["strum"] = [{"text":"impl RefUnwindSafe for ParseError","synthetic":true,"types":[]}];
implementors["syn"] = [{"text":"impl RefUnwindSafe for Attribute","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MetaList","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MetaNameValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Field","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FieldsNamed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FieldsUnnamed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Variant","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VisCrate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VisPublic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VisRestricted","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Arm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FieldValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Label","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MethodTurbofish","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprArray","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprAssign","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprAssignOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprAsync","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprAwait","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprBinary","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprBlock","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprBox","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprBreak","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprCall","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprCast","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprClosure","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprContinue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprField","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprForLoop","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprGroup","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprIf","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprLet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprLit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprLoop","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprMatch","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprMethodCall","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprParen","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprPath","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprReference","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprRepeat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprReturn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprTry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprTryBlock","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprTuple","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprUnary","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprUnsafe","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprWhile","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprYield","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Index","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BoundLifetimes","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConstParam","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Generics","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LifetimeDef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PredicateEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PredicateLifetime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PredicateType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitBound","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeParam","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WhereClause","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ImplGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Turbofish&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for TypeGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForeignItemFn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForeignItemMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForeignItemStatic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForeignItemType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImplItemConst","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImplItemMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImplItemMethod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImplItemType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemConst","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemEnum","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemExternCrate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemFn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemForeignMod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemImpl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemMacro2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemMod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemStatic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemTrait","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemTraitAlias","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemUnion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemUse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Receiver","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Signature","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitItemConst","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitItemMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitItemMethod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitItemType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UseGlob","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UseGroup","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UseName","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UsePath","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UseRename","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for File","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Lifetime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitBool","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitByte","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitByteStr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitChar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitFloat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitInt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitStr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Macro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DataEnum","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DataStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DataUnion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeriveInput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Block","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Local","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Abi","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BareFnArg","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeArray","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeBareFn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeGroup","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeImplTrait","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeInfer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeNever","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeParen","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypePath","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypePtr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeReference","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeSlice","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeTraitObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeTuple","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Variadic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FieldPat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatBox","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatIdent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatLit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatOr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatPath","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatReference","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatRest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatSlice","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatTuple","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatTupleStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatWild","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AngleBracketedGenericArguments","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Binding","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Constraint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParenthesizedGenericArguments","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Path","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PathSegment","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QSelf","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AttrStyle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Meta","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NestedMeta","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Fields","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Visibility","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenericMethodArgument","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RangeLimits","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Expr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Member","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenericParam","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitBoundModifier","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeParamBound","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WherePredicate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FnArg","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForeignItem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImplItem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Item","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitItem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UseTree","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Lit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StrStyle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MacroDelimiter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Data","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BinOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Stmt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReturnType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenericArgument","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PathArguments","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Underscore","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Abstract","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for As","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Async","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Auto","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Await","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Become","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Box","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Break","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Const","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Continue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Crate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Default","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Do","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dyn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Else","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Enum","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Extern","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Final","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Fn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for For","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for If","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Impl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for In","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Let","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Loop","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Macro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Match","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Move","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mut","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Override","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Priv","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pub","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ref","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Return","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SelfType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SelfValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Static","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Struct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Super","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Trait","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Try","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Typeof","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Union","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Unsafe","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Unsized","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Use","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Virtual","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Where","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for While","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Yield","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Add","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AddEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for And","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AndAnd","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AndEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for At","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bang","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Caret","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CaretEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Colon","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Colon2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Comma","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Div","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DivEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dollar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dot","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dot2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dot3","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DotDotEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Eq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EqEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ge","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Gt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Le","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Lt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MulEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ne","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Or","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OrEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OrOr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pound","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Question","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RArrow","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LArrow","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RemEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FatArrow","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Semi","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Shl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ShlEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Shr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ShrEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Star","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sub","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SubEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Tilde","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Brace","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bracket","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Paren","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TokenBuffer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Cursor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; RefUnwindSafe for Punctuated&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; RefUnwindSafe for Pairs&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; RefUnwindSafe for PairsMut&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; RefUnwindSafe for IntoPairs&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; RefUnwindSafe for Pair&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Lookahead1&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for ParseBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'a&gt; RefUnwindSafe for StepCursor&lt;'c, 'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Nothing","synthetic":true,"types":[]}];
implementors["synstructure"] = [{"text":"impl&lt;'a&gt; RefUnwindSafe for BindingInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for VariantAst&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for VariantInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Structure&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AddBounds","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BindStyle","synthetic":true,"types":[]}];
implementors["termcolor"] = [{"text":"impl RefUnwindSafe for StandardStream","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for StandardStreamLock&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BufferedStandardStream","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BufferWriter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Buffer","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for NoColor&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for Ansi&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ColorSpec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseColorError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ColorChoice","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Color","synthetic":true,"types":[]}];
implementors["thread_local"] = [{"text":"impl&lt;T&gt; !RefUnwindSafe for CachedIntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for CachedIterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for CachedThreadLocal&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for ThreadLocal&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for IntoIter&lt;T&gt;","synthetic":true,"types":[]}];
implementors["time"] = [{"text":"impl RefUnwindSafe for Date","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Duration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instant","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OffsetDateTime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PrimitiveDateTime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Time","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UtcOffset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Format","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sign","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Weekday","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConversionRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ComponentRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IndeterminateOffset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Format","synthetic":true,"types":[]}];
implementors["tokio"] = [{"text":"impl&lt;'a&gt; RefUnwindSafe for ReadBuf&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Interest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ready","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for ReadHalf&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for WriteHalf&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for BufReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;RW&gt; RefUnwindSafe for BufStream&lt;RW&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;RW: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for BufWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DuplexStream","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Empty","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Lines&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Repeat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sink","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Split&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Take&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for AsyncFd&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for AsyncFdReadyGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for AsyncFdReadyMutGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TryIoError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TcpListener","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TcpSocket","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TcpStream","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UdpSocket","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UnixDatagram","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UnixListener","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UnixStream","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for ReadHalf&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for WriteHalf&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OwnedReadHalf","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OwnedWriteHalf","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ReuniteError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for ReadHalf&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for WriteHalf&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OwnedReadHalf","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OwnedWriteHalf","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ReuniteError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SocketAddr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UCred","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Command","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Child","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ChildStdin","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ChildStdout","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ChildStderr","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for EnterGuard&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Handle","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Runtime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for JoinError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for JoinHandle&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Barrier","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BarrierWaitResult","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Mutex&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for MutexGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TryLockError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for OwnedMutexGuard&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Notify","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AcquireError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Semaphore","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for SemaphorePermit&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OwnedSemaphorePermit","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for RwLock&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for RwLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for RwLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TryAcquireError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RecvError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for Permit&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for UnboundedReceiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for UnboundedSender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SendTimeoutError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RecvError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Ref&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RecvError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LocalSet","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for LocalKey&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Sleep","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instant","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Interval","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Timeout&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Elapsed","synthetic":true,"types":[]}];
implementors["tokio_native_tls"] = [{"text":"impl&lt;S&gt; RefUnwindSafe for AllowStd&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for TlsStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TlsConnector","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TlsAcceptor","synthetic":true,"types":[]}];
implementors["tokio_postgres"] = [{"text":"impl RefUnwindSafe for CancelToken","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Client","synthetic":true,"types":[]},{"text":"impl&lt;S, T&gt; !RefUnwindSafe for Connection&lt;S, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for CopyInSink&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CopyOutStream","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Portal","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RowStream","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SimpleQueryStream","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Socket","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Column","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Statement","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Transaction&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for TransactionBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Notification","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IsolationLevel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AsyncMessage","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SimpleQueryMessage","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for BinaryCopyInWriter","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for BinaryCopyOutStream","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BinaryCopyOutRow","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TargetSessionAttrs","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChannelBinding","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Host","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SqlState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DbError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Severity","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorPosition","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Row","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SimpleQueryRow","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChannelBinding","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NoTls","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NoTlsFuture","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NoTlsError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NoTlsStream","synthetic":true,"types":[]}];
implementors["tokio_stream"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for Empty&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Iter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Once&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Pending&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; RefUnwindSafe for StreamMap&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for ReceiverStream&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for UnboundedReceiverStream&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for IntervalStream","synthetic":true,"types":[]}];
implementors["tokio_util"] = [{"text":"impl RefUnwindSafe for BytesCodec","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; RefUnwindSafe for Framed&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; RefUnwindSafe for FramedParts&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, D&gt; RefUnwindSafe for FramedRead&lt;T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; RefUnwindSafe for FramedWrite&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LinesCodec","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LinesCodecError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LengthDelimitedCodecError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LengthDelimitedCodec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CancellationToken","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for WaitForCancellationFuture&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;L, R&gt; RefUnwindSafe for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["tracing"] = [{"text":"impl !RefUnwindSafe for Span","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for WithDispatch&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Instrumented&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Entered&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["tracing_core"] = [{"text":"impl !RefUnwindSafe for Dispatch","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Event&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Field","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Level","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LevelFilter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Metadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Identifier","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DefaultGuard","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetGlobalDefaultError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Empty","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for FieldSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for ValueSet&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Iter","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for DisplayValue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for DebugValue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Kind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseLevelFilterError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseLevelError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Id","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Attributes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Current","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Interest","synthetic":true,"types":[]}];
implementors["unicode_bidi"] = [{"text":"impl RefUnwindSafe for ParagraphInfo","synthetic":true,"types":[]},{"text":"impl&lt;'text&gt; RefUnwindSafe for InitialInfo&lt;'text&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'text&gt; RefUnwindSafe for BidiInfo&lt;'text&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BidiClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Level","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["unicode_normalization"] = [{"text":"impl&lt;I&gt; RefUnwindSafe for Decompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Recompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for StreamSafe&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IsNormalized","synthetic":true,"types":[]}];
implementors["want"] = [{"text":"impl !RefUnwindSafe for Giver","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Taker","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SharedGiver","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Closed","synthetic":true,"types":[]}];
implementors["xml"] = [{"text":"impl RefUnwindSafe for ParserConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EmitterConfig","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Name&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; RefUnwindSafe for ReprDisplay&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OwnedName","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Attribute&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OwnedAttribute","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TextPosition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XmlVersion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Namespace","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NamespaceStack","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for NamespaceStackMappings&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for CheckedTarget&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !RefUnwindSafe for EventReader&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !RefUnwindSafe for Events&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XmlEvent","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for EventWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for EmitterError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for EndElementBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for StartElementBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for XmlEvent&lt;'a&gt;","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()