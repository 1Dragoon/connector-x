(function() {var implementors = {};
implementors["aho_corasick"] = [{"text":"impl&lt;S&gt; UnwindSafe for AhoCorasick&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AhoCorasickBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; UnwindSafe for FindIter&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; UnwindSafe for FindOverlappingIter&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, S&gt; UnwindSafe for StreamFindIter&lt;'a, R, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Match","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MatchKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl&lt;'s, 'h&gt; UnwindSafe for FindIter&lt;'s, 'h&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Searcher","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MatchKind","synthetic":true,"types":[]}];
implementors["anyhow"] = [{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Chain&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["arrayvec"] = [{"text":"impl&lt;A&gt; UnwindSafe for ArrayString&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for CapacityError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for ArrayVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; UnwindSafe for Drain&lt;'a, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["arrow"] = [{"text":"impl UnwindSafe for ArrayData","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ArrayDataBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DecimalArray","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FixedSizeBinaryArray","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BooleanArray","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; !UnwindSafe for DictionaryArray&lt;K&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for FixedSizeListArray","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for PrimitiveArray&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as ArrowPrimitiveType&gt;::Native: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for StructArray","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for UnionArray","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NullArray","synthetic":true,"types":[]},{"text":"impl&lt;OffsetSize&gt; UnwindSafe for GenericBinaryArray&lt;OffsetSize&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;OffsetSize: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;OffsetSize&gt; !UnwindSafe for GenericListArray&lt;OffsetSize&gt;","synthetic":true,"types":[]},{"text":"impl&lt;OffsetSize&gt; UnwindSafe for GenericStringArray&lt;OffsetSize&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;OffsetSize: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BooleanBufferBuilder","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for BufferBuilder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BooleanBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DecimalBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FixedSizeBinaryBuilder","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for FixedSizeListBuilder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for PrimitiveBuilder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as ArrowPrimitiveType&gt;::Native: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; UnwindSafe for PrimitiveDictionaryBuilder&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;K as ArrowPrimitiveType&gt;::Native: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;V as ArrowPrimitiveType&gt;::Native: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; UnwindSafe for StringDictionaryBuilder&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;K as ArrowPrimitiveType&gt;::Native: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for StructBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnionBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for MutableArrayData&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for PrimitiveIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as ArrowPrimitiveType&gt;::Native: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for BooleanIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for GenericStringIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for GenericBinaryIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bitmap","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Buffer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MutableBuffer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bytes","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Deallocation","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SortOptions","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for SortColumn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TakeOptions","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Reader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReaderBuilder","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for Writer&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WriterBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Field","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BooleanType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Int8Type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Int16Type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Int32Type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Int64Type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UInt8Type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UInt16Type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UInt32Type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UInt64Type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Float32Type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Float64Type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TimestampSecondType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TimestampMillisecondType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TimestampMicrosecondType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TimestampNanosecondType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Date32Type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Date64Type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Time32SecondType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Time32MillisecondType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Time64MicrosecondType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Time64NanosecondType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IntervalYearMonthType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IntervalDayTimeType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DurationSecondType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DurationMillisecondType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DurationMicrosecondType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DurationNanosecondType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Schema","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DateUnit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TimeUnit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IntervalUnit","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ArrowError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FFI_ArrowSchema","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FFI_ArrowArray","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ArrowArray","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !UnwindSafe for FileReader&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !UnwindSafe for StreamReader&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IpcWriteOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IpcDataGenerator","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for DictionaryTracker","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; !UnwindSafe for FileWriter&lt;W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; !UnwindSafe for StreamWriter&lt;W&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EncodedData","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Block","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Footer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for FooterArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !UnwindSafe for FooterBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FooterOffset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompressionType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BodyCompressionMethod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MessageHeader","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MessageHeaderUnionTableOffset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FieldNode","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for BodyCompression&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BodyCompressionArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !UnwindSafe for BodyCompressionBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for RecordBatch&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for RecordBatchArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !UnwindSafe for RecordBatchBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for DictionaryBatch&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for DictionaryBatchArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !UnwindSafe for DictionaryBatchBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Message&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for MessageArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !UnwindSafe for MessageBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BodyCompressionOffset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RecordBatchOffset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DictionaryBatchOffset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MessageOffset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetadataVersion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Feature","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnionMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Precision","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DateUnit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TimeUnit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IntervalUnit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeUnionTableOffset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DictionaryKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Endianness","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Buffer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Null&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NullArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !UnwindSafe for NullBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Struct_&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Struct_Args","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !UnwindSafe for Struct_Builder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for List&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !UnwindSafe for ListBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for LargeList&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LargeListArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !UnwindSafe for LargeListBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for FixedSizeList&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FixedSizeListArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !UnwindSafe for FixedSizeListBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Map&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MapArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !UnwindSafe for MapBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Union&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for UnionArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !UnwindSafe for UnionBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Int&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IntArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !UnwindSafe for IntBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for FloatingPoint&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FloatingPointArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !UnwindSafe for FloatingPointBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Utf8&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Utf8Args","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !UnwindSafe for Utf8Builder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Binary&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BinaryArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !UnwindSafe for BinaryBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for LargeUtf8&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LargeUtf8Args","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !UnwindSafe for LargeUtf8Builder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for LargeBinary&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LargeBinaryArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !UnwindSafe for LargeBinaryBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for FixedSizeBinary&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FixedSizeBinaryArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !UnwindSafe for FixedSizeBinaryBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Bool&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BoolArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !UnwindSafe for BoolBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Decimal&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DecimalArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !UnwindSafe for DecimalBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Date&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DateArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !UnwindSafe for DateBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Time&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TimeArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !UnwindSafe for TimeBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Timestamp&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for TimestampArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !UnwindSafe for TimestampBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Interval&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IntervalArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !UnwindSafe for IntervalBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Duration&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DurationArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !UnwindSafe for DurationBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for KeyValue&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for KeyValueArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !UnwindSafe for KeyValueBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for DictionaryEncoding&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for DictionaryEncodingArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !UnwindSafe for DictionaryEncodingBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Field&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for FieldArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !UnwindSafe for FieldBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Schema&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SchemaArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !UnwindSafe for SchemaBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NullOffset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Struct_Offset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListOffset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LargeListOffset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FixedSizeListOffset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MapOffset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnionOffset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IntOffset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FloatingPointOffset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Utf8Offset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BinaryOffset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LargeUtf8Offset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LargeBinaryOffset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FixedSizeBinaryOffset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BoolOffset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DecimalOffset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DateOffset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TimeOffset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TimestampOffset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IntervalOffset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DurationOffset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeyValueOffset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DictionaryEncodingOffset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FieldOffset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SchemaOffset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SparseMatrixCompressedAxis","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SparseTensorIndex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SparseTensorIndexUnionTableOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SparseTensorIndexCOO&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SparseTensorIndexCOOArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !UnwindSafe for SparseTensorIndexCOOBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SparseMatrixIndexCSX&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SparseMatrixIndexCSXArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !UnwindSafe for SparseMatrixIndexCSXBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SparseTensorIndexCSF&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SparseTensorIndexCSFArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !UnwindSafe for SparseTensorIndexCSFBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SparseTensor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SparseTensorArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !UnwindSafe for SparseTensorBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SparseTensorIndexCOOOffset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SparseMatrixIndexCSXOffset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SparseTensorIndexCSFOffset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SparseTensorOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for TensorDim&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for TensorDimArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !UnwindSafe for TensorDimBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Tensor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for TensorArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !UnwindSafe for TensorBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TensorDimOffset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TensorOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !UnwindSafe for ValueIter&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Decoder","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Reader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReaderBuilder","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for RecordBatch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RecordBatchOptions","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Tensor&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for BitChunks&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for BitChunkIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ArrowJson","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ArrowJsonSchema","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ArrowJsonField","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ArrowJsonFieldDictionary","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DictionaryIndexType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ArrowJsonBatch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ArrowJsonDictionaryBatch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ArrowJsonColumn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StringWriter","synthetic":true,"types":[]}];
implementors["backtrace"] = [{"text":"impl UnwindSafe for Frame","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Symbol","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SymbolName&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !UnwindSafe for BacktraceFmt&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'fmt, 'a, 'b&gt; !UnwindSafe for BacktraceFrameFmt&lt;'fmt, 'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Backtrace","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BacktraceFrame","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BacktraceSymbol","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for BytesOrWideString&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PrintFmt","synthetic":true,"types":[]}];
implementors["base64"] = [{"text":"impl UnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DecodeError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CharacterSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Base64Display&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !UnwindSafe for DecoderReader&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for EncoderWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for EncoderStringWriter&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["bstr"] = [{"text":"impl UnwindSafe for BStr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BString","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Bytes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Fields&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, F&gt; UnwindSafe for FieldsWith&lt;'a, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Find&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for FindReverse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Finder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for FinderReverse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Lines&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for LinesWithTerminator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Split&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SplitN&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SplitNReverse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SplitReverse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for DrainBytes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FromUtf8Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for GraphemeIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Graphemes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SentenceIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Sentences&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for WordIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Words&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for WordsWithBreakIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for WordsWithBreaks&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for CharIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Chars&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Utf8Chunk&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Utf8Chunks&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Utf8Error","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for ByteLines&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for ByteRecords&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["byteorder"] = [{"text":"impl UnwindSafe for BigEndian","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LittleEndian","synthetic":true,"types":[]}];
implementors["bytes"] = [{"text":"impl UnwindSafe for Bytes","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BytesMut","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; UnwindSafe for Chain&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Limit&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Take&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UninitSlice","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for Reader&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for Writer&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["chrono"] = [{"text":"impl&lt;Tz&gt; UnwindSafe for Date&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Tz&gt; UnwindSafe for DateTime&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseWeekdayError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseMonthError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SecondsFormat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RoundingError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Weekday","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Month","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FixedOffset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Local","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Utc","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for LocalResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NaiveDate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NaiveDateTime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IsoWeek","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NaiveTime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Parsed","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InternalNumeric","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InternalFixed","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseError","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for DelayedFormat&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pad","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Numeric","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Fixed","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Item&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for StrftimeItems&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["connector_agent"] = [{"text":"impl&lt;S, P, TS&gt; UnwindSafe for Worker&lt;S, P, TS&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TS: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConnectorAgentError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U64CounterSource","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StringSource","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BoolCounterSource","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CSVSource","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U64Writer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for U64PartitionWriter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StringWriter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BoolWriter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for StringPartitionWriter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for BoolPartitionWriter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for MemoryWriter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for MemoryPartitionWriter&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["crc32fast"] = [{"text":"impl UnwindSafe for Hasher","synthetic":true,"types":[]}];
implementors["crossbeam_channel"] = [{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for TryIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Select&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SelectedOperation&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReadyTimeoutError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SelectTimeoutError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TryReadyError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TrySelectError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RecvTimeoutError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SendTimeoutError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Sender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Receiver&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_deque"] = [{"text":"impl&lt;T&gt; !UnwindSafe for Injector&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Stealer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Worker&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Steal&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["crossbeam_epoch"] = [{"text":"impl&lt;T:&nbsp;?Sized&gt; UnwindSafe for Atomic&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'g, T:&nbsp;?Sized, P&gt; UnwindSafe for CompareAndSetError&lt;'g, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; UnwindSafe for Owned&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'g, T:&nbsp;?Sized&gt; UnwindSafe for Shared&lt;'g, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Collector","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for LocalHandle","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Guard","synthetic":true,"types":[]}];
implementors["crossbeam_utils"] = [{"text":"impl&lt;T&gt; UnwindSafe for CachePadded&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Backoff","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Parker","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Unparker","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; UnwindSafe for ShardedLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; UnwindSafe for ShardedLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for WaitGroup","synthetic":true,"types":[]},{"text":"impl&lt;'env&gt; !UnwindSafe for Scope&lt;'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope, 'env&gt; !UnwindSafe for ScopedThreadBuilder&lt;'scope, 'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope, T&gt; UnwindSafe for ScopedJoinHandle&lt;'scope, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for AtomicCell&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; UnwindSafe for ShardedLock&lt;T&gt;","synthetic":false,"types":[]}];
implementors["csv"] = [{"text":"impl UnwindSafe for ByteRecord","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; UnwindSafe for ByteRecordIter&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Position","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeserializeError","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FromUtf8Error","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; !UnwindSafe for IntoInnerError&lt;W&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Utf8Error","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for ByteRecordsIntoIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'r, R&gt; !UnwindSafe for ByteRecordsIter&lt;'r, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R, D&gt; UnwindSafe for DeserializeRecordsIntoIter&lt;R, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'r, R, D&gt; !UnwindSafe for DeserializeRecordsIter&lt;'r, R, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Reader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReaderBuilder","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for StringRecordsIntoIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'r, R&gt; !UnwindSafe for StringRecordsIter&lt;'r, R&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StringRecord","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; UnwindSafe for StringRecordIter&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for Writer&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WriterBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeserializeErrorKind","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QuoteStyle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Terminator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Trim","synthetic":true,"types":[]}];
implementors["csv_core"] = [{"text":"impl UnwindSafe for Reader","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReaderBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Writer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WriterBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReadFieldNoCopyResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReadFieldResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReadRecordNoCopyResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReadRecordResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WriteResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Terminator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QuoteStyle","synthetic":true,"types":[]}];
implementors["digest"] = [{"text":"impl UnwindSafe for InvalidOutputSize","synthetic":true,"types":[]}];
implementors["env_logger"] = [{"text":"impl&lt;'a&gt; UnwindSafe for Env&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Logger","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Target","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WriteStyle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Filter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Timestamp","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Style","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for StyledValue&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Formatter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Color","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TimestampPrecision","synthetic":true,"types":[]}];
implementors["failure"] = [{"text":"impl UnwindSafe for Backtrace","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for Compat&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; !UnwindSafe for Context&lt;D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SyncFailure&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'f&gt; !UnwindSafe for Causes&lt;'f&gt;","synthetic":true,"types":[]}];
implementors["fallible_iterator"] = [{"text":"impl&lt;T, F&gt; UnwindSafe for Map&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; UnwindSafe for Chain&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Cloned&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Convert&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Enumerate&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for Filter&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for FilterMap&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; UnwindSafe for FlatMap&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as IntoFallibleIterator&gt;::IntoFallibleIter: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Flatten&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as FallibleIterator&gt;::Item as IntoFallibleIterator&gt;::IntoFallibleIter: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Fuse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for Inspect&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Iterator&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for MapErr&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Peekable&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as FallibleIterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Rev&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, St, F&gt; UnwindSafe for Scan&lt;I, St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Skip&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; UnwindSafe for SkipWhile&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for StepBy&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Take&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; UnwindSafe for TakeWhile&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Cycle&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; UnwindSafe for Zip&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["flatbuffers"] = [{"text":"impl&lt;'fbb&gt; UnwindSafe for FlatBufferBuilder&lt;'fbb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for FollowStart&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TableFinishedWIPOffset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TableUnfinishedWIPOffset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnionWIPOffset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VTableWIPOffset","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for WIPOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for ForwardsUOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for ForwardsVOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for BackwardsSOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SkipSizePrefix&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SkipRootOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FileIdentifier","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SkipFileIdentifier&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Table&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Vector&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for VectorIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'opts, 'buf&gt; UnwindSafe for Verifier&lt;'opts, 'buf&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VerifierOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorTraceDetail","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InvalidFlatbuffer","synthetic":true,"types":[]}];
implementors["flate2"] = [{"text":"impl UnwindSafe for Crc","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for CrcReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for CrcWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GzBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GzHeader","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Compress","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompressError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Decompress","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DecompressError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Compression","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Status","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FlushCompress","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FlushDecompress","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for DeflateEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for DeflateDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for DeflateEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for DeflateDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for DeflateEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for DeflateDecoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for GzEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !UnwindSafe for GzDecoder&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !UnwindSafe for MultiGzDecoder&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for GzEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !UnwindSafe for GzDecoder&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !UnwindSafe for MultiGzDecoder&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for GzEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for GzDecoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for ZlibEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for ZlibDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for ZlibEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for ZlibDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for ZlibEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for ZlibDecoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["fnv"] = [{"text":"impl UnwindSafe for FnvHasher","synthetic":true,"types":[]}];
implementors["futures_channel"] = [{"text":"impl&lt;T&gt; !UnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for UnboundedSender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for UnboundedReceiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SendError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Cancellation&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Canceled","synthetic":true,"types":[]}];
implementors["futures_executor"] = [{"text":"impl&lt;S&gt; UnwindSafe for BlockingStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for LocalPool","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for LocalSpawner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Enter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EnterError","synthetic":true,"types":[]}];
implementors["futures_task"] = [{"text":"impl UnwindSafe for SpawnError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for WakerRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for FutureObj&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for LocalFutureObj&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["futures_util"] = [{"text":"impl&lt;F&gt; UnwindSafe for Flatten&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Output: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; UnwindSafe for Fuse&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; UnwindSafe for Inspect&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for IntoStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; UnwindSafe for Map&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; UnwindSafe for NeverError&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; UnwindSafe for Then&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; UnwindSafe for UnitError&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, T&gt; UnwindSafe for MapInto&lt;Fut, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for FlattenStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Output: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; UnwindSafe for CatchUnwind&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; !UnwindSafe for Remote&lt;Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for RemoteHandle&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; !UnwindSafe for Shared&lt;Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; !UnwindSafe for WeakShared&lt;Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; UnwindSafe for AndThen&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, E&gt; UnwindSafe for ErrInto&lt;Fut, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, E&gt; UnwindSafe for OkInto&lt;Fut, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; UnwindSafe for InspectErr&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; UnwindSafe for InspectOk&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; UnwindSafe for IntoFuture&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; UnwindSafe for MapErr&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; UnwindSafe for MapOk&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; UnwindSafe for OrElse&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; UnwindSafe for TryFlattenStream&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as TryFuture&gt;::Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; UnwindSafe for UnwrapOrElse&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F, G&gt; UnwindSafe for MapOkOrElse&lt;Fut, F, G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2&gt; UnwindSafe for TryFlatten&lt;Fut1, Fut2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, Si&gt; UnwindSafe for FlattenSink&lt;Fut, Si&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for Lazy&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Pending&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for OptionFuture&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Ready&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2&gt; UnwindSafe for Join&lt;Fut1, Fut2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3&gt; UnwindSafe for Join3&lt;Fut1, Fut2, Fut3&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as Future&gt;::Output: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4&gt; UnwindSafe for Join4&lt;Fut1, Fut2, Fut3, Fut4&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as Future&gt;::Output: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as Future&gt;::Output: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; UnwindSafe for Join5&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut5: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as Future&gt;::Output: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as Future&gt;::Output: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut5 as Future&gt;::Output: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for JoinAll&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Output: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; UnwindSafe for Select&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; UnwindSafe for SelectAll&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2&gt; UnwindSafe for TryJoin&lt;Fut1, Fut2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3&gt; UnwindSafe for TryJoin3&lt;Fut1, Fut2, Fut3&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4&gt; UnwindSafe for TryJoin4&lt;Fut1, Fut2, Fut3, Fut4&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Ok: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as TryFuture&gt;::Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; UnwindSafe for TryJoin5&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut5: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Ok: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as TryFuture&gt;::Ok: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut5 as TryFuture&gt;::Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for TryJoinAll&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as TryFuture&gt;::Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; UnwindSafe for TrySelect&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; UnwindSafe for SelectOk&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; !UnwindSafe for Abortable&lt;Fut&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for AbortHandle","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for AbortRegistration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Aborted","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; UnwindSafe for MaybeDone&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as Future&gt;::Output: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; UnwindSafe for TryMaybeDone&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as TryFuture&gt;::Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; UnwindSafe for Either&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St1, St2&gt; UnwindSafe for Chain&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, C&gt; UnwindSafe for Collect&lt;St, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; UnwindSafe for Concat&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; UnwindSafe for Cycle&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; UnwindSafe for Enumerate&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; UnwindSafe for Filter&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; UnwindSafe for FilterMap&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, U, F&gt; UnwindSafe for FlatMap&lt;St, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; UnwindSafe for Flatten&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, T, F&gt; UnwindSafe for Fold&lt;St, Fut, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; UnwindSafe for ForEach&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; UnwindSafe for Fuse&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; UnwindSafe for Inspect&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; UnwindSafe for Map&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St&gt; !UnwindSafe for Next&lt;'a, St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, St&gt; !UnwindSafe for Peek&lt;'a, St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; UnwindSafe for Peekable&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, S, Fut, F&gt; UnwindSafe for Scan&lt;St, S, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St&gt; !UnwindSafe for SelectNextSome&lt;'a, St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; UnwindSafe for Skip&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; UnwindSafe for SkipWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; UnwindSafe for StreamFuture&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; UnwindSafe for Take&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut&gt; UnwindSafe for TakeUntil&lt;St, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as Future&gt;::Output: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; UnwindSafe for TakeWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; UnwindSafe for Then&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, FromA, FromB&gt; UnwindSafe for Unzip&lt;St, FromA, FromB&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;FromA: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;FromB: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St1, St2&gt; UnwindSafe for Zip&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St1 as Stream&gt;::Item: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St2 as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; UnwindSafe for CatchUnwind&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; UnwindSafe for Chunks&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; UnwindSafe for ReadyChunks&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Si&gt; UnwindSafe for Forward&lt;St, Si&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; !UnwindSafe for BufferUnordered&lt;St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; !UnwindSafe for Buffered&lt;St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; !UnwindSafe for ForEachConcurrent&lt;St, Fut, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, Item&gt; !UnwindSafe for ReuniteError&lt;T, Item&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S, Item&gt; !UnwindSafe for SplitSink&lt;S, Item&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !UnwindSafe for SplitStream&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; UnwindSafe for AndThen&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, E&gt; UnwindSafe for ErrInto&lt;St, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; UnwindSafe for InspectErr&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; UnwindSafe for InspectOk&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; UnwindSafe for IntoStream&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; UnwindSafe for MapErr&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; UnwindSafe for MapOk&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; UnwindSafe for OrElse&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, C&gt; UnwindSafe for TryCollect&lt;St, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; UnwindSafe for TryConcat&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; UnwindSafe for TryFilter&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; UnwindSafe for TryFilterMap&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; UnwindSafe for TryFlatten&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, T, F&gt; UnwindSafe for TryFold&lt;St, Fut, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; UnwindSafe for TryForEach&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St&gt; !UnwindSafe for TryNext&lt;'a, St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; UnwindSafe for TrySkipWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; UnwindSafe for TryTakeWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, Fut&gt; UnwindSafe for TryUnfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; UnwindSafe for IntoAsyncRead&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; !UnwindSafe for TryBufferUnordered&lt;St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; !UnwindSafe for TryBuffered&lt;St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; !UnwindSafe for TryForEachConcurrent&lt;St, Fut, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Iter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Repeat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for RepeatWith&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Empty&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; UnwindSafe for Once&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Pending&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St1, St2&gt; UnwindSafe for Select&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, Fut&gt; UnwindSafe for Unfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for FuturesOrdered&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; !UnwindSafe for FuturesUnordered&lt;Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; !UnwindSafe for SelectAll&lt;St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !UnwindSafe for Iter&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !UnwindSafe for IterMut&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !UnwindSafe for IterPinMut&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !UnwindSafe for IterPinRef&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si, Item&gt; !UnwindSafe for Close&lt;'a, Si, Item&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Drain&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si1, Si2&gt; UnwindSafe for Fanout&lt;Si1, Si2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si2: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si, Item&gt; !UnwindSafe for Feed&lt;'a, Si, Item&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si, Item&gt; !UnwindSafe for Flush&lt;'a, Si, Item&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item, E&gt; UnwindSafe for SinkErrInto&lt;Si, Item, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, F&gt; UnwindSafe for SinkMapErr&lt;Si, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si, Item&gt; !UnwindSafe for Send&lt;'a, Si, Item&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si, St&gt; !UnwindSafe for SendAll&lt;'a, Si, St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, F, R&gt; UnwindSafe for Unfold&lt;T, F, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item, U, Fut, F&gt; UnwindSafe for With&lt;Si, Item, U, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item, U, St, F&gt; UnwindSafe for WithFlatMap&lt;Si, Item, U, St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item&gt; UnwindSafe for Buffer&lt;Si, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for AllowStdIo&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for BufReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for BufWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; UnwindSafe for Chain&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; !UnwindSafe for Close&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, W&gt; !UnwindSafe for Copy&lt;'a, R, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, W&gt; !UnwindSafe for CopyBuf&lt;'a, R, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Cursor&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Empty","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !UnwindSafe for FillBuf&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; !UnwindSafe for Flush&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W, Item&gt; UnwindSafe for IntoSink&lt;W, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Lines&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !UnwindSafe for Read&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !UnwindSafe for ReadVectored&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !UnwindSafe for ReadExact&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !UnwindSafe for ReadLine&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !UnwindSafe for ReadToEnd&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !UnwindSafe for ReadToString&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !UnwindSafe for ReadUntil&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Repeat","synthetic":true,"types":[]},{"text":"impl&lt;'a, S&gt; !UnwindSafe for Seek&lt;'a, S&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sink","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for ReadHalf&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for WriteHalf&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for ReuniteError&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Take&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Window&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; !UnwindSafe for Write&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; !UnwindSafe for WriteVectored&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; !UnwindSafe for WriteAll&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, U&gt; !UnwindSafe for MappedMutexGuard&lt;'a, T, U&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; UnwindSafe for Mutex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for MutexLockFuture&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for MutexGuard&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["getrandom"] = [{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]}];
implementors["hex"] = [{"text":"impl UnwindSafe for FromHexError","synthetic":true,"types":[]}];
implementors["hmac"] = [{"text":"impl&lt;D&gt; UnwindSafe for Hmac&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;D as BlockInput&gt;::BlockSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["http"] = [{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Extensions","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Drain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for GetAll&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for HeaderMap&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Keys&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for OccupiedEntry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for VacantEntry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for ValueDrain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for ValueIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for ValueIterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Values&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for ValuesMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HeaderName","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InvalidHeaderName","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HeaderValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InvalidHeaderValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ToStrError","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Entry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Method","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InvalidMethod","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Request&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Parts","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Response&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Parts","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StatusCode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InvalidStatusCode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Authority","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PathAndQuery","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Port&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Scheme","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Uri","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Parts","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InvalidUri","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InvalidUriParts","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Version","synthetic":true,"types":[]}];
implementors["http_body"] = [{"text":"impl&lt;'a, T&gt; !UnwindSafe for Data&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Trailers&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SizeHint","synthetic":true,"types":[]}];
implementors["httparse"] = [{"text":"impl UnwindSafe for InvalidChunkSize","synthetic":true,"types":[]},{"text":"impl&lt;'headers, 'buf&gt; !UnwindSafe for Request&lt;'headers, 'buf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'headers, 'buf&gt; !UnwindSafe for Response&lt;'headers, 'buf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Header&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Status&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["httpdate"] = [{"text":"impl UnwindSafe for HttpDate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]}];
implementors["humantime"] = [{"text":"impl UnwindSafe for FormattedDuration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Duration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Timestamp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rfc3339Timestamp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]}];
implementors["hyper"] = [{"text":"impl !UnwindSafe for Body","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Sender","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Upgraded","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for OnUpgrade","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Parts&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for HttpConnector&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl&lt;C, B&nbsp;=&nbsp;Body&gt; !UnwindSafe for Client&lt;C, B&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ResponseFuture","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HttpInfo","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Connected","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Name","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GaiResolver","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GaiAddrs","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for GaiFuture","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InvalidNameError","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; !UnwindSafe for SendRequest&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, B&gt; !UnwindSafe for Connection&lt;T, B&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ResponseFuture","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Parts&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, B, T&gt; !UnwindSafe for Connect&lt;C, B, T&gt;","synthetic":true,"types":[]}];
implementors["hyper_tls"] = [{"text":"impl&lt;T&gt; !UnwindSafe for HttpsConnecting&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for HttpsConnector&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for MaybeHttpsStream&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["indexmap"] = [{"text":"impl&lt;'a, K, V&gt; !UnwindSafe for OccupiedEntry&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !UnwindSafe for VacantEntry&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V, S&gt; UnwindSafe for IndexMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !UnwindSafe for ValuesMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !UnwindSafe for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; UnwindSafe for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Drain&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !UnwindSafe for Entry&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; UnwindSafe for IndexSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; UnwindSafe for Difference&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; UnwindSafe for Intersection&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S1, S2&gt; UnwindSafe for SymmetricDifference&lt;'a, T, S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; UnwindSafe for Union&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["itertools"] = [{"text":"impl&lt;I, J&gt; UnwindSafe for Diff&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for MinMaxResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Position&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; UnwindSafe for EitherOrBoth&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for FoldWhile&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; UnwindSafe for Interleave&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; UnwindSafe for InterleaveShortest&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for FilterMapOk&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for FilterOk&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; UnwindSafe for Product&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for PutBack&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for Batching&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J, F&gt; UnwindSafe for MergeBy&lt;I, J, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; !UnwindSafe for TakeWhileRef&lt;'a, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for WhileSome&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; UnwindSafe for TupleCombinations&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as HasCombination&lt;I&gt;&gt;::Combination: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for Positions&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for Update&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Step&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for MultiProduct&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Combinations&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for CombinationsWithReplacement&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; UnwindSafe for ConsTuples&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for ExactlyOneError&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; UnwindSafe for Format&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; UnwindSafe for FormatWith&lt;'a, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for GroupingMap&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for IntoChunks&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; !UnwindSafe for Chunk&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; !UnwindSafe for Chunks&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, I, F&gt; UnwindSafe for GroupBy&lt;K, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, I, F&gt; !UnwindSafe for Group&lt;'a, K, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, I, F&gt; !UnwindSafe for Groups&lt;'a, K, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, ElemF&gt; UnwindSafe for IntersperseWith&lt;I, ElemF&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;ElemF: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for KMergeBy&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J, F&gt; UnwindSafe for MergeJoinBy&lt;I, J, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for MultiPeek&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for PeekNth&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for PadUsing&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; !UnwindSafe for PeekingTakeWhile&lt;'a, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Permutations&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, E&gt; !UnwindSafe for ProcessResults&lt;'a, I, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Powerset&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for PutBackN&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !UnwindSafe for RcIter&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for RepeatN&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for RepeatCall&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; UnwindSafe for Unfold&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; UnwindSafe for Iterate&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !UnwindSafe for Tee&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for TupleBuffer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as TupleCollect&gt;::Buffer: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; UnwindSafe for TupleWindows&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; UnwindSafe for CircularTupleWindows&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; UnwindSafe for Tuples&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as TupleCollect&gt;::Buffer: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Unique&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, V, F&gt; UnwindSafe for UniqueBy&lt;I, V, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for WithPosition&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; UnwindSafe for ZipEq&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; UnwindSafe for ZipLongest&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Zip&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["itoa"] = [{"text":"impl UnwindSafe for Buffer","synthetic":true,"types":[]}];
implementors["lexical_core"] = [{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorCode","synthetic":true,"types":[]}];
implementors["log"] = [{"text":"impl&lt;'a&gt; !UnwindSafe for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for RecordBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Metadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for MetadataBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetLoggerError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseLevelError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Level","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LevelFilter","synthetic":true,"types":[]}];
implementors["md5"] = [{"text":"impl UnwindSafe for Digest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Context","synthetic":true,"types":[]}];
implementors["memchr"] = [{"text":"impl&lt;'a&gt; UnwindSafe for Memchr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Memchr2&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Memchr3&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["mio"] = [{"text":"impl UnwindSafe for Interest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Poll","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Registry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Token","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Waker","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SourceFd&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SocketAddr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sender","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Receiver","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Events","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TcpListener","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TcpSocket","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TcpStream","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TcpKeepalive","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UdpSocket","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnixDatagram","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnixListener","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnixStream","synthetic":true,"types":[]}];
implementors["native_tls"] = [{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Identity","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Certificate","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !UnwindSafe for MidHandshakeTlsStream&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TlsConnectorBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TlsConnector","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TlsAcceptorBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TlsAcceptor","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for TlsStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !UnwindSafe for HandshakeError&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Protocol","synthetic":true,"types":[]}];
implementors["ndarray"] = [{"text":"impl&lt;I:&nbsp;?Sized&gt; UnwindSafe for Dim&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Axis","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AxisDescription","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IxDynImpl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ShapeError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Slice","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized, D&gt; UnwindSafe for SliceInfo&lt;T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Parts, D&gt; UnwindSafe for Zip&lt;Parts, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Parts: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, D&gt; UnwindSafe for ArrayBase&lt;S, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as RawData&gt;::Elem: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for OwnedRepr&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for OwnedArcRepr&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for RawViewRepr&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for ViewRepr&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; UnwindSafe for Shape&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; UnwindSafe for StrideShape&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SliceOrIndex","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for FoldWhile&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; UnwindSafe for CowRepr&lt;'a, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, D&gt; UnwindSafe for Axes&lt;'a, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; UnwindSafe for Indices&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; UnwindSafe for IndicesIter&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; UnwindSafe for AxisChunksIter&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; !UnwindSafe for AxisChunksIterMut&lt;'a, A, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; UnwindSafe for AxisIter&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; !UnwindSafe for AxisIterMut&lt;'a, A, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; UnwindSafe for ExactChunks&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; UnwindSafe for ExactChunksIter&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; !UnwindSafe for ExactChunksIterMut&lt;'a, A, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; !UnwindSafe for ExactChunksMut&lt;'a, A, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; UnwindSafe for IndexedIter&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; !UnwindSafe for IndexedIterMut&lt;'a, A, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; UnwindSafe for Iter&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; !UnwindSafe for IterMut&lt;'a, A, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; UnwindSafe for Lanes&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; UnwindSafe for LanesIter&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; !UnwindSafe for LanesIterMut&lt;'a, A, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; !UnwindSafe for LanesMut&lt;'a, A, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; UnwindSafe for Windows&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_bigint"] = [{"text":"impl UnwindSafe for ParseBigIntError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for TryFromBigIntError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BigUint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BigInt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sign","synthetic":true,"types":[]}];
implementors["num_complex"] = [{"text":"impl&lt;T&gt; UnwindSafe for Complex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for ParseComplexError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A&gt; UnwindSafe for ExtendedGcd&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IterBinomial&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_iter"] = [{"text":"impl&lt;A&gt; UnwindSafe for Range&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for RangeInclusive&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for RangeStep&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for RangeStepInclusive&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for RangeFrom&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for RangeStepFrom&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;T&gt; UnwindSafe for Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseRatioError","synthetic":true,"types":[]}];
implementors["num_traits"] = [{"text":"impl UnwindSafe for ParseFloatError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FloatErrorKind","synthetic":true,"types":[]}];
implementors["once_cell"] = [{"text":"impl&lt;T, F&gt; UnwindSafe for Lazy&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for OnceCell&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F&gt; UnwindSafe for Lazy&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;UnwindSafe&gt; UnwindSafe for OnceCell&lt;T&gt;","synthetic":false,"types":[]}];
implementors["openssl"] = [{"text":"impl UnwindSafe for KeyError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AesKey","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Asn1GeneralizedTime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Asn1GeneralizedTimeRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TimeDiff","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Asn1Time","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Asn1TimeRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Asn1String","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Asn1StringRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Asn1Integer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Asn1IntegerRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Asn1BitString","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Asn1BitStringRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Asn1Object","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Asn1ObjectRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MsbOption","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BigNumContext","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BigNumContextRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BigNum","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BigNumRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CMSOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CmsContentInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CmsContentInfoRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConfMethod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Conf","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConfRef","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Deriver&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Dh&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for DhRef&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Dsa&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for DsaRef&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PointConversionForm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Asn1Flag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EcGroup","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EcGroupRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EcPoint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EcPointRef","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for EcKey&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for EcKeyRef&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EcdsaSig","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EcdsaSigRef","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Encrypter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Decrypter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Seal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Open","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorStack","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; UnwindSafe for Index&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MessageDigest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Hasher","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DigestBytes","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SignatureAlgorithms","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Nid","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OcspFlag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OcspResponseStatus","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OcspCertStatus","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OcspRevokedStatus","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for OcspStatus&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OcspBasicResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OcspBasicResponseRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OcspCertId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OcspCertIdRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OcspResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OcspResponseRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OcspRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OcspRequestRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OcspOneReq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OcspOneReqRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pkcs12","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pkcs12Ref","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParsedPkcs12","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pkcs12Builder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeyIvPair","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pkcs7","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pkcs7Ref","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pkcs7Flags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Id","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for PKey&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for PKeyRef&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Params","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Public","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Private","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Padding","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Rsa&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for RsaRef&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RsaPrivateKeyBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sha1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sha224","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sha256","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sha384","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sha512","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RsaPssSaltlen","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Signer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Verifier&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SrtpProtectionProfile","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SrtpProtectionProfileRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SrtpProfileId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConnectConfiguration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslAcceptor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslAcceptorBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslConnector","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslConnectorBuilder","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorCode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslMethod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslVerifyMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslSessionCacheMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExtensionContext","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslFiletype","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StatusType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NameType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SniError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslAlert","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AlpnError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClientHelloResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslVersion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslContextBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslContext","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslContextRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CipherBits","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslCipher","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslCipherRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslSession","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslSessionRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ssl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslRef","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !UnwindSafe for MidHandshakeSslStream&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for SslStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for SslStreamBuilder&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ShutdownState","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !UnwindSafe for HandshakeError&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ShutdownResult","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Stack&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Stackable&gt;::StackType: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Stackable&gt;::StackType: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for StackRef&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OpensslString","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OpensslStringRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Cipher","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Crypter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509StoreContext","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509StoreContextRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509Builder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509Ref","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for X509v3Context&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509Extension","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509ExtensionRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509NameBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509Name","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509NameRef","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for X509NameEntries&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509NameEntry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509NameEntryRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509ReqBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509Req","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509ReqRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509VerifyResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GeneralName","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GeneralNameRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509Algorithm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509AlgorithmRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509Object","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509ObjectRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509CheckFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509VerifyFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509VerifyParam","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509VerifyParamRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BasicConstraints","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeyUsage","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExtendedKeyUsage","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SubjectKeyIdentifier","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AuthorityKeyIdentifier","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SubjectAlternativeName","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509StoreBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509StoreBuilderRef","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for X509Lookup&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for X509LookupRef&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HashDir","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for X509LookupMethod&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for X509LookupMethodRef&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509Store","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509StoreRef","synthetic":true,"types":[]}];
implementors["openssl_probe"] = [{"text":"impl UnwindSafe for ProbeResult","synthetic":true,"types":[]}];
implementors["openssl_sys"] = [{"text":"impl UnwindSafe for AES_KEY","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ASN1_ENCODING","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ERR_STRING_DATA","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509V3_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SHA_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SHA256_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SHA512_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SRTP_PROTECTION_PROFILE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_VAL","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GENERAL_NAME","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AUTHORITY_KEYID","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_ASN1_OBJECT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BIO_METHOD","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CMS_ContentInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_void","synthetic":true,"types":[]},{"text":"impl UnwindSafe for point_conversion_form_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EC_METHOD","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EC_GROUP","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EC_POINT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ECDSA_SIG","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OCSP_CERTID","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OCSP_ONEREQ","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OCSP_REQUEST","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OCSP_BASICRESP","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ASN1_INTEGER","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ASN1_GENERALIZEDTIME","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ASN1_STRING","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ASN1_BIT_STRING","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ASN1_TIME","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ASN1_TYPE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ASN1_OBJECT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ASN1_OCTET_STRING","synthetic":true,"types":[]},{"text":"impl UnwindSafe for bio_st","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BIO","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BIGNUM","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BN_BLINDING","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BN_MONT_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BN_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BN_GENCB","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EVP_CIPHER","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EVP_CIPHER_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EVP_MD","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EVP_MD_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EVP_PKEY","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PKCS8_PRIV_KEY_INFO","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EVP_PKEY_ASN1_METHOD","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EVP_PKEY_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HMAC_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DH","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DH_METHOD","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DSA","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DSA_METHOD","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RSA","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RSA_METHOD","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EC_KEY","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_ALGOR","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_LOOKUP_METHOD","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_NAME","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_STORE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_STORE_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_VERIFY_PARAM","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CONF","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OPENSSL_INIT_SETTINGS","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ENGINE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SSL","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SSL_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for COMP_METHOD","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CRYPTO_EX_DATA","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OCSP_RESPONSE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PKCS12","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PKCS7_SIGNED","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PKCS7_ENVELOPE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PKCS7_SIGN_ENVELOPE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PKCS7_DIGEST","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PKCS7_ENCRYPT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PKCS7","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_OPENSSL_STRING","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SSL_METHOD","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SSL_CIPHER","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SSL_SESSION","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_SSL_CIPHER","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_SRTP_PROTECTION_PROFILE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OPENSSL_STACK","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_NAME_ENTRY","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_X509_NAME","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_EXTENSION","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_X509_EXTENSION","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_X509_ATTRIBUTE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_REQ_INFO","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_CRL","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_X509_CRL","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_CRL_INFO","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_REVOKED","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_X509_REVOKED","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_REQ","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_CINF","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_X509","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_OBJECT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_X509_OBJECT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_LOOKUP","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_X509_LOOKUP","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CONF_METHOD","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_GENERAL_NAME","synthetic":true,"types":[]}];
implementors["parking_lot"] = [{"text":"impl UnwindSafe for Condvar","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WaitTimeoutResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Once","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RawFairMutex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RawMutex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RawRwLock","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RawThreadId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OnceState","synthetic":true,"types":[]}];
implementors["parking_lot_core"] = [{"text":"impl UnwindSafe for ParkToken","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnparkResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnparkToken","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpinWait","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FilterOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParkResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RequeueOp","synthetic":true,"types":[]}];
implementors["percent_encoding"] = [{"text":"impl UnwindSafe for AsciiSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for PercentEncode&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for PercentDecode&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["phf"] = [{"text":"impl&lt;K, V&gt; UnwindSafe for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Set&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Entries&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["phf_shared"] = [{"text":"impl UnwindSafe for Hashes","synthetic":true,"types":[]}];
implementors["postgres"] = [{"text":"impl UnwindSafe for CancelToken","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Client","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for CopyInWriter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for CopyOutReader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Notifications&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for RowIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Transaction&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for TransactionBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for BinaryCopyInWriter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for BinaryCopyOutIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for BlockingIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for TimeoutIter&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["postgres_protocol"] = [{"text":"impl UnwindSafe for IsNull","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChannelBinding","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ScramSha256","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Header","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AuthenticationMd5PasswordBody","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AuthenticationGssContinueBody","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AuthenticationSaslBody","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SaslMechanisms&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AuthenticationSaslContinueBody","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AuthenticationSaslFinalBody","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BackendKeyDataBody","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CommandCompleteBody","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CopyDataBody","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CopyInResponseBody","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ColumnFormats&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CopyOutResponseBody","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataRowBody","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for DataRowRanges&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorResponseBody","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ErrorFields&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ErrorField&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NoticeResponseBody","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NotificationResponseBody","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParameterDescriptionBody","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Parameters&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParameterStatusBody","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReadyForQueryBody","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RowDescriptionBody","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Fields&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Field&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Message","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for CopyData&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for BindError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for HstoreEntries&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Varbit&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Array&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ArrayDimensions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ArrayDimension","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ArrayValues&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Point","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Box","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Path&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for PathPoints&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Inet","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for RangeBound&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Range&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["postgres_types"] = [{"text":"impl UnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Field","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WasNull","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WrongType","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Date&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Timestamp&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Kind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IsNull","synthetic":true,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl UnwindSafe for TokenStream","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LexError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Span","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Punct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ident","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TokenTree","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Delimiter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Spacing","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IntoIter","synthetic":true,"types":[]}];
implementors["pyo3"] = [{"text":"impl&lt;'a&gt; !UnwindSafe for PyDowncastError&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for PyErr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GILGuard","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GILPool","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Py&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'p&gt; !UnwindSafe for Python&lt;'p&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'p&gt; UnwindSafe for PythonVersionInfo&lt;'p&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyAny","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for PyBuffer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for ReadOnlyCell&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ElementType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompareOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyTraverseError","synthetic":true,"types":[]},{"text":"impl&lt;'p&gt; !UnwindSafe for PyVisit&lt;'p&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; UnwindSafe for IterNextOutput&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyBufferProcs","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; UnwindSafe for IterANextOutput&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyBaseException","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyException","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyStopAsyncIteration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyStopIteration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyGeneratorExit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyArithmeticError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyLookupError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyAssertionError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyAttributeError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyBufferError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyEOFError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyFloatingPointError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyOSError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyImportError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyModuleNotFoundError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyIndexError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyKeyError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyKeyboardInterrupt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyMemoryError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyNameError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyOverflowError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyRuntimeError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyRecursionError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyNotImplementedError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PySyntaxError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyReferenceError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PySystemError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PySystemExit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyTypeError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyUnboundLocalError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyUnicodeError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyUnicodeDecodeError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyUnicodeEncodeError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyUnicodeTranslateError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyValueError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyZeroDivisionError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyBlockingIOError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyBrokenPipeError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyChildProcessError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyConnectionError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyConnectionAbortedError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyConnectionRefusedError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyConnectionResetError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyFileExistsError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyFileNotFoundError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyInterruptedError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyIsADirectoryError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyNotADirectoryError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyPermissionError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyProcessLookupError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyTimeoutError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyEnvironmentError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyIOError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CancelledError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InvalidStateError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TimeoutError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IncompleteReadError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LimitOverrunError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QueueEmpty","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QueueFull","synthetic":true,"types":[]},{"text":"impl UnwindSafe for herror","synthetic":true,"types":[]},{"text":"impl UnwindSafe for gaierror","synthetic":true,"types":[]},{"text":"impl UnwindSafe for timeout","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyFutureFeatures","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Py_complex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyComplexObject","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyDateTime_Delta","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyDateTime_Time","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyDateTime_Date","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyDateTime_DateTime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyDateTime_CAPI","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyDateTimeAPI","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyGetSetDef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyFloatObject","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyGenObject","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyListObject","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyLongObject","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyMethodDef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyModuleDef_Base","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyModuleDef_Slot","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyModuleDef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyObject","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyVarObject","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Py_buffer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyNumberMethods","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PySequenceMethods","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyMappingMethods","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyAsyncMethods","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyTypeObject","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyHeapTypeObject","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyType_Slot","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyType_Spec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyObjectArenaAllocator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyArena","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyBaseExceptionObject","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PySyntaxErrorObject","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyImportErrorObject","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyUnicodeErrorObject","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PySystemExitObject","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyOSErrorObject","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyStopIterationObject","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyHash_FuncDef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyMemAllocatorEx","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyInterpreterState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyThreadState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyCompilerFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _mod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for symtable","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _node","synthetic":true,"types":[]},{"text":"impl UnwindSafe for setentry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PySetObject","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PySliceObject","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyStructSequence_Field","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyStructSequence_Desc","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyTupleObject","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyWeakReference","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyCodeObject","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyDictKeysObject","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyDictObject","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyTryBlock","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyFrameObject","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyMemAllocatorDomain","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyGILState_STATE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyMemberDef","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for FreeList&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Slot&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for GILOnceCell&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PanicException","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyModule","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for PyCell&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as PyTypeInfo&gt;::BaseLayout: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as PyClass&gt;::Dict: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as PyClassSend&gt;::ThreadChecker: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as PyClass&gt;::WeakRef: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'p, T&gt; !UnwindSafe for PyRef&lt;'p, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'p, T&gt; !UnwindSafe for PyRefMut&lt;'p, T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyBorrowError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyBorrowMutError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for PyNativeTypeInitializer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for PyClassInitializer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as PyTypeInfo&gt;::BaseType as PyTypeInfo&gt;::Initializer: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyClassDummySlot","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyClassDictSlot","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyClassWeakRefSlot","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyBool","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyByteArray","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyBytes","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyComplex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyDate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyDateTime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyDelta","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyTime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyTzInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyDict","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyFloat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyCFunction","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyFunction","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyIterator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyList","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyLong","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PySequence","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyFrozenSet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PySet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PySlice","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PySliceIndices","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyString","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyTuple","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyType","synthetic":true,"types":[]}];
implementors["pyo3_macros_backend"] = [{"text":"impl UnwindSafe for PyClassArgs","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PyFunctionAttr","synthetic":true,"types":[]}];
implementors["r2d2"] = [{"text":"impl&lt;M&gt; !UnwindSafe for Builder&lt;M&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Extensions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NopErrorHandler","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LoggingErrorHandler","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NopConnectionCustomizer","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; !UnwindSafe for Pool&lt;M&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for State","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; !UnwindSafe for PooledConnection&lt;M&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NopEventHandler","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AcquireEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReleaseEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CheckoutEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TimeoutEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CheckinEvent","synthetic":true,"types":[]}];
implementors["r2d2_postgres"] = [{"text":"impl&lt;T&gt; !UnwindSafe for PostgresConnectionManager&lt;T&gt;","synthetic":true,"types":[]}];
implementors["rand"] = [{"text":"impl UnwindSafe for Bernoulli","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Open01","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OpenClosed01","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Alphanumeric","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; UnwindSafe for Uniform&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Binomial","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Cauchy","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dirichlet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Exp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Exp1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Beta","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChiSquared","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FisherF","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Gamma","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StudentT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LogNormal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Normal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StandardNormal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pareto","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Poisson","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Triangular","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnitCircle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnitSphereSurface","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Weibull","synthetic":true,"types":[]},{"text":"impl&lt;D, R, T&gt; UnwindSafe for DistIter&lt;D, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Standard","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BernoulliError","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; UnwindSafe for UniformInt&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; UnwindSafe for UniformFloat&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UniformDuration","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; UnwindSafe for WeightedIndex&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WeightedError","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for WeightedIndex&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;W as SampleUniform&gt;::Sampler: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EntropyRng","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StdRng","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ThreadRng","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ReadError","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for ReadRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Rsdr&gt; UnwindSafe for ReseedingRng&lt;R, Rsdr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Rsdr: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StepRng","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, T&gt; UnwindSafe for SliceChooseIter&lt;'a, S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IndexVec","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for IndexVecIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IndexVecIntoIter","synthetic":true,"types":[]}];
implementors["rand_chacha"] = [{"text":"impl UnwindSafe for ChaCha12Core","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChaCha12Rng","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChaCha20Core","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChaCha20Rng","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChaCha8Core","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChaCha8Rng","synthetic":true,"types":[]}];
implementors["rand_core"] = [{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OsRng","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; UnwindSafe for BlockRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; UnwindSafe for BlockRng64&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rayon"] = [{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Drain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; UnwindSafe for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !UnwindSafe for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; UnwindSafe for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !UnwindSafe for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !UnwindSafe for Drain&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Drain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Drain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; UnwindSafe for Chain&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Chunks&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Cloned&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Copied&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Empty&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Enumerate&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; UnwindSafe for Filter&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; UnwindSafe for FilterMap&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for FlatMap&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for FlatMapIter&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Flatten&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for FlattenIter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, ID, F&gt; UnwindSafe for Fold&lt;I, ID, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;ID: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; UnwindSafe for FoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for Inspect&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; UnwindSafe for Interleave&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; UnwindSafe for InterleaveShortest&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Intersperse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as ParallelIterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for MaxLen&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for MinLen&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for Map&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, INIT, F&gt; UnwindSafe for MapInit&lt;I, INIT, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;INIT: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T, F&gt; UnwindSafe for MapWith&lt;I, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for MultiZip&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Once&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for PanicFuse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Iter&gt; UnwindSafe for IterBridge&lt;Iter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Iter: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; UnwindSafe for Positions&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Repeat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for RepeatN&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Rev&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Skip&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D, S&gt; UnwindSafe for Split&lt;D, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Take&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, ID, F&gt; UnwindSafe for TryFold&lt;I, U, ID, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;ID: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; UnwindSafe for TryFoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as Try&gt;::Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for Update&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for WhileSome&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; UnwindSafe for Zip&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; UnwindSafe for ZipEq&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for StepBy&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; UnwindSafe for Iter&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; UnwindSafe for Chunks&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; UnwindSafe for ChunksExact&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; UnwindSafe for Windows&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; !UnwindSafe for IterMut&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; !UnwindSafe for ChunksMut&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; !UnwindSafe for ChunksExactMut&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T, P&gt; UnwindSafe for Split&lt;'data, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T, P&gt; !UnwindSafe for SplitMut&lt;'data, T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; UnwindSafe for Chars&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; UnwindSafe for CharIndices&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; UnwindSafe for Bytes&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; UnwindSafe for EncodeUtf16&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; UnwindSafe for Split&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; UnwindSafe for SplitTerminator&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; UnwindSafe for Lines&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; UnwindSafe for SplitWhitespace&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; UnwindSafe for Matches&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; UnwindSafe for MatchIndices&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Drain&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; !UnwindSafe for Drain&lt;'data, T&gt;","synthetic":true,"types":[]}];
implementors["rayon_core"] = [{"text":"impl !UnwindSafe for ThreadBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; !UnwindSafe for Scope&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; !UnwindSafe for ScopeFifo&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ThreadPool","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ThreadPoolBuildError","synthetic":true,"types":[]},{"text":"impl&lt;S&nbsp;=&nbsp;DefaultSpawn&gt; !UnwindSafe for ThreadPoolBuilder&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Configuration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FnContext","synthetic":true,"types":[]}];
implementors["regex"] = [{"text":"impl UnwindSafe for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegexBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegexSet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetMatches","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !UnwindSafe for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; UnwindSafe for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; UnwindSafe for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; UnwindSafe for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !UnwindSafe for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; UnwindSafe for NoExpand&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !UnwindSafe for ReplacerRef&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !UnwindSafe for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !UnwindSafe for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; UnwindSafe for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegexBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; UnwindSafe for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !UnwindSafe for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !UnwindSafe for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !UnwindSafe for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !UnwindSafe for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; UnwindSafe for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; UnwindSafe for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; UnwindSafe for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !UnwindSafe for ReplacerRef&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; UnwindSafe for NoExpand&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegexSet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetMatches","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["regex_automata"] = [{"text":"impl&lt;D&gt; UnwindSafe for Regex&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; UnwindSafe for DenseDFA&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; UnwindSafe for SparseDFA&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; UnwindSafe for Standard&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; UnwindSafe for ByteClass&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; UnwindSafe for Premultiplied&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; UnwindSafe for PremultipliedByteClass&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; UnwindSafe for Standard&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; UnwindSafe for ByteClass&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl UnwindSafe for Parser","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParserBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnicodeWordError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Span","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Position","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WithComments","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Comment","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Alternation","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Concat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassPerl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassAscii","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassUnicode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassBracketed","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassSetRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassSetUnion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassSetBinaryOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Assertion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Repetition","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RepetitionOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CaptureName","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Flags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FlagsItem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ast","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LiteralKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpecialLiteralKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HexLiteralKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Class","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassPerlKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassAsciiKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassUnicodeKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassUnicodeOpKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassSet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassSetItem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassSetBinaryOpKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AssertionKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RepetitionKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RepetitionRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GroupKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FlagsItemKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Flag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParserBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Parser","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Printer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CaseFoldError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Hir","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassUnicode","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ClassUnicodeIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassUnicodeRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassBytes","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ClassBytesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassBytesRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Repetition","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HirKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Class","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Anchor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WordBoundary","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GroupKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RepetitionKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RepetitionRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Literals","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Printer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TranslatorBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Translator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Utf8Range","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Utf8Sequences","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Utf8Sequence","synthetic":true,"types":[]}];
implementors["rusoto_core"] = [{"text":"impl !UnwindSafe for Client","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for RusotoError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for EventStream&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for HttpResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BufferedHttpResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HttpDispatchError","synthetic":true,"types":[]},{"text":"impl&lt;C&nbsp;=&nbsp;HttpsConnector&lt;HttpConnector&lt;GaiResolver&gt;&gt;&gt; !UnwindSafe for HttpClient&lt;C&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HttpConfig","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TlsError","synthetic":true,"types":[]}];
implementors["rusoto_credential"] = [{"text":"impl !UnwindSafe for ContainerProvider","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EnvironmentProvider","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for InstanceMetadataProvider","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProfileProvider","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Secret","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StaticProvider","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AwsCredentials","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CredentialsError","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; !UnwindSafe for AutoRefreshingProvider&lt;P&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for DefaultCredentialsProvider","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ChainProvider","synthetic":true,"types":[]},{"text":"impl&lt;T, E&nbsp;=&nbsp;CredentialsError&gt; !UnwindSafe for Variable&lt;T, E&gt;","synthetic":true,"types":[]}];
implementors["rusoto_s3"] = [{"text":"impl UnwindSafe for AbortIncompleteMultipartUpload","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AbortIncompleteMultipartUploadSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AbortMultipartUploadOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AbortMultipartUploadRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AccelerateConfiguration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AccelerateConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AccessControlPolicy","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AccessControlPolicySerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AccessControlTranslation","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AccessControlTranslationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AccountIdSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AllowQuotedRecordDelimiterSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AllowedHeaderSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AllowedHeadersSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AllowedMethodSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AllowedMethodsSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AllowedOriginSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AllowedOriginsSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AnalyticsAndOperator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AnalyticsAndOperatorSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AnalyticsConfiguration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AnalyticsConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AnalyticsExportDestination","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AnalyticsExportDestinationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AnalyticsFilter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AnalyticsFilterSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AnalyticsIdSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AnalyticsS3BucketDestination","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AnalyticsS3BucketDestinationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AnalyticsS3ExportFileFormatSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BodySerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bucket","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BucketAccelerateStatusSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BucketKeyEnabledSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BucketLifecycleConfiguration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BucketLifecycleConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BucketLocationConstraintSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BucketLoggingStatus","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BucketLoggingStatusSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BucketLogsPermissionSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BucketNameSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BucketVersioningStatusSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CORSConfiguration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CORSConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CORSRule","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CORSRuleSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CORSRulesSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CSVInput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CSVInputSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CSVOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CSVOutputSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CloudFunctionSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CloudFunctionConfiguration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CloudFunctionConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CloudFunctionInvocationRoleSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CommentsSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CommonPrefix","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompleteMultipartUploadOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompleteMultipartUploadRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompletedMultipartUpload","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompletedMultipartUploadSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompletedPart","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompletedPartSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompletedPartListSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompressionTypeSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Condition","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConditionSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ContinuationEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CopyObjectOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CopyObjectRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CopyObjectResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CopyPartResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CreateBucketConfiguration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CreateBucketConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CreateBucketOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CreateBucketRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CreateMultipartUploadOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CreateMultipartUploadRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DateSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DaysSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DaysAfterInitiationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DefaultRetention","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DefaultRetentionSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Delete","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteBucketAnalyticsConfigurationRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteBucketCorsRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteBucketEncryptionRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteBucketIntelligentTieringConfigurationRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteBucketInventoryConfigurationRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteBucketLifecycleRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteBucketMetricsConfigurationRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteBucketOwnershipControlsRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteBucketPolicyRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteBucketReplicationRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteBucketRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteBucketTaggingRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteBucketWebsiteRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteMarkerEntry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteMarkerReplication","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteMarkerReplicationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteMarkerReplicationStatusSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteObjectOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteObjectRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteObjectTaggingOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteObjectTaggingRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteObjectsOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteObjectsRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeletePublicAccessBlockRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeletedObject","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DelimiterSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DescriptionSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Destination","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DestinationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DisplayNameSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ETagSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EmailAddressSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EnableRequestProgressSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EncodingTypeSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Encryption","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EncryptionSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EncryptionConfiguration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EncryptionConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EndSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EndEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for S3Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorDocument","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorDocumentSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EventSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EventListSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExistingObjectReplication","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExistingObjectReplicationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExistingObjectReplicationStatusSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExpirationStatusSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExpiredObjectDeleteMarkerSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExposeHeaderSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExposeHeadersSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExpressionSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExpressionTypeSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FetchOwnerSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FieldDelimiterSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FileHeaderInfoSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FilterRule","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FilterRuleSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FilterRuleListSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FilterRuleNameSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FilterRuleValueSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketAccelerateConfigurationOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketAccelerateConfigurationRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketAclOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketAclRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketAnalyticsConfigurationOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketAnalyticsConfigurationRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketCorsOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketCorsRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketEncryptionOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketEncryptionRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketIntelligentTieringConfigurationOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketIntelligentTieringConfigurationRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketInventoryConfigurationOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketInventoryConfigurationRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketLifecycleConfigurationOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketLifecycleConfigurationRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketLifecycleOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketLifecycleRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketLocationOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketLocationRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketLoggingOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketLoggingRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketMetricsConfigurationOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketMetricsConfigurationRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketNotificationConfigurationRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketOwnershipControlsOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketOwnershipControlsRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketPolicyOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketPolicyRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketPolicyStatusOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketPolicyStatusRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketReplicationOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketReplicationRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketRequestPaymentOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketRequestPaymentRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketTaggingOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketTaggingRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketVersioningOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketVersioningRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketWebsiteOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketWebsiteRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetObjectAclOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetObjectAclRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetObjectLegalHoldOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetObjectLegalHoldRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetObjectLockConfigurationOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetObjectLockConfigurationRequest","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for GetObjectOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetObjectRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetObjectRetentionOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetObjectRetentionRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetObjectTaggingOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetObjectTaggingRequest","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for GetObjectTorrentOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetObjectTorrentRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetPublicAccessBlockOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetPublicAccessBlockRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GlacierJobParameters","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GlacierJobParametersSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Grant","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GrantSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Grantee","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GranteeSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GrantsSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HeadBucketRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HeadObjectOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HeadObjectRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HostNameSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HttpErrorCodeReturnedEqualsSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HttpRedirectCodeSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IDSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IndexDocument","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IndexDocumentSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Initiator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InputSerialization","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InputSerializationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IntelligentTieringAccessTierSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IntelligentTieringAndOperator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IntelligentTieringAndOperatorSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IntelligentTieringConfiguration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IntelligentTieringConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IntelligentTieringDaysSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IntelligentTieringFilter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IntelligentTieringFilterSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IntelligentTieringIdSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IntelligentTieringStatusSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InventoryConfiguration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InventoryConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InventoryDestination","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InventoryDestinationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InventoryEncryption","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InventoryEncryptionSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InventoryFilter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InventoryFilterSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InventoryFormatSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InventoryFrequencySerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InventoryIdSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InventoryIncludedObjectVersionsSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InventoryOptionalFieldSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InventoryOptionalFieldsSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InventoryS3BucketDestination","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InventoryS3BucketDestinationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InventorySchedule","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InventoryScheduleSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IsEnabledSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for JSONInput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for JSONInputSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for JSONOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for JSONOutputSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for JSONTypeSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KMSContextSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeyMarkerSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeyPrefixEqualsSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LambdaFunctionArnSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LambdaFunctionConfiguration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LambdaFunctionConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LambdaFunctionConfigurationListSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LifecycleConfiguration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LifecycleConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LifecycleExpiration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LifecycleExpirationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LifecycleRule","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LifecycleRuleSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LifecycleRuleAndOperator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LifecycleRuleAndOperatorSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LifecycleRuleFilter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LifecycleRuleFilterSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LifecycleRulesSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListBucketAnalyticsConfigurationsOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListBucketAnalyticsConfigurationsRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListBucketIntelligentTieringConfigurationsOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListBucketIntelligentTieringConfigurationsRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListBucketInventoryConfigurationsOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListBucketInventoryConfigurationsRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListBucketMetricsConfigurationsOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListBucketMetricsConfigurationsRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListBucketsOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListMultipartUploadsOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListMultipartUploadsRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListObjectVersionsOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListObjectVersionsRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListObjectsOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListObjectsRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListObjectsV2Output","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListObjectsV2Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListPartsOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListPartsRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LocationPrefixSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LoggingEnabled","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LoggingEnabledSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MFADeleteSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MarkerSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MaxAgeSecondsSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MaxKeysSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MaxPartsSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MaxUploadsSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetadataEntry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetadataEntrySerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetadataKeySerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetadataValueSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Metrics","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetricsSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetricsAndOperator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetricsAndOperatorSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetricsConfiguration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetricsConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetricsFilter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetricsFilterSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetricsIdSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetricsStatusSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MinutesSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MultipartUpload","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MultipartUploadIdSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NoncurrentVersionExpiration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NoncurrentVersionExpirationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NoncurrentVersionTransition","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NoncurrentVersionTransitionSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NoncurrentVersionTransitionListSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NotificationConfiguration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NotificationConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NotificationConfigurationDeprecated","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NotificationConfigurationDeprecatedSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NotificationConfigurationFilter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NotificationConfigurationFilterSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NotificationIdSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Object","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ObjectCannedACLSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ObjectIdentifier","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ObjectIdentifierSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ObjectIdentifierListSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ObjectKeySerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ObjectLockConfiguration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ObjectLockConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ObjectLockEnabledSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ObjectLockLegalHold","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ObjectLockLegalHoldSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ObjectLockLegalHoldStatusSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ObjectLockRetention","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ObjectLockRetentionSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ObjectLockRetentionModeSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ObjectLockRule","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ObjectLockRuleSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ObjectOwnershipSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ObjectVersion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ObjectVersionIdSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OutputLocation","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OutputLocationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OutputSerialization","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OutputSerializationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Owner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OwnerSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OwnerOverrideSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OwnershipControls","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OwnershipControlsSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OwnershipControlsRule","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OwnershipControlsRuleSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OwnershipControlsRulesSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParquetInput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParquetInputSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Part","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PartNumberSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PartNumberMarkerSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PayerSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PermissionSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PolicyStatus","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PrefixSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PrioritySerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Progress","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProgressEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProtocolSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PublicAccessBlockConfiguration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PublicAccessBlockConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketAccelerateConfigurationRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketAclRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketAnalyticsConfigurationRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketCorsRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketEncryptionRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketIntelligentTieringConfigurationRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketInventoryConfigurationRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketLifecycleConfigurationRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketLifecycleRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketLoggingRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketMetricsConfigurationRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketNotificationConfigurationRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketNotificationRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketOwnershipControlsRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketPolicyRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketReplicationRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketRequestPaymentRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketTaggingRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketVersioningRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketWebsiteRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutObjectAclOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutObjectAclRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutObjectLegalHoldOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutObjectLegalHoldRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutObjectLockConfigurationOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutObjectLockConfigurationRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutObjectOutput","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for PutObjectRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutObjectRetentionOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutObjectRetentionRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutObjectTaggingOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutObjectTaggingRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutPublicAccessBlockRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QueueArnSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QueueConfiguration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QueueConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QueueConfigurationDeprecated","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QueueConfigurationDeprecatedSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QueueConfigurationListSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QuietSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QuoteCharacterSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QuoteEscapeCharacterSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QuoteFieldsSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RecordDelimiterSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RecordsEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Redirect","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RedirectSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RedirectAllRequestsTo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RedirectAllRequestsToSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReplaceKeyPrefixWithSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReplaceKeyWithSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReplicaKmsKeyIDSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReplicaModifications","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReplicaModificationsSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReplicaModificationsStatusSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReplicationConfiguration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReplicationConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReplicationRule","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReplicationRuleSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReplicationRuleAndOperator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReplicationRuleAndOperatorSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReplicationRuleFilter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReplicationRuleFilterSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReplicationRuleStatusSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReplicationRulesSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReplicationTime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReplicationTimeSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReplicationTimeStatusSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReplicationTimeValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReplicationTimeValueSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RequestPaymentConfiguration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RequestPaymentConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RequestProgress","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RequestProgressSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ResponseCacheControlSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ResponseContentDispositionSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ResponseContentEncodingSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ResponseContentLanguageSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ResponseContentTypeSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ResponseExpiresSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RestoreObjectOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RestoreObjectRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RestoreRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RestoreRequestSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RestoreRequestTypeSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RoleSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RoutingRule","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RoutingRuleSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RoutingRulesSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rule","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RuleSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RulesSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for S3KeyFilter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for S3KeyFilterSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for S3Location","synthetic":true,"types":[]},{"text":"impl UnwindSafe for S3LocationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SSEKMS","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SSEKMSSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SSEKMSKeyIdSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SSES3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SSES3Serializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ScanRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ScanRangeSerializer","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for SelectObjectContentOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SelectObjectContentRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SelectObjectContentRequestSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SelectParameters","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SelectParametersSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ServerSideEncryptionSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ServerSideEncryptionByDefault","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ServerSideEncryptionByDefaultSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ServerSideEncryptionConfiguration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ServerSideEncryptionConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ServerSideEncryptionRule","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ServerSideEncryptionRuleSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ServerSideEncryptionRulesSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SettingSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SourceSelectionCriteria","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SourceSelectionCriteriaSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SseKmsEncryptedObjects","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SseKmsEncryptedObjectsSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SseKmsEncryptedObjectsStatusSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StartSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StartAfterSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Stats","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StatsEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StorageClassSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StorageClassAnalysis","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StorageClassAnalysisSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StorageClassAnalysisDataExport","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StorageClassAnalysisDataExportSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StorageClassAnalysisSchemaVersionSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SuffixSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Tag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TagSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TagSetSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Tagging","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TaggingSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TargetBucketSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TargetGrant","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TargetGrantSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TargetGrantsSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TargetPrefixSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TierSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Tiering","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TieringSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TieringListSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TokenSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TopicArnSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TopicConfiguration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TopicConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TopicConfigurationDeprecated","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TopicConfigurationDeprecatedSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TopicConfigurationListSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Transition","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TransitionSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TransitionListSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TransitionStorageClassSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for URISerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UploadIdMarkerSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UploadPartCopyOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UploadPartCopyRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UploadPartOutput","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for UploadPartRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UserMetadataSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ValueSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VersionIdMarkerSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VersioningConfiguration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VersioningConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WebsiteConfiguration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WebsiteConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for YearsSerializer","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for S3Client","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SelectObjectContentEventStreamItem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AbortMultipartUploadError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompleteMultipartUploadError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CopyObjectError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CreateBucketError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CreateMultipartUploadError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteBucketError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteBucketAnalyticsConfigurationError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteBucketCorsError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteBucketEncryptionError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteBucketIntelligentTieringConfigurationError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteBucketInventoryConfigurationError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteBucketLifecycleError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteBucketMetricsConfigurationError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteBucketOwnershipControlsError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteBucketPolicyError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteBucketReplicationError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteBucketTaggingError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteBucketWebsiteError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteObjectError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteObjectTaggingError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteObjectsError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeletePublicAccessBlockError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketAccelerateConfigurationError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketAclError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketAnalyticsConfigurationError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketCorsError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketEncryptionError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketIntelligentTieringConfigurationError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketInventoryConfigurationError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketLifecycleError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketLifecycleConfigurationError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketLocationError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketLoggingError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketMetricsConfigurationError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketNotificationError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketNotificationConfigurationError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketOwnershipControlsError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketPolicyError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketPolicyStatusError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketReplicationError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketRequestPaymentError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketTaggingError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketVersioningError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketWebsiteError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetObjectError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetObjectAclError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetObjectLegalHoldError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetObjectLockConfigurationError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetObjectRetentionError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetObjectTaggingError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetObjectTorrentError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetPublicAccessBlockError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HeadBucketError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HeadObjectError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListBucketAnalyticsConfigurationsError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListBucketIntelligentTieringConfigurationsError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListBucketInventoryConfigurationsError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListBucketMetricsConfigurationsError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListBucketsError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListMultipartUploadsError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListObjectVersionsError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListObjectsError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListObjectsV2Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListPartsError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketAccelerateConfigurationError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketAclError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketAnalyticsConfigurationError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketCorsError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketEncryptionError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketIntelligentTieringConfigurationError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketInventoryConfigurationError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketLifecycleError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketLifecycleConfigurationError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketLoggingError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketMetricsConfigurationError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketNotificationError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketNotificationConfigurationError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketOwnershipControlsError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketPolicyError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketReplicationError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketRequestPaymentError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketTaggingError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketVersioningError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketWebsiteError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutObjectError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutObjectAclError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutObjectLegalHoldError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutObjectLockConfigurationError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutObjectRetentionError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutObjectTaggingError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutPublicAccessBlockError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RestoreObjectError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SelectObjectContentError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UploadPartError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UploadPartCopyError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PreSignedRequestOption","synthetic":true,"types":[]}];
implementors["rusoto_signature"] = [{"text":"impl UnwindSafe for ParseRegionError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Region","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for SignedRequest","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for SignedRequestPayload","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ByteStream","synthetic":true,"types":[]}];
implementors["scheduled_thread_pool"] = [{"text":"impl UnwindSafe for JobHandle","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ScheduledThreadPool","synthetic":true,"types":[]}];
implementors["serde"] = [{"text":"impl UnwindSafe for IgnoredAny","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Unexpected&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for UnitDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for BoolDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for I8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for I16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for I32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for I64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for IsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for U8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for U16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for U64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for UsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for F32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for F64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for CharDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for I128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for U128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for U32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; UnwindSafe for StrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; UnwindSafe for BorrowedStrDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for StringDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; UnwindSafe for CowStrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; UnwindSafe for BorrowedBytesDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; UnwindSafe for SeqDeserializer&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for SeqAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, I, E&gt; UnwindSafe for MapDeserializer&lt;'de, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as Iterator&gt;::Item as Pair&gt;::Second: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for MapAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Ok, Error&gt; UnwindSafe for Impossible&lt;Ok, Error&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Error: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["serde_json"] = [{"text":"impl&lt;R&gt; UnwindSafe for Deserializer&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, R, T&gt; UnwindSafe for StreamDeserializer&lt;'de, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;W, F&gt; UnwindSafe for Serializer&lt;W, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; UnwindSafe for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Number","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Value","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SliceRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for StrRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for IoRead&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Category","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for VacantEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for OccupiedEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Keys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for ValuesMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Entry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompactFormatter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for PrettyFormatter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CharEscape","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Serializer","synthetic":true,"types":[]}];
implementors["sha2"] = [{"text":"impl UnwindSafe for Sha224","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sha256","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sha384","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sha512","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sha512Trunc224","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sha512Trunc256","synthetic":true,"types":[]}];
implementors["shlex"] = [{"text":"impl&lt;'a&gt; UnwindSafe for Shlex&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["signal_hook_registry"] = [{"text":"impl UnwindSafe for SigId","synthetic":true,"types":[]}];
implementors["slab"] = [{"text":"impl&lt;T&gt; UnwindSafe for Slab&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for VacantEntry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["socket2"] = [{"text":"impl UnwindSafe for SockAddr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Socket","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Domain","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Protocol","synthetic":true,"types":[]}];
implementors["stringprep"] = [{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CaseFoldForNfkc","synthetic":true,"types":[]}];
implementors["strum"] = [{"text":"impl UnwindSafe for ParseError","synthetic":true,"types":[]}];
implementors["syn"] = [{"text":"impl UnwindSafe for Attribute","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetaList","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetaNameValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Field","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FieldsNamed","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FieldsUnnamed","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Variant","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VisCrate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VisPublic","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VisRestricted","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Arm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FieldValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Label","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MethodTurbofish","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprArray","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprAssign","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprAssignOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprAsync","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprAwait","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprBinary","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprBlock","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprBox","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprBreak","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprCall","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprCast","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprClosure","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprContinue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprField","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprForLoop","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprGroup","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprIf","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprIndex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprLet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprLit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprLoop","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprMatch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprMethodCall","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprParen","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprPath","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprReference","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprRepeat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprReturn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprStruct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprTry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprTryBlock","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprTuple","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprUnary","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprUnsafe","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprWhile","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprYield","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Index","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BoundLifetimes","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConstParam","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Generics","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LifetimeDef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PredicateEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PredicateLifetime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PredicateType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitBound","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeParam","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WhereClause","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ImplGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Turbofish&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for TypeGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForeignItemFn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForeignItemMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForeignItemStatic","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForeignItemType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImplItemConst","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImplItemMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImplItemMethod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImplItemType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemConst","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemEnum","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemExternCrate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemFn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemForeignMod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemImpl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemMacro2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemMod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemStatic","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemStruct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemTrait","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemTraitAlias","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemUnion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemUse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Receiver","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Signature","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitItemConst","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitItemMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitItemMethod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitItemType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UseGlob","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UseGroup","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UseName","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UsePath","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UseRename","synthetic":true,"types":[]},{"text":"impl UnwindSafe for File","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Lifetime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitBool","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitByte","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitByteStr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitChar","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitFloat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitInt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitStr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Macro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataEnum","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataStruct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataUnion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeriveInput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Block","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Local","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Abi","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BareFnArg","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeArray","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeBareFn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeGroup","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeImplTrait","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeInfer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeNever","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeParen","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypePath","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypePtr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeReference","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeSlice","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeTraitObject","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeTuple","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Variadic","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FieldPat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatBox","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatIdent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatLit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatOr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatPath","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatReference","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatRest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatSlice","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatStruct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatTuple","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatTupleStruct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatWild","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AngleBracketedGenericArguments","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Binding","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Constraint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParenthesizedGenericArguments","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Path","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PathSegment","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QSelf","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AttrStyle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Meta","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NestedMeta","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Fields","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Visibility","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenericMethodArgument","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RangeLimits","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Expr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Member","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenericParam","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitBoundModifier","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeParamBound","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WherePredicate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FnArg","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForeignItem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImplItem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Item","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitItem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UseTree","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Lit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StrStyle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MacroDelimiter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Data","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BinOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Stmt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReturnType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenericArgument","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PathArguments","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Underscore","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Abstract","synthetic":true,"types":[]},{"text":"impl UnwindSafe for As","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Async","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Auto","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Await","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Become","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Box","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Break","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Const","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Continue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Crate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Default","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Do","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dyn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Else","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Enum","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Extern","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Final","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Fn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for For","synthetic":true,"types":[]},{"text":"impl UnwindSafe for If","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Impl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for In","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Let","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Loop","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Macro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Match","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Move","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mut","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Override","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Priv","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pub","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ref","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Return","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SelfType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SelfValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Static","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Struct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Super","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Trait","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Try","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Typeof","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Union","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Unsafe","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Unsized","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Use","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Virtual","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Where","synthetic":true,"types":[]},{"text":"impl UnwindSafe for While","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Yield","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Add","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AddEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for And","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AndAnd","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AndEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for At","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bang","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Caret","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CaretEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Colon","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Colon2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Comma","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Div","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DivEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dollar","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dot","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dot2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dot3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DotDotEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Eq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EqEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ge","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Gt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Le","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Lt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MulEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ne","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Or","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OrEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OrOr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pound","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Question","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RArrow","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LArrow","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RemEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FatArrow","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Semi","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Shl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ShlEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Shr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ShrEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Star","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sub","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SubEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Tilde","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Brace","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bracket","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Paren","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TokenBuffer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Cursor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; UnwindSafe for Punctuated&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; UnwindSafe for Pairs&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; !UnwindSafe for PairsMut&lt;'a, T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; UnwindSafe for IntoPairs&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; UnwindSafe for Pair&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Lookahead1&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for ParseBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'a&gt; UnwindSafe for StepCursor&lt;'c, 'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Nothing","synthetic":true,"types":[]}];
implementors["synstructure"] = [{"text":"impl&lt;'a&gt; UnwindSafe for BindingInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for VariantAst&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for VariantInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Structure&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AddBounds","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BindStyle","synthetic":true,"types":[]}];
implementors["termcolor"] = [{"text":"impl UnwindSafe for StandardStream","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for StandardStreamLock&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BufferedStandardStream","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BufferWriter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Buffer","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for NoColor&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for Ansi&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ColorSpec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseColorError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ColorChoice","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Color","synthetic":true,"types":[]}];
implementors["thread_local"] = [{"text":"impl&lt;T&gt; !UnwindSafe for CachedIntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for CachedIterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send + UnwindSafe&gt; UnwindSafe for CachedThreadLocal&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send + UnwindSafe&gt; UnwindSafe for ThreadLocal&lt;T&gt;","synthetic":false,"types":[]}];
implementors["time"] = [{"text":"impl UnwindSafe for Date","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Duration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instant","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OffsetDateTime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PrimitiveDateTime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Time","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UtcOffset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Format","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sign","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Weekday","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConversionRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ComponentRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IndeterminateOffset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Format","synthetic":true,"types":[]}];
implementors["tokio"] = [{"text":"impl&lt;'a&gt; !UnwindSafe for ReadBuf&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Interest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ready","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for ReadHalf&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for WriteHalf&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for BufReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;RW&gt; UnwindSafe for BufStream&lt;RW&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;RW: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for BufWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DuplexStream","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Empty","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Lines&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Repeat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sink","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Split&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Take&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for AsyncFd&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for AsyncFdReadyGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for AsyncFdReadyMutGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TryIoError","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TcpListener","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TcpSocket","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TcpStream","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for UdpSocket","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for UnixDatagram","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for UnixListener","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for UnixStream","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for ReadHalf&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for WriteHalf&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for OwnedReadHalf","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for OwnedWriteHalf","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ReuniteError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for ReadHalf&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for WriteHalf&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for OwnedReadHalf","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for OwnedWriteHalf","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ReuniteError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SocketAddr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UCred","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Command","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Child","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ChildStdin","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ChildStdout","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ChildStderr","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for EnterGuard&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Handle","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Runtime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for JoinError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for JoinHandle&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Barrier","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BarrierWaitResult","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; UnwindSafe for Mutex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for MutexGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TryLockError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for OwnedMutexGuard&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Notify","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AcquireError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Semaphore","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for SemaphorePermit&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for OwnedSemaphorePermit","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; UnwindSafe for RwLock&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for RwLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for RwLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TryAcquireError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RecvError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Permit&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for UnboundedReceiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for UnboundedSender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SendTimeoutError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RecvError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Ref&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RecvError","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for LocalSet","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for LocalKey&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Sleep","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instant","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Interval","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Timeout&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Elapsed","synthetic":true,"types":[]}];
implementors["tokio_native_tls"] = [{"text":"impl&lt;S&gt; UnwindSafe for AllowStd&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for TlsStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TlsConnector","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TlsAcceptor","synthetic":true,"types":[]}];
implementors["tokio_postgres"] = [{"text":"impl UnwindSafe for CancelToken","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Client","synthetic":true,"types":[]},{"text":"impl&lt;S, T&gt; !UnwindSafe for Connection&lt;S, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for CopyInSink&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for CopyOutStream","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Portal","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for RowStream","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for SimpleQueryStream","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Socket","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Column","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Statement","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Transaction&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for TransactionBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Notification","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IsolationLevel","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AsyncMessage","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SimpleQueryMessage","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for BinaryCopyInWriter","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for BinaryCopyOutStream","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BinaryCopyOutRow","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TargetSessionAttrs","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChannelBinding","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Host","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SqlState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DbError","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Severity","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorPosition","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Row","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SimpleQueryRow","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChannelBinding","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NoTls","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NoTlsFuture","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NoTlsError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NoTlsStream","synthetic":true,"types":[]}];
implementors["tokio_stream"] = [{"text":"impl&lt;T&gt; UnwindSafe for Empty&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Iter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Once&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Pending&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; UnwindSafe for StreamMap&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for ReceiverStream&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for UnboundedReceiverStream&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for IntervalStream","synthetic":true,"types":[]}];
implementors["tokio_util"] = [{"text":"impl UnwindSafe for BytesCodec","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; UnwindSafe for Framed&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; UnwindSafe for FramedParts&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, D&gt; UnwindSafe for FramedRead&lt;T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; UnwindSafe for FramedWrite&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LinesCodec","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for LinesCodecError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LengthDelimitedCodecError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LengthDelimitedCodec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CancellationToken","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for WaitForCancellationFuture&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;L, R&gt; UnwindSafe for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["tracing"] = [{"text":"impl !UnwindSafe for Span","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for WithDispatch&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Instrumented&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Entered&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["tracing_core"] = [{"text":"impl !UnwindSafe for Dispatch","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Event&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Field","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Level","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LevelFilter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Metadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Identifier","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for DefaultGuard","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetGlobalDefaultError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Empty","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for FieldSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for ValueSet&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Iter","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for DisplayValue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for DebugValue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Kind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseLevelFilterError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseLevelError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Id","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Attributes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Current","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Interest","synthetic":true,"types":[]}];
implementors["unicode_bidi"] = [{"text":"impl UnwindSafe for ParagraphInfo","synthetic":true,"types":[]},{"text":"impl&lt;'text&gt; UnwindSafe for InitialInfo&lt;'text&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'text&gt; UnwindSafe for BidiInfo&lt;'text&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BidiClass","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Level","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]}];
implementors["unicode_normalization"] = [{"text":"impl&lt;I&gt; UnwindSafe for Decompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Recompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for StreamSafe&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IsNormalized","synthetic":true,"types":[]}];
implementors["want"] = [{"text":"impl !UnwindSafe for Giver","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Taker","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for SharedGiver","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Closed","synthetic":true,"types":[]}];
implementors["xml"] = [{"text":"impl UnwindSafe for ParserConfig","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EmitterConfig","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Name&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; UnwindSafe for ReprDisplay&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OwnedName","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Attribute&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OwnedAttribute","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TextPosition","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XmlVersion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Namespace","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NamespaceStack","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for NamespaceStackMappings&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for CheckedTarget&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !UnwindSafe for EventReader&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !UnwindSafe for Events&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XmlEvent","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for EventWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for EmitterError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for EndElementBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for StartElementBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for XmlEvent&lt;'a&gt;","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()