(function() {var implementors = {};
implementors["connectorx"] = [{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> for <a class=\"enum\" href=\"connectorx/data_order/enum.DataOrder.html\" title=\"enum connectorx::data_order::DataOrder\">DataOrder</a>","synthetic":true,"types":["connectorx::data_order::DataOrder"]},{"text":"impl&lt;'a, S, W, TP&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"connectorx/prelude/struct.Dispatcher.html\" title=\"struct connectorx::prelude::Dispatcher\">Dispatcher</a>&lt;'a, S, W, TP&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;TP: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,&nbsp;</span>","synthetic":true,"types":["connectorx::dispatcher::Dispatcher"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> for <a class=\"enum\" href=\"connectorx/errors/enum.ConnectorXError.html\" title=\"enum connectorx::errors::ConnectorXError\">ConnectorXError</a>","synthetic":true,"types":["connectorx::errors::ConnectorXError"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> for <a class=\"enum\" href=\"connectorx/errors/enum.ProduceContext.html\" title=\"enum connectorx::errors::ProduceContext\">ProduceContext</a>","synthetic":true,"types":["connectorx::errors::ProduceContext"]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()