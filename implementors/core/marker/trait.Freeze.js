(function() {var implementors = {};
implementors["addr2line"] = [{"text":"impl&lt;R&gt; Freeze for Context&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ctx, R&gt; Freeze for LocationRangeIter&lt;'ctx, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ctx, R&gt; Freeze for FrameIter&lt;'ctx, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ctx, R&gt; Freeze for Frame&lt;'ctx, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for FunctionName&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Location&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["adler"] = [{"text":"impl Freeze for Adler32","synthetic":true,"types":[]}];
implementors["aho_corasick"] = [{"text":"impl&lt;S&gt; Freeze for AhoCorasick&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for AhoCorasickBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; Freeze for FindIter&lt;'a, 'b, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; Freeze for FindOverlappingIter&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, S&gt; Freeze for StreamFindIter&lt;'a, R, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Match","synthetic":true,"types":[]},{"text":"impl Freeze for MatchKind","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorKind","synthetic":true,"types":[]},{"text":"impl Freeze for Builder","synthetic":true,"types":[]},{"text":"impl Freeze for Config","synthetic":true,"types":[]},{"text":"impl&lt;'s, 'h&gt; Freeze for FindIter&lt;'s, 'h&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Searcher","synthetic":true,"types":[]},{"text":"impl Freeze for MatchKind","synthetic":true,"types":[]}];
implementors["anyhow"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Chain&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["arrayvec"] = [{"text":"impl&lt;A&gt; Freeze for ArrayString&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for CapacityError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for ArrayVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; Freeze for Drain&lt;'a, A&gt;","synthetic":true,"types":[]}];
implementors["arrow"] = [{"text":"impl Freeze for ArrayData","synthetic":true,"types":[]},{"text":"impl Freeze for ArrayDataBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for DecimalArray","synthetic":true,"types":[]},{"text":"impl Freeze for FixedSizeBinaryArray","synthetic":true,"types":[]},{"text":"impl Freeze for BooleanArray","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Freeze for DictionaryArray&lt;K&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for FixedSizeListArray","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for PrimitiveArray&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for StructArray","synthetic":true,"types":[]},{"text":"impl Freeze for UnionArray","synthetic":true,"types":[]},{"text":"impl Freeze for NullArray","synthetic":true,"types":[]},{"text":"impl&lt;OffsetSize&gt; Freeze for GenericBinaryArray&lt;OffsetSize&gt;","synthetic":true,"types":[]},{"text":"impl&lt;OffsetSize&gt; Freeze for GenericListArray&lt;OffsetSize&gt;","synthetic":true,"types":[]},{"text":"impl&lt;OffsetSize&gt; Freeze for GenericStringArray&lt;OffsetSize&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for BooleanBufferBuilder","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for BufferBuilder&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for BooleanBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for DecimalBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for FixedSizeBinaryBuilder","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for FixedSizeListBuilder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for PrimitiveBuilder&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Freeze for PrimitiveDictionaryBuilder&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Freeze for StringDictionaryBuilder&lt;K&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for StructBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for UnionBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for MutableArrayData&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for PrimitiveIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for BooleanIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for GenericStringIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for GenericBinaryIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Bitmap","synthetic":true,"types":[]},{"text":"impl Freeze for Buffer","synthetic":true,"types":[]},{"text":"impl Freeze for MutableBuffer","synthetic":true,"types":[]},{"text":"impl Freeze for Bytes","synthetic":true,"types":[]},{"text":"impl Freeze for Deallocation","synthetic":true,"types":[]},{"text":"impl Freeze for SortOptions","synthetic":true,"types":[]},{"text":"impl Freeze for SortColumn","synthetic":true,"types":[]},{"text":"impl Freeze for TakeOptions","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Reader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ReaderBuilder","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for Writer&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for WriterBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for Field","synthetic":true,"types":[]},{"text":"impl Freeze for BooleanType","synthetic":true,"types":[]},{"text":"impl Freeze for Int8Type","synthetic":true,"types":[]},{"text":"impl Freeze for Int16Type","synthetic":true,"types":[]},{"text":"impl Freeze for Int32Type","synthetic":true,"types":[]},{"text":"impl Freeze for Int64Type","synthetic":true,"types":[]},{"text":"impl Freeze for UInt8Type","synthetic":true,"types":[]},{"text":"impl Freeze for UInt16Type","synthetic":true,"types":[]},{"text":"impl Freeze for UInt32Type","synthetic":true,"types":[]},{"text":"impl Freeze for UInt64Type","synthetic":true,"types":[]},{"text":"impl Freeze for Float32Type","synthetic":true,"types":[]},{"text":"impl Freeze for Float64Type","synthetic":true,"types":[]},{"text":"impl Freeze for TimestampSecondType","synthetic":true,"types":[]},{"text":"impl Freeze for TimestampMillisecondType","synthetic":true,"types":[]},{"text":"impl Freeze for TimestampMicrosecondType","synthetic":true,"types":[]},{"text":"impl Freeze for TimestampNanosecondType","synthetic":true,"types":[]},{"text":"impl Freeze for Date32Type","synthetic":true,"types":[]},{"text":"impl Freeze for Date64Type","synthetic":true,"types":[]},{"text":"impl Freeze for Time32SecondType","synthetic":true,"types":[]},{"text":"impl Freeze for Time32MillisecondType","synthetic":true,"types":[]},{"text":"impl Freeze for Time64MicrosecondType","synthetic":true,"types":[]},{"text":"impl Freeze for Time64NanosecondType","synthetic":true,"types":[]},{"text":"impl Freeze for IntervalYearMonthType","synthetic":true,"types":[]},{"text":"impl Freeze for IntervalDayTimeType","synthetic":true,"types":[]},{"text":"impl Freeze for DurationSecondType","synthetic":true,"types":[]},{"text":"impl Freeze for DurationMillisecondType","synthetic":true,"types":[]},{"text":"impl Freeze for DurationMicrosecondType","synthetic":true,"types":[]},{"text":"impl Freeze for DurationNanosecondType","synthetic":true,"types":[]},{"text":"impl Freeze for Schema","synthetic":true,"types":[]},{"text":"impl Freeze for DataType","synthetic":true,"types":[]},{"text":"impl Freeze for DateUnit","synthetic":true,"types":[]},{"text":"impl Freeze for TimeUnit","synthetic":true,"types":[]},{"text":"impl Freeze for IntervalUnit","synthetic":true,"types":[]},{"text":"impl Freeze for ArrowError","synthetic":true,"types":[]},{"text":"impl Freeze for FFI_ArrowSchema","synthetic":true,"types":[]},{"text":"impl Freeze for FFI_ArrowArray","synthetic":true,"types":[]},{"text":"impl Freeze for ArrowArray","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for FileReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for StreamReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for IpcWriteOptions","synthetic":true,"types":[]},{"text":"impl Freeze for IpcDataGenerator","synthetic":true,"types":[]},{"text":"impl Freeze for DictionaryTracker","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for FileWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for StreamWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for EncodedData","synthetic":true,"types":[]},{"text":"impl Freeze for Block","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Footer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for FooterArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for FooterBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for FooterOffset","synthetic":true,"types":[]},{"text":"impl Freeze for CompressionType","synthetic":true,"types":[]},{"text":"impl Freeze for BodyCompressionMethod","synthetic":true,"types":[]},{"text":"impl Freeze for MessageHeader","synthetic":true,"types":[]},{"text":"impl Freeze for MessageHeaderUnionTableOffset","synthetic":true,"types":[]},{"text":"impl Freeze for FieldNode","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for BodyCompression&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for BodyCompressionArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for BodyCompressionBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for RecordBatch&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for RecordBatchArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for RecordBatchBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for DictionaryBatch&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for DictionaryBatchArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for DictionaryBatchBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Message&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for MessageArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for MessageBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for BodyCompressionOffset","synthetic":true,"types":[]},{"text":"impl Freeze for RecordBatchOffset","synthetic":true,"types":[]},{"text":"impl Freeze for DictionaryBatchOffset","synthetic":true,"types":[]},{"text":"impl Freeze for MessageOffset","synthetic":true,"types":[]},{"text":"impl Freeze for MetadataVersion","synthetic":true,"types":[]},{"text":"impl Freeze for Feature","synthetic":true,"types":[]},{"text":"impl Freeze for UnionMode","synthetic":true,"types":[]},{"text":"impl Freeze for Precision","synthetic":true,"types":[]},{"text":"impl Freeze for DateUnit","synthetic":true,"types":[]},{"text":"impl Freeze for TimeUnit","synthetic":true,"types":[]},{"text":"impl Freeze for IntervalUnit","synthetic":true,"types":[]},{"text":"impl Freeze for Type","synthetic":true,"types":[]},{"text":"impl Freeze for TypeUnionTableOffset","synthetic":true,"types":[]},{"text":"impl Freeze for DictionaryKind","synthetic":true,"types":[]},{"text":"impl Freeze for Endianness","synthetic":true,"types":[]},{"text":"impl Freeze for Buffer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Null&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for NullArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for NullBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Struct_&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Struct_Args","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for Struct_Builder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for List&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ListArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for ListBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for LargeList&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for LargeListArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for LargeListBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for FixedSizeList&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for FixedSizeListArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for FixedSizeListBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Map&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for MapArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for MapBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Union&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for UnionArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for UnionBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Int&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for IntArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for IntBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for FloatingPoint&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for FloatingPointArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for FloatingPointBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Utf8&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Utf8Args","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for Utf8Builder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Binary&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for BinaryArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for BinaryBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for LargeUtf8&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for LargeUtf8Args","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for LargeUtf8Builder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for LargeBinary&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for LargeBinaryArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for LargeBinaryBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for FixedSizeBinary&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for FixedSizeBinaryArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for FixedSizeBinaryBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Bool&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for BoolArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for BoolBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Decimal&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for DecimalArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for DecimalBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Date&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for DateArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for DateBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Time&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for TimeArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for TimeBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Timestamp&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for TimestampArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for TimestampBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Interval&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for IntervalArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for IntervalBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Duration&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for DurationArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for DurationBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for KeyValue&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for KeyValueArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for KeyValueBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for DictionaryEncoding&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for DictionaryEncodingArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for DictionaryEncodingBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Field&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for FieldArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for FieldBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Schema&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SchemaArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for SchemaBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for NullOffset","synthetic":true,"types":[]},{"text":"impl Freeze for Struct_Offset","synthetic":true,"types":[]},{"text":"impl Freeze for ListOffset","synthetic":true,"types":[]},{"text":"impl Freeze for LargeListOffset","synthetic":true,"types":[]},{"text":"impl Freeze for FixedSizeListOffset","synthetic":true,"types":[]},{"text":"impl Freeze for MapOffset","synthetic":true,"types":[]},{"text":"impl Freeze for UnionOffset","synthetic":true,"types":[]},{"text":"impl Freeze for IntOffset","synthetic":true,"types":[]},{"text":"impl Freeze for FloatingPointOffset","synthetic":true,"types":[]},{"text":"impl Freeze for Utf8Offset","synthetic":true,"types":[]},{"text":"impl Freeze for BinaryOffset","synthetic":true,"types":[]},{"text":"impl Freeze for LargeUtf8Offset","synthetic":true,"types":[]},{"text":"impl Freeze for LargeBinaryOffset","synthetic":true,"types":[]},{"text":"impl Freeze for FixedSizeBinaryOffset","synthetic":true,"types":[]},{"text":"impl Freeze for BoolOffset","synthetic":true,"types":[]},{"text":"impl Freeze for DecimalOffset","synthetic":true,"types":[]},{"text":"impl Freeze for DateOffset","synthetic":true,"types":[]},{"text":"impl Freeze for TimeOffset","synthetic":true,"types":[]},{"text":"impl Freeze for TimestampOffset","synthetic":true,"types":[]},{"text":"impl Freeze for IntervalOffset","synthetic":true,"types":[]},{"text":"impl Freeze for DurationOffset","synthetic":true,"types":[]},{"text":"impl Freeze for KeyValueOffset","synthetic":true,"types":[]},{"text":"impl Freeze for DictionaryEncodingOffset","synthetic":true,"types":[]},{"text":"impl Freeze for FieldOffset","synthetic":true,"types":[]},{"text":"impl Freeze for SchemaOffset","synthetic":true,"types":[]},{"text":"impl Freeze for SparseMatrixCompressedAxis","synthetic":true,"types":[]},{"text":"impl Freeze for SparseTensorIndex","synthetic":true,"types":[]},{"text":"impl Freeze for SparseTensorIndexUnionTableOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SparseTensorIndexCOO&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SparseTensorIndexCOOArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for SparseTensorIndexCOOBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SparseMatrixIndexCSX&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SparseMatrixIndexCSXArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for SparseMatrixIndexCSXBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SparseTensorIndexCSF&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SparseTensorIndexCSFArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for SparseTensorIndexCSFBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SparseTensor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SparseTensorArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for SparseTensorBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SparseTensorIndexCOOOffset","synthetic":true,"types":[]},{"text":"impl Freeze for SparseMatrixIndexCSXOffset","synthetic":true,"types":[]},{"text":"impl Freeze for SparseTensorIndexCSFOffset","synthetic":true,"types":[]},{"text":"impl Freeze for SparseTensorOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for TensorDim&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for TensorDimArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for TensorDimBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Tensor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for TensorArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for TensorBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for TensorDimOffset","synthetic":true,"types":[]},{"text":"impl Freeze for TensorOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; Freeze for ValueIter&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Decoder","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Reader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ReaderBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for RecordBatch","synthetic":true,"types":[]},{"text":"impl Freeze for RecordBatchOptions","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Tensor&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for BitChunks&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for BitChunkIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ArrowJson","synthetic":true,"types":[]},{"text":"impl Freeze for ArrowJsonSchema","synthetic":true,"types":[]},{"text":"impl Freeze for ArrowJsonField","synthetic":true,"types":[]},{"text":"impl Freeze for ArrowJsonFieldDictionary","synthetic":true,"types":[]},{"text":"impl Freeze for DictionaryIndexType","synthetic":true,"types":[]},{"text":"impl Freeze for ArrowJsonBatch","synthetic":true,"types":[]},{"text":"impl Freeze for ArrowJsonDictionaryBatch","synthetic":true,"types":[]},{"text":"impl Freeze for ArrowJsonColumn","synthetic":true,"types":[]},{"text":"impl Freeze for StringWriter","synthetic":true,"types":[]}];
implementors["atty"] = [{"text":"impl Freeze for Stream","synthetic":true,"types":[]}];
implementors["backtrace"] = [{"text":"impl Freeze for Frame","synthetic":true,"types":[]},{"text":"impl Freeze for Symbol","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SymbolName&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for BacktraceFmt&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'fmt, 'a, 'b&gt; Freeze for BacktraceFrameFmt&lt;'fmt, 'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Backtrace","synthetic":true,"types":[]},{"text":"impl Freeze for BacktraceFrame","synthetic":true,"types":[]},{"text":"impl Freeze for BacktraceSymbol","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for BytesOrWideString&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for PrintFmt","synthetic":true,"types":[]}];
implementors["base64"] = [{"text":"impl Freeze for Config","synthetic":true,"types":[]},{"text":"impl Freeze for DecodeError","synthetic":true,"types":[]},{"text":"impl Freeze for CharacterSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Base64Display&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; Freeze for DecoderReader&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for EncoderWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for EncoderStringWriter&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["block_buffer"] = [{"text":"impl&lt;BlockSize&gt; Freeze for BlockBuffer&lt;BlockSize&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;BlockSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["bstr"] = [{"text":"impl Freeze for BStr","synthetic":true,"types":[]},{"text":"impl Freeze for BString","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Bytes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Fields&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, F&gt; Freeze for FieldsWith&lt;'a, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Find&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for FindReverse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Finder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for FinderReverse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Lines&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for LinesWithTerminator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Split&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SplitN&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SplitNReverse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SplitReverse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for DrainBytes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for FromUtf8Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for GraphemeIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Graphemes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SentenceIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Sentences&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for WordIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Words&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for WordsWithBreakIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for WordsWithBreaks&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for CharIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Chars&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Utf8Chunk&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Utf8Chunks&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Utf8Error","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for ByteLines&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for ByteRecords&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["byteorder"] = [{"text":"impl Freeze for BigEndian","synthetic":true,"types":[]},{"text":"impl Freeze for LittleEndian","synthetic":true,"types":[]}];
implementors["bytes"] = [{"text":"impl !Freeze for Bytes","synthetic":true,"types":[]},{"text":"impl Freeze for BytesMut","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Freeze for Chain&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Limit&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Take&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for UninitSlice","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for Reader&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for Writer&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["chrono"] = [{"text":"impl&lt;Tz&gt; Freeze for Date&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Tz&gt; Freeze for DateTime&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ParseWeekdayError","synthetic":true,"types":[]},{"text":"impl Freeze for ParseMonthError","synthetic":true,"types":[]},{"text":"impl Freeze for SecondsFormat","synthetic":true,"types":[]},{"text":"impl Freeze for RoundingError","synthetic":true,"types":[]},{"text":"impl Freeze for Weekday","synthetic":true,"types":[]},{"text":"impl Freeze for Month","synthetic":true,"types":[]},{"text":"impl Freeze for FixedOffset","synthetic":true,"types":[]},{"text":"impl Freeze for Local","synthetic":true,"types":[]},{"text":"impl Freeze for Utc","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for LocalResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for NaiveDate","synthetic":true,"types":[]},{"text":"impl Freeze for NaiveDateTime","synthetic":true,"types":[]},{"text":"impl Freeze for IsoWeek","synthetic":true,"types":[]},{"text":"impl Freeze for NaiveTime","synthetic":true,"types":[]},{"text":"impl Freeze for Parsed","synthetic":true,"types":[]},{"text":"impl Freeze for InternalNumeric","synthetic":true,"types":[]},{"text":"impl Freeze for InternalFixed","synthetic":true,"types":[]},{"text":"impl Freeze for ParseError","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for DelayedFormat&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Pad","synthetic":true,"types":[]},{"text":"impl Freeze for Numeric","synthetic":true,"types":[]},{"text":"impl Freeze for Fixed","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Item&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for StrftimeItems&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["connector_agent"] = [{"text":"impl&lt;S, P, TS&gt; Freeze for Worker&lt;S, P, TS&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, P, TS&gt; Freeze for WriteWorker&lt;S, P, TS&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ConnectorAgentError","synthetic":true,"types":[]},{"text":"impl Freeze for DataType","synthetic":true,"types":[]},{"text":"impl Freeze for CSVSourceFactor","synthetic":true,"types":[]},{"text":"impl Freeze for CSVSource","synthetic":true,"types":[]},{"text":"impl Freeze for U64CounterSource","synthetic":true,"types":[]},{"text":"impl Freeze for StringSource","synthetic":true,"types":[]},{"text":"impl Freeze for BoolCounterSource","synthetic":true,"types":[]},{"text":"impl Freeze for F64CounterSource","synthetic":true,"types":[]},{"text":"impl Freeze for U64Writer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for U64PartitionWriter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for StringWriter","synthetic":true,"types":[]},{"text":"impl Freeze for BoolWriter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for StringPartitionWriter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for BoolPartitionWriter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for F64Writer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for F64PartitionWriter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for MemoryWriter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for MemoryPartitionWriter&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["cpuid_bool"] = [{"text":"impl !Freeze for LazyBool","synthetic":true,"types":[]}];
implementors["crc32fast"] = [{"text":"impl Freeze for Hasher","synthetic":true,"types":[]}];
implementors["crossbeam_channel"] = [{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for TryIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Select&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SelectedOperation&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ReadyTimeoutError","synthetic":true,"types":[]},{"text":"impl Freeze for SelectTimeoutError","synthetic":true,"types":[]},{"text":"impl Freeze for TryReadyError","synthetic":true,"types":[]},{"text":"impl Freeze for TrySelectError","synthetic":true,"types":[]},{"text":"impl Freeze for RecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for RecvTimeoutError","synthetic":true,"types":[]},{"text":"impl Freeze for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for SendTimeoutError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["crossbeam_deque"] = [{"text":"impl&lt;T&gt; !Freeze for Injector&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Stealer&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Worker&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Steal&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["crossbeam_epoch"] = [{"text":"impl&lt;T&gt; !Freeze for Atomic&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g, T:&nbsp;?Sized, P&gt; Freeze for CompareAndSetError&lt;'g, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Freeze for Owned&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g, T:&nbsp;?Sized&gt; Freeze for Shared&lt;'g, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Collector","synthetic":true,"types":[]},{"text":"impl Freeze for LocalHandle","synthetic":true,"types":[]},{"text":"impl Freeze for Guard","synthetic":true,"types":[]}];
implementors["crossbeam_utils"] = [{"text":"impl&lt;T&gt; Freeze for CachePadded&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Freeze for Backoff","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for AtomicCell&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Parker","synthetic":true,"types":[]},{"text":"impl Freeze for Unparker","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for ShardedLock&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for ShardedLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for ShardedLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for WaitGroup","synthetic":true,"types":[]},{"text":"impl&lt;'env&gt; Freeze for Scope&lt;'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope, 'env&gt; Freeze for ScopedThreadBuilder&lt;'scope, 'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope, T&gt; Freeze for ScopedJoinHandle&lt;'scope, T&gt;","synthetic":true,"types":[]}];
implementors["crypto_mac"] = [{"text":"impl Freeze for InvalidKeyLength","synthetic":true,"types":[]},{"text":"impl Freeze for MacError","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; Freeze for Output&lt;M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;M as Mac&gt;::OutputSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["csv"] = [{"text":"impl Freeze for ByteRecord","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; Freeze for ByteRecordIter&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Position","synthetic":true,"types":[]},{"text":"impl Freeze for DeserializeError","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for FromUtf8Error","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for IntoInnerError&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Utf8Error","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for ByteRecordsIntoIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'r, R&gt; Freeze for ByteRecordsIter&lt;'r, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R, D&gt; Freeze for DeserializeRecordsIntoIter&lt;R, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'r, R, D&gt; Freeze for DeserializeRecordsIter&lt;'r, R, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Reader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ReaderBuilder","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for StringRecordsIntoIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'r, R&gt; Freeze for StringRecordsIter&lt;'r, R&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for StringRecord","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; Freeze for StringRecordIter&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for Writer&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for WriterBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for DeserializeErrorKind","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorKind","synthetic":true,"types":[]},{"text":"impl Freeze for QuoteStyle","synthetic":true,"types":[]},{"text":"impl Freeze for Terminator","synthetic":true,"types":[]},{"text":"impl Freeze for Trim","synthetic":true,"types":[]}];
implementors["csv_core"] = [{"text":"impl Freeze for Reader","synthetic":true,"types":[]},{"text":"impl Freeze for ReaderBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for Writer","synthetic":true,"types":[]},{"text":"impl Freeze for WriterBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for ReadFieldNoCopyResult","synthetic":true,"types":[]},{"text":"impl Freeze for ReadFieldResult","synthetic":true,"types":[]},{"text":"impl Freeze for ReadRecordNoCopyResult","synthetic":true,"types":[]},{"text":"impl Freeze for ReadRecordResult","synthetic":true,"types":[]},{"text":"impl Freeze for WriteResult","synthetic":true,"types":[]},{"text":"impl Freeze for Terminator","synthetic":true,"types":[]},{"text":"impl Freeze for QuoteStyle","synthetic":true,"types":[]}];
implementors["digest"] = [{"text":"impl Freeze for InvalidOutputSize","synthetic":true,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L, R&gt; Freeze for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["env_logger"] = [{"text":"impl&lt;'a&gt; Freeze for Env&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for Logger","synthetic":true,"types":[]},{"text":"impl !Freeze for Builder","synthetic":true,"types":[]},{"text":"impl Freeze for Target","synthetic":true,"types":[]},{"text":"impl Freeze for WriteStyle","synthetic":true,"types":[]},{"text":"impl !Freeze for Filter","synthetic":true,"types":[]},{"text":"impl !Freeze for Builder","synthetic":true,"types":[]},{"text":"impl Freeze for Timestamp","synthetic":true,"types":[]},{"text":"impl Freeze for Style","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for StyledValue&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Formatter","synthetic":true,"types":[]},{"text":"impl Freeze for Color","synthetic":true,"types":[]},{"text":"impl Freeze for TimestampPrecision","synthetic":true,"types":[]}];
implementors["failure"] = [{"text":"impl !Freeze for Backtrace","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Compat&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; !Freeze for Context&lt;D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for SyncFailure&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;'f&gt; Freeze for Causes&lt;'f&gt;","synthetic":true,"types":[]}];
implementors["fallible_iterator"] = [{"text":"impl&lt;T, F&gt; Freeze for Map&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Freeze for Chain&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Cloned&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Convert&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Enumerate&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for Filter&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for FilterMap&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; Freeze for FlatMap&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as IntoFallibleIterator&gt;::IntoFallibleIter: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Flatten&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as FallibleIterator&gt;::Item as IntoFallibleIterator&gt;::IntoFallibleIter: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Fuse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for Inspect&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Iterator&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for MapErr&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Peekable&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as FallibleIterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Rev&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, St, F&gt; Freeze for Scan&lt;I, St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Skip&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Freeze for SkipWhile&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for StepBy&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Take&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Freeze for TakeWhile&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Cycle&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Freeze for Zip&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["flatbuffers"] = [{"text":"impl&lt;'fbb&gt; Freeze for FlatBufferBuilder&lt;'fbb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for FollowStart&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for TableFinishedWIPOffset","synthetic":true,"types":[]},{"text":"impl Freeze for TableUnfinishedWIPOffset","synthetic":true,"types":[]},{"text":"impl Freeze for UnionWIPOffset","synthetic":true,"types":[]},{"text":"impl Freeze for VTableWIPOffset","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for WIPOffset&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ForwardsUOffset&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ForwardsVOffset&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for BackwardsSOffset&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for SkipSizePrefix&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for SkipRootOffset&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for FileIdentifier","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for SkipFileIdentifier&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Table&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Vector&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for VectorIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'opts, 'buf&gt; Freeze for Verifier&lt;'opts, 'buf&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for VerifierOptions","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorTraceDetail","synthetic":true,"types":[]},{"text":"impl Freeze for InvalidFlatbuffer","synthetic":true,"types":[]}];
implementors["flate2"] = [{"text":"impl Freeze for Crc","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for CrcReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for CrcWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for GzBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for GzHeader","synthetic":true,"types":[]},{"text":"impl Freeze for Compress","synthetic":true,"types":[]},{"text":"impl Freeze for CompressError","synthetic":true,"types":[]},{"text":"impl Freeze for Decompress","synthetic":true,"types":[]},{"text":"impl Freeze for DecompressError","synthetic":true,"types":[]},{"text":"impl Freeze for Compression","synthetic":true,"types":[]},{"text":"impl Freeze for Status","synthetic":true,"types":[]},{"text":"impl Freeze for FlushCompress","synthetic":true,"types":[]},{"text":"impl Freeze for FlushDecompress","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DeflateEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DeflateDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DeflateEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DeflateDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for DeflateEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for DeflateDecoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for GzEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for GzDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for MultiGzDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for GzEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for GzDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for MultiGzDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for GzEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for GzDecoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for ZlibEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for ZlibDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for ZlibEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for ZlibDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for ZlibEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for ZlibDecoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["fnv"] = [{"text":"impl Freeze for FnvHasher","synthetic":true,"types":[]}];
implementors["foreign_types_shared"] = [{"text":"impl !Freeze for Opaque","synthetic":true,"types":[]}];
implementors["futures_channel"] = [{"text":"impl&lt;T&gt; Freeze for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for UnboundedSender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for UnboundedReceiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SendError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Cancellation&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Canceled","synthetic":true,"types":[]}];
implementors["futures_executor"] = [{"text":"impl&lt;S&gt; Freeze for BlockingStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Freeze for LocalPool","synthetic":true,"types":[]},{"text":"impl Freeze for LocalSpawner","synthetic":true,"types":[]},{"text":"impl Freeze for Enter","synthetic":true,"types":[]},{"text":"impl Freeze for EnterError","synthetic":true,"types":[]}];
implementors["futures_task"] = [{"text":"impl Freeze for SpawnError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for WakerRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for FutureObj&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for LocalFutureObj&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["futures_util"] = [{"text":"impl&lt;F&gt; Freeze for Flatten&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Output: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Freeze for Fuse&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Freeze for Inspect&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for IntoStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Freeze for Map&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Freeze for NeverError&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; Freeze for Then&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Freeze for UnitError&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, T&gt; Freeze for MapInto&lt;Fut, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for FlattenStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Output: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Freeze for CatchUnwind&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Freeze for Remote&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for RemoteHandle&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Freeze for Shared&lt;Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Freeze for WeakShared&lt;Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; Freeze for AndThen&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, E&gt; Freeze for ErrInto&lt;Fut, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, E&gt; Freeze for OkInto&lt;Fut, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Freeze for InspectErr&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Freeze for InspectOk&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Freeze for IntoFuture&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Freeze for MapErr&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Freeze for MapOk&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; Freeze for OrElse&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Freeze for TryFlattenStream&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as TryFuture&gt;::Ok: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Freeze for UnwrapOrElse&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F, G&gt; Freeze for MapOkOrElse&lt;Fut, F, G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2&gt; Freeze for TryFlatten&lt;Fut1, Fut2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, Si&gt; Freeze for FlattenSink&lt;Fut, Si&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for Lazy&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Pending&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for OptionFuture&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Ready&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2&gt; Freeze for Join&lt;Fut1, Fut2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3&gt; Freeze for Join3&lt;Fut1, Fut2, Fut3&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as Future&gt;::Output: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4&gt; Freeze for Join4&lt;Fut1, Fut2, Fut3, Fut4&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as Future&gt;::Output: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as Future&gt;::Output: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; Freeze for Join5&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut5: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as Future&gt;::Output: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as Future&gt;::Output: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut5 as Future&gt;::Output: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for JoinAll&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Freeze for Select&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Freeze for SelectAll&lt;Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2&gt; Freeze for TryJoin&lt;Fut1, Fut2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3&gt; Freeze for TryJoin3&lt;Fut1, Fut2, Fut3&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Ok: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4&gt; Freeze for TryJoin4&lt;Fut1, Fut2, Fut3, Fut4&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Ok: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as TryFuture&gt;::Ok: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; Freeze for TryJoin5&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut5: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Ok: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as TryFuture&gt;::Ok: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut5 as TryFuture&gt;::Ok: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for TryJoinAll&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Freeze for TrySelect&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Freeze for SelectOk&lt;Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Freeze for Abortable&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for AbortHandle","synthetic":true,"types":[]},{"text":"impl Freeze for AbortRegistration","synthetic":true,"types":[]},{"text":"impl Freeze for Aborted","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Freeze for MaybeDone&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as Future&gt;::Output: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Freeze for TryMaybeDone&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as TryFuture&gt;::Ok: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Freeze for Either&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St1, St2&gt; Freeze for Chain&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, C&gt; Freeze for Collect&lt;St, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Freeze for Concat&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Freeze for Cycle&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Freeze for Enumerate&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Freeze for Filter&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Freeze for FilterMap&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, U, F&gt; Freeze for FlatMap&lt;St, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Freeze for Flatten&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, T, F&gt; Freeze for Fold&lt;St, Fut, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Freeze for ForEach&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Freeze for Fuse&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Freeze for Inspect&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Freeze for Map&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St:&nbsp;?Sized&gt; Freeze for Next&lt;'a, St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, St&gt; Freeze for Peek&lt;'a, St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Freeze for Peekable&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, S, Fut, F&gt; Freeze for Scan&lt;St, S, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St:&nbsp;?Sized&gt; Freeze for SelectNextSome&lt;'a, St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Freeze for Skip&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Freeze for SkipWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Freeze for StreamFuture&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Freeze for Take&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut&gt; Freeze for TakeUntil&lt;St, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as Future&gt;::Output: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Freeze for TakeWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Freeze for Then&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, FromA, FromB&gt; Freeze for Unzip&lt;St, FromA, FromB&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;FromA: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;FromB: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St1, St2&gt; Freeze for Zip&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St1 as Stream&gt;::Item: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St2 as Stream&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Freeze for CatchUnwind&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Freeze for Chunks&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Freeze for ReadyChunks&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Si&gt; Freeze for Forward&lt;St, Si&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; !Freeze for BufferUnordered&lt;St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; !Freeze for Buffered&lt;St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; !Freeze for ForEachConcurrent&lt;St, Fut, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, Item&gt; Freeze for ReuniteError&lt;T, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, Item&gt; Freeze for SplitSink&lt;S, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for SplitStream&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Freeze for AndThen&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, E&gt; Freeze for ErrInto&lt;St, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Freeze for InspectErr&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Freeze for InspectOk&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Freeze for IntoStream&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Freeze for MapErr&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Freeze for MapOk&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Freeze for OrElse&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, C&gt; Freeze for TryCollect&lt;St, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Freeze for TryConcat&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Freeze for TryFilter&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Freeze for TryFilterMap&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Freeze for TryFlatten&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, T, F&gt; Freeze for TryFold&lt;St, Fut, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Freeze for TryForEach&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St:&nbsp;?Sized&gt; Freeze for TryNext&lt;'a, St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Freeze for TrySkipWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Freeze for TryTakeWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, Fut&gt; Freeze for TryUnfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Freeze for IntoAsyncRead&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; !Freeze for TryBufferUnordered&lt;St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; !Freeze for TryBuffered&lt;St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; !Freeze for TryForEachConcurrent&lt;St, Fut, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Iter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Repeat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for RepeatWith&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Empty&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Freeze for Once&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Pending&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St1, St2&gt; Freeze for Select&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, Fut&gt; Freeze for Unfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for FuturesOrdered&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; !Freeze for FuturesUnordered&lt;Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; !Freeze for SelectAll&lt;St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; Freeze for Iter&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; Freeze for IterMut&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; Freeze for IterPinMut&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; Freeze for IterPinRef&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si:&nbsp;?Sized, Item&gt; Freeze for Close&lt;'a, Si, Item&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Drain&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Si1, Si2&gt; Freeze for Fanout&lt;Si1, Si2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si2: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si:&nbsp;?Sized, Item&gt; Freeze for Feed&lt;'a, Si, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si:&nbsp;?Sized, Item&gt; Freeze for Flush&lt;'a, Si, Item&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item, E&gt; Freeze for SinkErrInto&lt;Si, Item, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, F&gt; Freeze for SinkMapErr&lt;Si, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si:&nbsp;?Sized, Item&gt; Freeze for Send&lt;'a, Si, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si:&nbsp;?Sized, St:&nbsp;?Sized&gt; Freeze for SendAll&lt;'a, Si, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, R&gt; Freeze for Unfold&lt;T, F, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item, U, Fut, F&gt; Freeze for With&lt;Si, Item, U, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item, U, St, F&gt; Freeze for WithFlatMap&lt;Si, Item, U, St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item&gt; Freeze for Buffer&lt;Si, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for AllowStdIo&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for BufReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for BufWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Freeze for Chain&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; Freeze for Close&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, W:&nbsp;?Sized&gt; Freeze for Copy&lt;'a, R, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, W:&nbsp;?Sized&gt; Freeze for CopyBuf&lt;'a, R, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Cursor&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Empty","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Freeze for FillBuf&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; Freeze for Flush&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W, Item&gt; Freeze for IntoSink&lt;W, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Lines&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Freeze for Read&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Freeze for ReadVectored&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Freeze for ReadExact&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Freeze for ReadLine&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Freeze for ReadToEnd&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Freeze for ReadToString&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Freeze for ReadUntil&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Repeat","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; Freeze for Seek&lt;'a, S&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Sink","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ReadHalf&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for WriteHalf&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ReuniteError&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Take&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Window&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; Freeze for Write&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; Freeze for WriteVectored&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; Freeze for WriteAll&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized, U:&nbsp;?Sized&gt; Freeze for MappedMutexGuard&lt;'a, T, U&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Mutex&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for MutexLockFuture&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for MutexGuard&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["generic_array"] = [{"text":"impl&lt;T, U&gt; Freeze for GenericArray&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as ArrayLength&lt;T&gt;&gt;::ArrayType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, N&gt; Freeze for GenericArrayIter&lt;T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ArrayLength&lt;T&gt;&gt;::ArrayType: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["getrandom"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["gimli"] = [{"text":"impl Freeze for Encoding","synthetic":true,"types":[]},{"text":"impl Freeze for LineEncoding","synthetic":true,"types":[]},{"text":"impl Freeze for Register","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DebugAbbrevOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DebugAddrBase&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DebugAddrIndex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DebugInfoOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DebugLineOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DebugLineStrOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for LocationListsOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DebugLocListsBase&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DebugLocListsIndex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DebugMacinfoOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DebugMacroOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for RangeListsOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DebugRngListsBase&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DebugRngListsIndex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DebugStrOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DebugStrOffsetsBase&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DebugStrOffsetsIndex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DebugTypesOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for DebugTypeSignature","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DebugFrameOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for EhFrameOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for DwoId","synthetic":true,"types":[]},{"text":"impl Freeze for Arm","synthetic":true,"types":[]},{"text":"impl Freeze for X86","synthetic":true,"types":[]},{"text":"impl Freeze for X86_64","synthetic":true,"types":[]},{"text":"impl Freeze for BigEndian","synthetic":true,"types":[]},{"text":"impl Freeze for LittleEndian","synthetic":true,"types":[]},{"text":"impl Freeze for Format","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for UnitSectionOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for SectionId","synthetic":true,"types":[]},{"text":"impl Freeze for DwarfFileType","synthetic":true,"types":[]},{"text":"impl Freeze for RunTimeEndian","synthetic":true,"types":[]},{"text":"impl Freeze for DwUt","synthetic":true,"types":[]},{"text":"impl Freeze for DwCfa","synthetic":true,"types":[]},{"text":"impl Freeze for DwChildren","synthetic":true,"types":[]},{"text":"impl Freeze for DwTag","synthetic":true,"types":[]},{"text":"impl Freeze for DwAt","synthetic":true,"types":[]},{"text":"impl Freeze for DwForm","synthetic":true,"types":[]},{"text":"impl Freeze for DwAte","synthetic":true,"types":[]},{"text":"impl Freeze for DwLle","synthetic":true,"types":[]},{"text":"impl Freeze for DwDs","synthetic":true,"types":[]},{"text":"impl Freeze for DwEnd","synthetic":true,"types":[]},{"text":"impl Freeze for DwAccess","synthetic":true,"types":[]},{"text":"impl Freeze for DwVis","synthetic":true,"types":[]},{"text":"impl Freeze for DwVirtuality","synthetic":true,"types":[]},{"text":"impl Freeze for DwLang","synthetic":true,"types":[]},{"text":"impl Freeze for DwAddr","synthetic":true,"types":[]},{"text":"impl Freeze for DwId","synthetic":true,"types":[]},{"text":"impl Freeze for DwCc","synthetic":true,"types":[]},{"text":"impl Freeze for DwInl","synthetic":true,"types":[]},{"text":"impl Freeze for DwOrd","synthetic":true,"types":[]},{"text":"impl Freeze for DwDsc","synthetic":true,"types":[]},{"text":"impl Freeze for DwIdx","synthetic":true,"types":[]},{"text":"impl Freeze for DwDefaulted","synthetic":true,"types":[]},{"text":"impl Freeze for DwLns","synthetic":true,"types":[]},{"text":"impl Freeze for DwLne","synthetic":true,"types":[]},{"text":"impl Freeze for DwLnct","synthetic":true,"types":[]},{"text":"impl Freeze for DwMacro","synthetic":true,"types":[]},{"text":"impl Freeze for DwRle","synthetic":true,"types":[]},{"text":"impl Freeze for DwOp","synthetic":true,"types":[]},{"text":"impl Freeze for DwEhPe","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DebugAddr&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DebugFrame&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for EhFrameHdr&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for ParsedEhFrameHdr&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; Freeze for EhHdrTable&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for EhFrame&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for BaseAddresses","synthetic":true,"types":[]},{"text":"impl Freeze for SectionBaseAddresses","synthetic":true,"types":[]},{"text":"impl&lt;'bases, Section, R&gt; Freeze for CfiEntriesIter&lt;'bases, Section, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Section: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Augmentation","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Freeze for CommonInformationEntry&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'bases, Section, R&gt; Freeze for PartialFrameDescriptionEntry&lt;'bases, Section, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Section: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Section as UnwindSection&lt;R&gt;&gt;::Offset: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Freeze for FrameDescriptionEntry&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for UninitializedUnwindContext&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for UnwindContext&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; Freeze for UnwindTable&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'iter, R&gt; Freeze for RegisterRuleIter&lt;'iter, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for UnwindTableRow&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; Freeze for CallFrameInstructionIter&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Dwarf&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Freeze for Unit&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for RangeIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'input, Endian&gt; Freeze for EndianSlice&lt;'input, Endian&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Endian: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ReaderOffsetId","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DebugAbbrev&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Abbreviations","synthetic":true,"types":[]},{"text":"impl Freeze for Abbreviation","synthetic":true,"types":[]},{"text":"impl Freeze for AttributeSpecification","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ArangeEntry&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DebugAranges&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for ArangeEntryIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DebugLine&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Program, Offset&gt; Freeze for LineRows&lt;R, Program, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Program: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for LineInstructions&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for LineRow","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for LineSequence&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Freeze for LineProgramHeader&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Freeze for IncompleteLineProgram&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Freeze for CompleteLineProgram&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Freeze for FileEntry&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for FileEntryFormat","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DebugLoc&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DebugLocLists&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for LocationLists&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for RawLocListIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for LocListIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for LocationListEntry&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Freeze for Piece&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Expression&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for OperationIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Evaluation&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for PubNamesEntry&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DebugPubNames&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for PubNamesEntryIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for PubTypesEntry&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DebugPubTypes&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for PubTypesEntryIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DebugRanges&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DebugRngLists&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for RangeLists&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for RawRngListIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for RngListIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Range","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DebugStr&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DebugStrOffsets&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DebugLineStr&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for UnitOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DebugInfo&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DebugInfoUnitHeadersIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Freeze for UnitHeader&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'abbrev, 'unit, R, Offset&nbsp;=&nbsp;&lt;R as Reader&gt;::Offset&gt; !Freeze for DebuggingInformationEntry&lt;'abbrev, 'unit, R, Offset&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Attribute&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'abbrev, 'entry, 'unit, R&gt; Freeze for AttrsIter&lt;'abbrev, 'entry, 'unit, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'abbrev, 'unit, R&gt; Freeze for EntriesRaw&lt;'abbrev, 'unit, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'abbrev, 'unit, R&gt; !Freeze for EntriesCursor&lt;'abbrev, 'unit, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'abbrev, 'unit, R&gt; !Freeze for EntriesTree&lt;'abbrev, 'unit, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'abbrev, 'unit, 'tree, R&gt; Freeze for EntriesTreeNode&lt;'abbrev, 'unit, 'tree, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'abbrev, 'unit, 'tree, R&gt; Freeze for EntriesTreeIter&lt;'abbrev, 'unit, 'tree, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DebugTypes&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DebugTypesUnitHeadersIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'bases, Section, R&gt; Freeze for CieOrFde&lt;'bases, Section, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Section: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Section as UnwindSection&lt;R&gt;&gt;::Offset: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for CfaRule&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for RegisterRule&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for CallFrameInstruction&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Pointer","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Freeze for LineInstruction&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ColumnType","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for RawLocListEntry&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DieReference&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Freeze for Operation&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Freeze for Location&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for EvaluationResult&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for RawRngListEntry&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Offset&gt; Freeze for UnitType&lt;Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Freeze for AttributeValue&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ValueType","synthetic":true,"types":[]},{"text":"impl Freeze for Value","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["hashbrown"] = [{"text":"impl&lt;K, V, S&gt; Freeze for HashMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Freeze for HashSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for TryReserveError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Bucket&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for RawTable&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for RawIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for RawIntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for RawDrain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for RawIterHash&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Freeze for IntoIter&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Keys&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Values&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Drain&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, F&gt; Freeze for DrainFilter&lt;'a, K, V, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for ValuesMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for RawEntryBuilderMut&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for RawOccupiedEntryMut&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for RawVacantEntryMut&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for RawEntryBuilder&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for OccupiedEntry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for VacantEntry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for DefaultHashBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for RawEntryMut&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for Entry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; Freeze for Iter&lt;'a, K&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Freeze for IntoIter&lt;K&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; Freeze for Drain&lt;'a, K&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, F&gt; Freeze for DrainFilter&lt;'a, K, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Freeze for Intersection&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Freeze for Difference&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Freeze for SymmetricDifference&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Freeze for Union&lt;'a, T, S&gt;","synthetic":true,"types":[]}];
implementors["hex"] = [{"text":"impl Freeze for FromHexError","synthetic":true,"types":[]}];
implementors["hmac"] = [{"text":"impl&lt;D&gt; Freeze for Hmac&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;D as BlockInput&gt;::BlockSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["http"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Extensions","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Drain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for GetAll&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for HeaderMap&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Keys&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for OccupiedEntry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Freeze for VacantEntry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for ValueDrain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for ValueIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for ValueIterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Values&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for ValuesMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for HeaderName","synthetic":true,"types":[]},{"text":"impl Freeze for InvalidHeaderName","synthetic":true,"types":[]},{"text":"impl !Freeze for HeaderValue","synthetic":true,"types":[]},{"text":"impl Freeze for InvalidHeaderValue","synthetic":true,"types":[]},{"text":"impl Freeze for ToStrError","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Freeze for Entry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Method","synthetic":true,"types":[]},{"text":"impl Freeze for InvalidMethod","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Request&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for Parts","synthetic":true,"types":[]},{"text":"impl !Freeze for Builder","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Response&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Parts","synthetic":true,"types":[]},{"text":"impl Freeze for Builder","synthetic":true,"types":[]},{"text":"impl Freeze for StatusCode","synthetic":true,"types":[]},{"text":"impl Freeze for InvalidStatusCode","synthetic":true,"types":[]},{"text":"impl !Freeze for Authority","synthetic":true,"types":[]},{"text":"impl !Freeze for Builder","synthetic":true,"types":[]},{"text":"impl !Freeze for PathAndQuery","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Port&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Scheme","synthetic":true,"types":[]},{"text":"impl !Freeze for Uri","synthetic":true,"types":[]},{"text":"impl !Freeze for Parts","synthetic":true,"types":[]},{"text":"impl Freeze for InvalidUri","synthetic":true,"types":[]},{"text":"impl Freeze for InvalidUriParts","synthetic":true,"types":[]},{"text":"impl Freeze for Version","synthetic":true,"types":[]}];
implementors["http_body"] = [{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for Data&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for Trailers&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SizeHint","synthetic":true,"types":[]}];
implementors["httparse"] = [{"text":"impl Freeze for InvalidChunkSize","synthetic":true,"types":[]},{"text":"impl&lt;'headers, 'buf&gt; Freeze for Request&lt;'headers, 'buf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'headers, 'buf&gt; Freeze for Response&lt;'headers, 'buf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Header&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Status&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["httpdate"] = [{"text":"impl Freeze for HttpDate","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["humantime"] = [{"text":"impl Freeze for FormattedDuration","synthetic":true,"types":[]},{"text":"impl Freeze for Duration","synthetic":true,"types":[]},{"text":"impl Freeze for Timestamp","synthetic":true,"types":[]},{"text":"impl Freeze for Rfc3339Timestamp","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["hyper"] = [{"text":"impl !Freeze for Body","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Sender","synthetic":true,"types":[]},{"text":"impl !Freeze for Upgraded","synthetic":true,"types":[]},{"text":"impl Freeze for OnUpgrade","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Parts&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for HttpConnector&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Builder","synthetic":true,"types":[]},{"text":"impl&lt;C, B&gt; Freeze for Client&lt;C, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ResponseFuture","synthetic":true,"types":[]},{"text":"impl Freeze for HttpInfo","synthetic":true,"types":[]},{"text":"impl Freeze for Connected","synthetic":true,"types":[]},{"text":"impl Freeze for Name","synthetic":true,"types":[]},{"text":"impl Freeze for GaiResolver","synthetic":true,"types":[]},{"text":"impl Freeze for GaiAddrs","synthetic":true,"types":[]},{"text":"impl Freeze for GaiFuture","synthetic":true,"types":[]},{"text":"impl Freeze for InvalidNameError","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for SendRequest&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, B&gt; Freeze for Connection&lt;T, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Builder","synthetic":true,"types":[]},{"text":"impl Freeze for ResponseFuture","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Parts&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;C, B, T&gt; Freeze for Connect&lt;C, B, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["hyper_tls"] = [{"text":"impl&lt;T&gt; Freeze for HttpsConnecting&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for HttpsConnector&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for MaybeHttpsStream&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["indexmap"] = [{"text":"impl&lt;'a, K, V&gt; Freeze for OccupiedEntry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for VacantEntry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V, S&gt; Freeze for IndexMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Keys&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Values&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for ValuesMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Freeze for IntoIter&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Drain&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Entry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Freeze for IndexSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Drain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Freeze for Difference&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Freeze for Intersection&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S1, S2&gt; Freeze for SymmetricDifference&lt;'a, T, S1, S2&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Freeze for Union&lt;'a, T, S&gt;","synthetic":true,"types":[]}];
implementors["itertools"] = [{"text":"impl&lt;I, J&gt; Freeze for Diff&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for MinMaxResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Position&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Freeze for EitherOrBoth&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for FoldWhile&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Freeze for Interleave&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Freeze for InterleaveShortest&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for FilterMapOk&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for FilterOk&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Freeze for Product&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for PutBack&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for Batching&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J, F&gt; Freeze for MergeBy&lt;I, J, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; Freeze for TakeWhileRef&lt;'a, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for WhileSome&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Freeze for TupleCombinations&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as HasCombination&lt;I&gt;&gt;::Combination: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for Positions&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for Update&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Step&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for MultiProduct&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Combinations&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for CombinationsWithReplacement&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Freeze for ConsTuples&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for ExactlyOneError&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; !Freeze for Format&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; !Freeze for FormatWith&lt;'a, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for GroupingMap&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !Freeze for IntoChunks&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Freeze for Chunk&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Freeze for Chunks&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, I, F&gt; !Freeze for GroupBy&lt;K, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, I, F&gt; Freeze for Group&lt;'a, K, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, I, F&gt; Freeze for Groups&lt;'a, K, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, ElemF&gt; Freeze for IntersperseWith&lt;I, ElemF&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;ElemF: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for KMergeBy&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J, F&gt; Freeze for MergeJoinBy&lt;I, J, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for MultiPeek&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for PeekNth&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for PadUsing&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; Freeze for PeekingTakeWhile&lt;'a, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Permutations&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, E&gt; Freeze for ProcessResults&lt;'a, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Powerset&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for PutBackN&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for RcIter&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for RepeatN&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for RepeatCall&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Freeze for Unfold&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Freeze for Iterate&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Tee&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for TupleBuffer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as TupleCollect&gt;::Buffer: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Freeze for TupleWindows&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Freeze for CircularTupleWindows&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Freeze for Tuples&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as TupleCollect&gt;::Buffer: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Unique&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, V, F&gt; Freeze for UniqueBy&lt;I, V, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for WithPosition&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Freeze for ZipEq&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Freeze for ZipLongest&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Zip&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["itoa"] = [{"text":"impl Freeze for Buffer","synthetic":true,"types":[]}];
implementors["lexical_core"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorCode","synthetic":true,"types":[]}];
implementors["libc"] = [{"text":"impl Freeze for group","synthetic":true,"types":[]},{"text":"impl Freeze for utimbuf","synthetic":true,"types":[]},{"text":"impl Freeze for timeval","synthetic":true,"types":[]},{"text":"impl Freeze for timespec","synthetic":true,"types":[]},{"text":"impl Freeze for rlimit","synthetic":true,"types":[]},{"text":"impl Freeze for rusage","synthetic":true,"types":[]},{"text":"impl Freeze for ipv6_mreq","synthetic":true,"types":[]},{"text":"impl Freeze for hostent","synthetic":true,"types":[]},{"text":"impl Freeze for iovec","synthetic":true,"types":[]},{"text":"impl Freeze for pollfd","synthetic":true,"types":[]},{"text":"impl Freeze for winsize","synthetic":true,"types":[]},{"text":"impl Freeze for linger","synthetic":true,"types":[]},{"text":"impl Freeze for sigval","synthetic":true,"types":[]},{"text":"impl Freeze for itimerval","synthetic":true,"types":[]},{"text":"impl Freeze for tms","synthetic":true,"types":[]},{"text":"impl Freeze for servent","synthetic":true,"types":[]},{"text":"impl Freeze for protoent","synthetic":true,"types":[]},{"text":"impl Freeze for in_addr","synthetic":true,"types":[]},{"text":"impl Freeze for ip_mreq","synthetic":true,"types":[]},{"text":"impl Freeze for ip_mreq_source","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_in","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_in6","synthetic":true,"types":[]},{"text":"impl Freeze for addrinfo","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_ll","synthetic":true,"types":[]},{"text":"impl Freeze for fd_set","synthetic":true,"types":[]},{"text":"impl Freeze for tm","synthetic":true,"types":[]},{"text":"impl Freeze for sched_param","synthetic":true,"types":[]},{"text":"impl Freeze for Dl_info","synthetic":true,"types":[]},{"text":"impl Freeze for lconv","synthetic":true,"types":[]},{"text":"impl Freeze for in_pktinfo","synthetic":true,"types":[]},{"text":"impl Freeze for ifaddrs","synthetic":true,"types":[]},{"text":"impl Freeze for in6_rtmsg","synthetic":true,"types":[]},{"text":"impl Freeze for arpreq","synthetic":true,"types":[]},{"text":"impl Freeze for arpreq_old","synthetic":true,"types":[]},{"text":"impl Freeze for arphdr","synthetic":true,"types":[]},{"text":"impl Freeze for mmsghdr","synthetic":true,"types":[]},{"text":"impl Freeze for epoll_event","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_un","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_storage","synthetic":true,"types":[]},{"text":"impl Freeze for utsname","synthetic":true,"types":[]},{"text":"impl Freeze for sigevent","synthetic":true,"types":[]},{"text":"impl Freeze for rlimit64","synthetic":true,"types":[]},{"text":"impl Freeze for glob_t","synthetic":true,"types":[]},{"text":"impl Freeze for passwd","synthetic":true,"types":[]},{"text":"impl Freeze for spwd","synthetic":true,"types":[]},{"text":"impl Freeze for dqblk","synthetic":true,"types":[]},{"text":"impl Freeze for signalfd_siginfo","synthetic":true,"types":[]},{"text":"impl Freeze for itimerspec","synthetic":true,"types":[]},{"text":"impl Freeze for fsid_t","synthetic":true,"types":[]},{"text":"impl Freeze for packet_mreq","synthetic":true,"types":[]},{"text":"impl Freeze for cpu_set_t","synthetic":true,"types":[]},{"text":"impl Freeze for if_nameindex","synthetic":true,"types":[]},{"text":"impl Freeze for msginfo","synthetic":true,"types":[]},{"text":"impl Freeze for sembuf","synthetic":true,"types":[]},{"text":"impl Freeze for input_event","synthetic":true,"types":[]},{"text":"impl Freeze for input_id","synthetic":true,"types":[]},{"text":"impl Freeze for input_absinfo","synthetic":true,"types":[]},{"text":"impl Freeze for input_keymap_entry","synthetic":true,"types":[]},{"text":"impl Freeze for input_mask","synthetic":true,"types":[]},{"text":"impl Freeze for ff_replay","synthetic":true,"types":[]},{"text":"impl Freeze for ff_trigger","synthetic":true,"types":[]},{"text":"impl Freeze for ff_envelope","synthetic":true,"types":[]},{"text":"impl Freeze for ff_constant_effect","synthetic":true,"types":[]},{"text":"impl Freeze for ff_ramp_effect","synthetic":true,"types":[]},{"text":"impl Freeze for ff_condition_effect","synthetic":true,"types":[]},{"text":"impl Freeze for ff_periodic_effect","synthetic":true,"types":[]},{"text":"impl Freeze for ff_rumble_effect","synthetic":true,"types":[]},{"text":"impl Freeze for ff_effect","synthetic":true,"types":[]},{"text":"impl Freeze for dl_phdr_info","synthetic":true,"types":[]},{"text":"impl Freeze for Elf32_Ehdr","synthetic":true,"types":[]},{"text":"impl Freeze for Elf64_Ehdr","synthetic":true,"types":[]},{"text":"impl Freeze for Elf32_Sym","synthetic":true,"types":[]},{"text":"impl Freeze for Elf64_Sym","synthetic":true,"types":[]},{"text":"impl Freeze for Elf32_Phdr","synthetic":true,"types":[]},{"text":"impl Freeze for Elf64_Phdr","synthetic":true,"types":[]},{"text":"impl Freeze for Elf32_Shdr","synthetic":true,"types":[]},{"text":"impl Freeze for Elf64_Shdr","synthetic":true,"types":[]},{"text":"impl Freeze for Elf32_Chdr","synthetic":true,"types":[]},{"text":"impl Freeze for Elf64_Chdr","synthetic":true,"types":[]},{"text":"impl Freeze for ucred","synthetic":true,"types":[]},{"text":"impl Freeze for mntent","synthetic":true,"types":[]},{"text":"impl Freeze for posix_spawn_file_actions_t","synthetic":true,"types":[]},{"text":"impl Freeze for posix_spawnattr_t","synthetic":true,"types":[]},{"text":"impl Freeze for genlmsghdr","synthetic":true,"types":[]},{"text":"impl Freeze for in6_pktinfo","synthetic":true,"types":[]},{"text":"impl Freeze for arpd_request","synthetic":true,"types":[]},{"text":"impl Freeze for inotify_event","synthetic":true,"types":[]},{"text":"impl Freeze for fanotify_response","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_vm","synthetic":true,"types":[]},{"text":"impl Freeze for regmatch_t","synthetic":true,"types":[]},{"text":"impl Freeze for sock_extended_err","synthetic":true,"types":[]},{"text":"impl Freeze for __c_anonymous_sockaddr_can_tp","synthetic":true,"types":[]},{"text":"impl Freeze for __c_anonymous_sockaddr_can_j1939","synthetic":true,"types":[]},{"text":"impl Freeze for can_filter","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_nl","synthetic":true,"types":[]},{"text":"impl Freeze for dirent","synthetic":true,"types":[]},{"text":"impl Freeze for dirent64","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_alg","synthetic":true,"types":[]},{"text":"impl Freeze for af_alg_iv","synthetic":true,"types":[]},{"text":"impl Freeze for mq_attr","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_can","synthetic":true,"types":[]},{"text":"impl Freeze for statx","synthetic":true,"types":[]},{"text":"impl Freeze for statx_timestamp","synthetic":true,"types":[]},{"text":"impl Freeze for aiocb","synthetic":true,"types":[]},{"text":"impl Freeze for __exit_status","synthetic":true,"types":[]},{"text":"impl Freeze for __timeval","synthetic":true,"types":[]},{"text":"impl Freeze for glob64_t","synthetic":true,"types":[]},{"text":"impl Freeze for msghdr","synthetic":true,"types":[]},{"text":"impl Freeze for cmsghdr","synthetic":true,"types":[]},{"text":"impl Freeze for termios","synthetic":true,"types":[]},{"text":"impl Freeze for mallinfo","synthetic":true,"types":[]},{"text":"impl Freeze for nlmsghdr","synthetic":true,"types":[]},{"text":"impl Freeze for nlmsgerr","synthetic":true,"types":[]},{"text":"impl Freeze for nl_pktinfo","synthetic":true,"types":[]},{"text":"impl Freeze for nl_mmap_req","synthetic":true,"types":[]},{"text":"impl Freeze for nl_mmap_hdr","synthetic":true,"types":[]},{"text":"impl Freeze for nlattr","synthetic":true,"types":[]},{"text":"impl Freeze for rtentry","synthetic":true,"types":[]},{"text":"impl Freeze for timex","synthetic":true,"types":[]},{"text":"impl Freeze for ntptimeval","synthetic":true,"types":[]},{"text":"impl Freeze for regex_t","synthetic":true,"types":[]},{"text":"impl Freeze for utmpx","synthetic":true,"types":[]},{"text":"impl Freeze for sigset_t","synthetic":true,"types":[]},{"text":"impl Freeze for sysinfo","synthetic":true,"types":[]},{"text":"impl Freeze for msqid_ds","synthetic":true,"types":[]},{"text":"impl Freeze for sigaction","synthetic":true,"types":[]},{"text":"impl Freeze for statfs","synthetic":true,"types":[]},{"text":"impl Freeze for flock","synthetic":true,"types":[]},{"text":"impl Freeze for flock64","synthetic":true,"types":[]},{"text":"impl Freeze for siginfo_t","synthetic":true,"types":[]},{"text":"impl Freeze for stack_t","synthetic":true,"types":[]},{"text":"impl Freeze for stat","synthetic":true,"types":[]},{"text":"impl Freeze for stat64","synthetic":true,"types":[]},{"text":"impl Freeze for statfs64","synthetic":true,"types":[]},{"text":"impl Freeze for statvfs64","synthetic":true,"types":[]},{"text":"impl Freeze for pthread_attr_t","synthetic":true,"types":[]},{"text":"impl Freeze for _libc_fpxreg","synthetic":true,"types":[]},{"text":"impl Freeze for _libc_xmmreg","synthetic":true,"types":[]},{"text":"impl Freeze for _libc_fpstate","synthetic":true,"types":[]},{"text":"impl Freeze for user_regs_struct","synthetic":true,"types":[]},{"text":"impl Freeze for user","synthetic":true,"types":[]},{"text":"impl Freeze for mcontext_t","synthetic":true,"types":[]},{"text":"impl Freeze for ipc_perm","synthetic":true,"types":[]},{"text":"impl Freeze for shmid_ds","synthetic":true,"types":[]},{"text":"impl Freeze for termios2","synthetic":true,"types":[]},{"text":"impl Freeze for ip_mreqn","synthetic":true,"types":[]},{"text":"impl Freeze for user_fpregs_struct","synthetic":true,"types":[]},{"text":"impl Freeze for ucontext_t","synthetic":true,"types":[]},{"text":"impl Freeze for statvfs","synthetic":true,"types":[]},{"text":"impl Freeze for max_align_t","synthetic":true,"types":[]},{"text":"impl Freeze for sem_t","synthetic":true,"types":[]},{"text":"impl Freeze for pthread_mutexattr_t","synthetic":true,"types":[]},{"text":"impl Freeze for pthread_rwlockattr_t","synthetic":true,"types":[]},{"text":"impl Freeze for pthread_condattr_t","synthetic":true,"types":[]},{"text":"impl Freeze for fanotify_event_metadata","synthetic":true,"types":[]},{"text":"impl Freeze for pthread_cond_t","synthetic":true,"types":[]},{"text":"impl Freeze for pthread_mutex_t","synthetic":true,"types":[]},{"text":"impl Freeze for pthread_rwlock_t","synthetic":true,"types":[]},{"text":"impl Freeze for can_frame","synthetic":true,"types":[]},{"text":"impl Freeze for canfd_frame","synthetic":true,"types":[]},{"text":"impl Freeze for in6_addr","synthetic":true,"types":[]},{"text":"impl Freeze for __c_anonymous_sockaddr_can_can_addr","synthetic":true,"types":[]},{"text":"impl Freeze for DIR","synthetic":true,"types":[]},{"text":"impl Freeze for FILE","synthetic":true,"types":[]},{"text":"impl Freeze for fpos_t","synthetic":true,"types":[]},{"text":"impl Freeze for timezone","synthetic":true,"types":[]},{"text":"impl Freeze for fpos64_t","synthetic":true,"types":[]}];
implementors["lock_api"] = [{"text":"impl Freeze for GuardSend","synthetic":true,"types":[]},{"text":"impl Freeze for GuardNoSend","synthetic":true,"types":[]},{"text":"impl&lt;R, T&gt; !Freeze for Mutex&lt;R, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Freeze for MutexGuard&lt;'a, R, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Freeze for MappedMutexGuard&lt;'a, R, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R, G&gt; !Freeze for RawReentrantMutex&lt;R, G&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R, G, T&gt; !Freeze for ReentrantMutex&lt;R, G, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, G, T:&nbsp;?Sized&gt; Freeze for ReentrantMutexGuard&lt;'a, R, G, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, G, T:&nbsp;?Sized&gt; Freeze for MappedReentrantMutexGuard&lt;'a, R, G, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R, T&gt; !Freeze for RwLock&lt;R, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Freeze for RwLockReadGuard&lt;'a, R, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Freeze for RwLockWriteGuard&lt;'a, R, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Freeze for RwLockUpgradableReadGuard&lt;'a, R, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Freeze for MappedRwLockReadGuard&lt;'a, R, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Freeze for MappedRwLockWriteGuard&lt;'a, R, T&gt;","synthetic":true,"types":[]}];
implementors["log"] = [{"text":"impl&lt;'a&gt; Freeze for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for RecordBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Metadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for MetadataBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SetLoggerError","synthetic":true,"types":[]},{"text":"impl Freeze for ParseLevelError","synthetic":true,"types":[]},{"text":"impl Freeze for Level","synthetic":true,"types":[]},{"text":"impl Freeze for LevelFilter","synthetic":true,"types":[]}];
implementors["md5"] = [{"text":"impl Freeze for Digest","synthetic":true,"types":[]},{"text":"impl Freeze for Context","synthetic":true,"types":[]}];
implementors["memchr"] = [{"text":"impl&lt;'a&gt; Freeze for Memchr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Memchr2&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Memchr3&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["miniz_oxide"] = [{"text":"impl Freeze for StreamResult","synthetic":true,"types":[]},{"text":"impl Freeze for MZFlush","synthetic":true,"types":[]},{"text":"impl Freeze for MZStatus","synthetic":true,"types":[]},{"text":"impl Freeze for MZError","synthetic":true,"types":[]},{"text":"impl Freeze for DataFormat","synthetic":true,"types":[]},{"text":"impl Freeze for CompressionLevel","synthetic":true,"types":[]},{"text":"impl Freeze for CompressorOxide","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for CallbackFunc&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for CompressionStrategy","synthetic":true,"types":[]},{"text":"impl Freeze for TDEFLFlush","synthetic":true,"types":[]},{"text":"impl Freeze for TDEFLStatus","synthetic":true,"types":[]},{"text":"impl Freeze for TINFLStatus","synthetic":true,"types":[]},{"text":"impl Freeze for DecompressorOxide","synthetic":true,"types":[]},{"text":"impl Freeze for MinReset","synthetic":true,"types":[]},{"text":"impl Freeze for ZeroReset","synthetic":true,"types":[]},{"text":"impl Freeze for FullReset","synthetic":true,"types":[]},{"text":"impl Freeze for InflateState","synthetic":true,"types":[]}];
implementors["mio"] = [{"text":"impl Freeze for Interest","synthetic":true,"types":[]},{"text":"impl !Freeze for Poll","synthetic":true,"types":[]},{"text":"impl !Freeze for Registry","synthetic":true,"types":[]},{"text":"impl Freeze for Token","synthetic":true,"types":[]},{"text":"impl Freeze for Waker","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SourceFd&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SocketAddr","synthetic":true,"types":[]},{"text":"impl !Freeze for Sender","synthetic":true,"types":[]},{"text":"impl !Freeze for Receiver","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for Events","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for TcpListener","synthetic":true,"types":[]},{"text":"impl Freeze for TcpSocket","synthetic":true,"types":[]},{"text":"impl !Freeze for TcpStream","synthetic":true,"types":[]},{"text":"impl Freeze for TcpKeepalive","synthetic":true,"types":[]},{"text":"impl !Freeze for UdpSocket","synthetic":true,"types":[]},{"text":"impl !Freeze for UnixDatagram","synthetic":true,"types":[]},{"text":"impl !Freeze for UnixListener","synthetic":true,"types":[]},{"text":"impl !Freeze for UnixStream","synthetic":true,"types":[]}];
implementors["native_tls"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Identity","synthetic":true,"types":[]},{"text":"impl Freeze for Certificate","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for MidHandshakeTlsStream&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for TlsConnectorBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for TlsConnector","synthetic":true,"types":[]},{"text":"impl Freeze for TlsAcceptorBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for TlsAcceptor","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for TlsStream&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for HandshakeError&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Protocol","synthetic":true,"types":[]}];
implementors["ndarray"] = [{"text":"impl&lt;I:&nbsp;?Sized&gt; Freeze for Dim&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Axis","synthetic":true,"types":[]},{"text":"impl Freeze for AxisDescription","synthetic":true,"types":[]},{"text":"impl Freeze for IxDynImpl","synthetic":true,"types":[]},{"text":"impl Freeze for ShapeError","synthetic":true,"types":[]},{"text":"impl Freeze for Slice","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized, D&gt; Freeze for SliceInfo&lt;T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Parts, D&gt; Freeze for Zip&lt;Parts, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Parts: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, D&gt; Freeze for ArrayBase&lt;S, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for OwnedRepr&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for OwnedArcRepr&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for RawViewRepr&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for ViewRepr&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Freeze for Shape&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Freeze for StrideShape&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorKind","synthetic":true,"types":[]},{"text":"impl Freeze for SliceOrIndex","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for FoldWhile&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; Freeze for CowRepr&lt;'a, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, D&gt; Freeze for Axes&lt;'a, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Freeze for Indices&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Freeze for IndicesIter&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Freeze for AxisChunksIter&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Freeze for AxisChunksIterMut&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Freeze for AxisIter&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Freeze for AxisIterMut&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Freeze for ExactChunks&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Freeze for ExactChunksIter&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Freeze for ExactChunksIterMut&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Freeze for ExactChunksMut&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Freeze for IndexedIter&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Freeze for IndexedIterMut&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Freeze for Iter&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Freeze for IterMut&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Freeze for Lanes&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Freeze for LanesIter&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Freeze for LanesIterMut&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Freeze for LanesMut&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Freeze for Windows&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_bigint"] = [{"text":"impl Freeze for ParseBigIntError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for TryFromBigIntError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for BigUint","synthetic":true,"types":[]},{"text":"impl Freeze for BigInt","synthetic":true,"types":[]},{"text":"impl Freeze for Sign","synthetic":true,"types":[]}];
implementors["num_complex"] = [{"text":"impl&lt;T&gt; Freeze for Complex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for ParseComplexError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A&gt; Freeze for ExtendedGcd&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IterBinomial&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_iter"] = [{"text":"impl&lt;A&gt; Freeze for Range&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for RangeInclusive&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for RangeStep&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for RangeStepInclusive&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for RangeFrom&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for RangeStepFrom&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;T&gt; Freeze for Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ParseRatioError","synthetic":true,"types":[]}];
implementors["num_traits"] = [{"text":"impl Freeze for ParseFloatError","synthetic":true,"types":[]},{"text":"impl Freeze for FloatErrorKind","synthetic":true,"types":[]}];
implementors["object"] = [{"text":"impl Freeze for Architecture","synthetic":true,"types":[]},{"text":"impl Freeze for AddressSize","synthetic":true,"types":[]},{"text":"impl Freeze for BinaryFormat","synthetic":true,"types":[]},{"text":"impl Freeze for SectionKind","synthetic":true,"types":[]},{"text":"impl Freeze for ComdatKind","synthetic":true,"types":[]},{"text":"impl Freeze for SymbolKind","synthetic":true,"types":[]},{"text":"impl Freeze for SymbolScope","synthetic":true,"types":[]},{"text":"impl Freeze for RelocationKind","synthetic":true,"types":[]},{"text":"impl Freeze for RelocationEncoding","synthetic":true,"types":[]},{"text":"impl Freeze for FileFlags","synthetic":true,"types":[]},{"text":"impl Freeze for SectionFlags","synthetic":true,"types":[]},{"text":"impl&lt;Section&gt; Freeze for SymbolFlags&lt;Section&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Section: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for LittleEndian","synthetic":true,"types":[]},{"text":"impl Freeze for BigEndian","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for U16Bytes&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for U32Bytes&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for U64Bytes&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for I16Bytes&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for I32Bytes&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for I64Bytes&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Endianness","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Freeze for Bytes&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Freeze for StringTable&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Freeze for File&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Freeze for SegmentIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Freeze for Segment&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Freeze for SectionIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Freeze for Section&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Freeze for ComdatIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Freeze for Comdat&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Freeze for ComdatSectionIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Freeze for SymbolTable&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Freeze for SymbolIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Freeze for Symbol&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Freeze for RelocationIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for SectionIndex","synthetic":true,"types":[]},{"text":"impl Freeze for SymbolIndex","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for SymbolMap&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Freeze for SymbolMapName&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Freeze for ObjectMap&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Freeze for ObjectMapEntry&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Relocation","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Freeze for CompressedData&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SymbolSection","synthetic":true,"types":[]},{"text":"impl Freeze for RelocationTarget","synthetic":true,"types":[]},{"text":"impl Freeze for CompressionFormat","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Freeze for ArchiveFile&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Freeze for ArchiveMemberIterator&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Freeze for ArchiveMember&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ArchiveKind","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Freeze for CoffFile&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Freeze for SectionTable&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Freeze for CoffSegmentIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Freeze for CoffSegment&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Freeze for CoffSectionIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Freeze for CoffSection&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Freeze for SymbolTable&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Freeze for CoffSymbolTable&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Freeze for CoffSymbolIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Freeze for CoffSymbol&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Freeze for CoffRelocationIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Freeze for CoffComdatIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Freeze for CoffComdat&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Freeze for CoffComdatSectionIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, Elf&gt; Freeze for ElfFile&lt;'data, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Endian: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Elf&gt; Freeze for ElfSegmentIterator&lt;'data, 'file, Elf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Elf&gt; Freeze for ElfSegment&lt;'data, 'file, Elf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, Elf&gt; Freeze for SectionTable&lt;'data, Elf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Elf&gt; Freeze for ElfSectionIterator&lt;'data, 'file, Elf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Elf&gt; Freeze for ElfSection&lt;'data, 'file, Elf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, Elf&gt; Freeze for SymbolTable&lt;'data, Elf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Elf&gt; Freeze for ElfSymbolTable&lt;'data, 'file, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Endian: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Elf&gt; Freeze for ElfSymbolIterator&lt;'data, 'file, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Endian: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Elf&gt; Freeze for ElfSymbol&lt;'data, 'file, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Endian: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for RelocationSections","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Elf&gt; Freeze for ElfRelocationIterator&lt;'data, 'file, Elf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, Elf&gt; Freeze for ElfNoteIterator&lt;'data, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Endian: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, Elf&gt; Freeze for ElfNote&lt;'data, Elf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Elf&gt; Freeze for ElfComdatIterator&lt;'data, 'file, Elf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Elf&gt; Freeze for ElfComdat&lt;'data, 'file, Elf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Elf&gt; Freeze for ElfComdatSectionIterator&lt;'data, 'file, Elf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, Mach&gt; Freeze for MachOFile&lt;'data, Mach&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Endian: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Mach&gt; Freeze for MachOComdatIterator&lt;'data, 'file, Mach&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Mach&gt; Freeze for MachOComdat&lt;'data, 'file, Mach&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Mach&gt; Freeze for MachOComdatSectionIterator&lt;'data, 'file, Mach&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Mach&gt; Freeze for MachOSegmentIterator&lt;'data, 'file, Mach&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Endian: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Mach&gt; Freeze for MachOSegment&lt;'data, 'file, Mach&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Mach&gt; Freeze for MachOSectionIterator&lt;'data, 'file, Mach&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Mach&gt; Freeze for MachOSection&lt;'data, 'file, Mach&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, Mach&gt; Freeze for SymbolTable&lt;'data, Mach&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Mach&gt; Freeze for MachOSymbolTable&lt;'data, 'file, Mach&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Mach&gt; Freeze for MachOSymbolIterator&lt;'data, 'file, Mach&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Mach&gt; Freeze for MachOSymbol&lt;'data, 'file, Mach&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Mach&gt; Freeze for MachORelocationIterator&lt;'data, 'file, Mach&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, Pe&gt; Freeze for PeFile&lt;'data, Pe&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Pe&gt; Freeze for PeComdatIterator&lt;'data, 'file, Pe&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Pe&gt; Freeze for PeComdat&lt;'data, 'file, Pe&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Pe&gt; Freeze for PeComdatSectionIterator&lt;'data, 'file, Pe&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Pe&gt; Freeze for PeSegmentIterator&lt;'data, 'file, Pe&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Pe&gt; Freeze for PeSegment&lt;'data, 'file, Pe&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Pe&gt; Freeze for PeSectionIterator&lt;'data, 'file, Pe&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Pe&gt; Freeze for PeSection&lt;'data, 'file, Pe&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Freeze for PeRelocationIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Header","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for FileHeader32&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for FileHeader64&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Ident","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for SectionHeader32&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for SectionHeader64&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for CompressionHeader32&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for CompressionHeader64&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Sym32&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Sym64&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Syminfo32&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Syminfo64&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Rel32&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Rela32&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Rel64&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Rela64&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for ProgramHeader32&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for ProgramHeader64&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Dyn32&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Dyn64&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for NoteHeader32&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for NoteHeader64&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for FatHeader","synthetic":true,"types":[]},{"text":"impl Freeze for FatArch32","synthetic":true,"types":[]},{"text":"impl Freeze for FatArch64","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for MachHeader32&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for MachHeader64&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for LoadCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for LcStr&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for SegmentCommand32&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for SegmentCommand64&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Section32&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Section64&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Fvmlib&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for FvmlibCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Dylib&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for DylibCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for SubFrameworkCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for SubClientCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for SubUmbrellaCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for SubLibraryCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for PreboundDylibCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for DylinkerCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for ThreadCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for RoutinesCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for RoutinesCommand_64&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for SymtabCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for DysymtabCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for DylibTableOfContents&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for DylibModule32&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for DylibModule64&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for DylibReference&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for TwolevelHintsCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for TwolevelHint&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for PrebindCksumCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for UuidCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for RpathCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for LinkeditDataCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for EncryptionInfoCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for EncryptionInfoCommand64&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for VersionMinCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for BuildVersionCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for BuildToolVersion&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for DyldInfoCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for LinkerOptionCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for SymSegCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for IdentCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for FvmfileCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for EntryPointCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for SourceVersionCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for DataInCodeEntry&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for NoteCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Nlist32&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Nlist64&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Relocation&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for RelocationInfo","synthetic":true,"types":[]},{"text":"impl Freeze for ScatteredRelocationInfo","synthetic":true,"types":[]},{"text":"impl Freeze for ImageDosHeader","synthetic":true,"types":[]},{"text":"impl Freeze for ImageOs2Header","synthetic":true,"types":[]},{"text":"impl Freeze for ImageVxdHeader","synthetic":true,"types":[]},{"text":"impl Freeze for ImageFileHeader","synthetic":true,"types":[]},{"text":"impl Freeze for ImageDataDirectory","synthetic":true,"types":[]},{"text":"impl Freeze for ImageOptionalHeader32","synthetic":true,"types":[]},{"text":"impl Freeze for ImageRomOptionalHeader","synthetic":true,"types":[]},{"text":"impl Freeze for ImageOptionalHeader64","synthetic":true,"types":[]},{"text":"impl Freeze for ImageNtHeaders64","synthetic":true,"types":[]},{"text":"impl Freeze for ImageNtHeaders32","synthetic":true,"types":[]},{"text":"impl Freeze for ImageRomHeaders","synthetic":true,"types":[]},{"text":"impl Freeze for Guid","synthetic":true,"types":[]},{"text":"impl Freeze for AnonObjectHeader","synthetic":true,"types":[]},{"text":"impl Freeze for AnonObjectHeaderV2","synthetic":true,"types":[]},{"text":"impl Freeze for AnonObjectHeaderBigobj","synthetic":true,"types":[]},{"text":"impl Freeze for ImageSectionHeader","synthetic":true,"types":[]},{"text":"impl Freeze for ImageSymbol","synthetic":true,"types":[]},{"text":"impl Freeze for ImageSymbolBytes","synthetic":true,"types":[]},{"text":"impl Freeze for ImageSymbolEx","synthetic":true,"types":[]},{"text":"impl Freeze for ImageSymbolExBytes","synthetic":true,"types":[]},{"text":"impl Freeze for ImageAuxSymbolTokenDef","synthetic":true,"types":[]},{"text":"impl Freeze for ImageAuxSymbolFunction","synthetic":true,"types":[]},{"text":"impl Freeze for ImageAuxSymbolFunctionBeginEnd","synthetic":true,"types":[]},{"text":"impl Freeze for ImageAuxSymbolWeak","synthetic":true,"types":[]},{"text":"impl Freeze for ImageAuxSymbolSection","synthetic":true,"types":[]},{"text":"impl Freeze for ImageAuxSymbolCrc","synthetic":true,"types":[]},{"text":"impl Freeze for ImageRelocation","synthetic":true,"types":[]},{"text":"impl Freeze for ImageLinenumber","synthetic":true,"types":[]},{"text":"impl Freeze for ImageBaseRelocation","synthetic":true,"types":[]},{"text":"impl Freeze for ImageArchiveMemberHeader","synthetic":true,"types":[]},{"text":"impl Freeze for ImageExportDirectory","synthetic":true,"types":[]},{"text":"impl Freeze for ImageImportByName","synthetic":true,"types":[]},{"text":"impl Freeze for ImageTlsDirectory64","synthetic":true,"types":[]},{"text":"impl Freeze for ImageTlsDirectory32","synthetic":true,"types":[]},{"text":"impl Freeze for ImageImportDescriptor","synthetic":true,"types":[]},{"text":"impl Freeze for ImageBoundImportDescriptor","synthetic":true,"types":[]},{"text":"impl Freeze for ImageBoundForwarderRef","synthetic":true,"types":[]},{"text":"impl Freeze for ImageDelayloadDescriptor","synthetic":true,"types":[]},{"text":"impl Freeze for ImageResourceDirectory","synthetic":true,"types":[]},{"text":"impl Freeze for ImageResourceDirectoryEntry","synthetic":true,"types":[]},{"text":"impl Freeze for ImageResourceDirectoryString","synthetic":true,"types":[]},{"text":"impl Freeze for ImageResourceDirStringU","synthetic":true,"types":[]},{"text":"impl Freeze for ImageResourceDataEntry","synthetic":true,"types":[]},{"text":"impl Freeze for ImageLoadConfigCodeIntegrity","synthetic":true,"types":[]},{"text":"impl Freeze for ImageDynamicRelocationTable","synthetic":true,"types":[]},{"text":"impl Freeze for ImageDynamicRelocation32","synthetic":true,"types":[]},{"text":"impl Freeze for ImageDynamicRelocation64","synthetic":true,"types":[]},{"text":"impl Freeze for ImageDynamicRelocation32V2","synthetic":true,"types":[]},{"text":"impl Freeze for ImageDynamicRelocation64V2","synthetic":true,"types":[]},{"text":"impl Freeze for ImagePrologueDynamicRelocationHeader","synthetic":true,"types":[]},{"text":"impl Freeze for ImageEpilogueDynamicRelocationHeader","synthetic":true,"types":[]},{"text":"impl Freeze for ImageLoadConfigDirectory32","synthetic":true,"types":[]},{"text":"impl Freeze for ImageLoadConfigDirectory64","synthetic":true,"types":[]},{"text":"impl Freeze for ImageHotPatchInfo","synthetic":true,"types":[]},{"text":"impl Freeze for ImageHotPatchBase","synthetic":true,"types":[]},{"text":"impl Freeze for ImageHotPatchHashes","synthetic":true,"types":[]},{"text":"impl Freeze for ImageArmRuntimeFunctionEntry","synthetic":true,"types":[]},{"text":"impl Freeze for ImageArm64RuntimeFunctionEntry","synthetic":true,"types":[]},{"text":"impl Freeze for ImageAlpha64RuntimeFunctionEntry","synthetic":true,"types":[]},{"text":"impl Freeze for ImageAlphaRuntimeFunctionEntry","synthetic":true,"types":[]},{"text":"impl Freeze for ImageRuntimeFunctionEntry","synthetic":true,"types":[]},{"text":"impl Freeze for ImageEnclaveConfig32","synthetic":true,"types":[]},{"text":"impl Freeze for ImageEnclaveConfig64","synthetic":true,"types":[]},{"text":"impl Freeze for ImageEnclaveImport","synthetic":true,"types":[]},{"text":"impl Freeze for ImageDebugDirectory","synthetic":true,"types":[]},{"text":"impl Freeze for ImageCoffSymbolsHeader","synthetic":true,"types":[]},{"text":"impl Freeze for ImageDebugMisc","synthetic":true,"types":[]},{"text":"impl Freeze for ImageFunctionEntry","synthetic":true,"types":[]},{"text":"impl Freeze for ImageFunctionEntry64","synthetic":true,"types":[]},{"text":"impl Freeze for ImageSeparateDebugHeader","synthetic":true,"types":[]},{"text":"impl Freeze for NonPagedDebugInfo","synthetic":true,"types":[]},{"text":"impl Freeze for ImageArchitectureEntry","synthetic":true,"types":[]},{"text":"impl Freeze for ImportObjectHeader","synthetic":true,"types":[]},{"text":"impl Freeze for ImageCor20Header","synthetic":true,"types":[]}];
implementors["once_cell"] = [{"text":"impl&lt;T&gt; !Freeze for OnceCell&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, F&nbsp;=&nbsp;fn() -&gt; T&gt; !Freeze for Lazy&lt;T, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for OnceCell&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, F&nbsp;=&nbsp;fn() -&gt; T&gt; !Freeze for Lazy&lt;T, F&gt;","synthetic":true,"types":[]}];
implementors["openssl"] = [{"text":"impl Freeze for KeyError","synthetic":true,"types":[]},{"text":"impl Freeze for AesKey","synthetic":true,"types":[]},{"text":"impl Freeze for Asn1GeneralizedTime","synthetic":true,"types":[]},{"text":"impl !Freeze for Asn1GeneralizedTimeRef","synthetic":true,"types":[]},{"text":"impl Freeze for TimeDiff","synthetic":true,"types":[]},{"text":"impl Freeze for Asn1Time","synthetic":true,"types":[]},{"text":"impl !Freeze for Asn1TimeRef","synthetic":true,"types":[]},{"text":"impl Freeze for Asn1String","synthetic":true,"types":[]},{"text":"impl !Freeze for Asn1StringRef","synthetic":true,"types":[]},{"text":"impl Freeze for Asn1Integer","synthetic":true,"types":[]},{"text":"impl !Freeze for Asn1IntegerRef","synthetic":true,"types":[]},{"text":"impl Freeze for Asn1BitString","synthetic":true,"types":[]},{"text":"impl !Freeze for Asn1BitStringRef","synthetic":true,"types":[]},{"text":"impl Freeze for Asn1Object","synthetic":true,"types":[]},{"text":"impl !Freeze for Asn1ObjectRef","synthetic":true,"types":[]},{"text":"impl Freeze for MsbOption","synthetic":true,"types":[]},{"text":"impl Freeze for BigNumContext","synthetic":true,"types":[]},{"text":"impl !Freeze for BigNumContextRef","synthetic":true,"types":[]},{"text":"impl Freeze for BigNum","synthetic":true,"types":[]},{"text":"impl !Freeze for BigNumRef","synthetic":true,"types":[]},{"text":"impl Freeze for CMSOptions","synthetic":true,"types":[]},{"text":"impl Freeze for CmsContentInfo","synthetic":true,"types":[]},{"text":"impl !Freeze for CmsContentInfoRef","synthetic":true,"types":[]},{"text":"impl Freeze for ConfMethod","synthetic":true,"types":[]},{"text":"impl Freeze for Conf","synthetic":true,"types":[]},{"text":"impl !Freeze for ConfRef","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Deriver&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Dh&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for DhRef&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Dsa&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for DsaRef&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for PointConversionForm","synthetic":true,"types":[]},{"text":"impl Freeze for Asn1Flag","synthetic":true,"types":[]},{"text":"impl Freeze for EcGroup","synthetic":true,"types":[]},{"text":"impl !Freeze for EcGroupRef","synthetic":true,"types":[]},{"text":"impl Freeze for EcPoint","synthetic":true,"types":[]},{"text":"impl !Freeze for EcPointRef","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for EcKey&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for EcKeyRef&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for EcdsaSig","synthetic":true,"types":[]},{"text":"impl !Freeze for EcdsaSigRef","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Encrypter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Decrypter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Seal","synthetic":true,"types":[]},{"text":"impl Freeze for Open","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorStack","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Freeze for Index&lt;T, U&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for MessageDigest","synthetic":true,"types":[]},{"text":"impl Freeze for Hasher","synthetic":true,"types":[]},{"text":"impl Freeze for DigestBytes","synthetic":true,"types":[]},{"text":"impl Freeze for SignatureAlgorithms","synthetic":true,"types":[]},{"text":"impl Freeze for Nid","synthetic":true,"types":[]},{"text":"impl Freeze for OcspFlag","synthetic":true,"types":[]},{"text":"impl Freeze for OcspResponseStatus","synthetic":true,"types":[]},{"text":"impl Freeze for OcspCertStatus","synthetic":true,"types":[]},{"text":"impl Freeze for OcspRevokedStatus","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for OcspStatus&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for OcspBasicResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for OcspBasicResponseRef","synthetic":true,"types":[]},{"text":"impl Freeze for OcspCertId","synthetic":true,"types":[]},{"text":"impl !Freeze for OcspCertIdRef","synthetic":true,"types":[]},{"text":"impl Freeze for OcspResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for OcspResponseRef","synthetic":true,"types":[]},{"text":"impl Freeze for OcspRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for OcspRequestRef","synthetic":true,"types":[]},{"text":"impl Freeze for OcspOneReq","synthetic":true,"types":[]},{"text":"impl !Freeze for OcspOneReqRef","synthetic":true,"types":[]},{"text":"impl Freeze for Pkcs12","synthetic":true,"types":[]},{"text":"impl !Freeze for Pkcs12Ref","synthetic":true,"types":[]},{"text":"impl Freeze for ParsedPkcs12","synthetic":true,"types":[]},{"text":"impl Freeze for Pkcs12Builder","synthetic":true,"types":[]},{"text":"impl Freeze for KeyIvPair","synthetic":true,"types":[]},{"text":"impl Freeze for Pkcs7","synthetic":true,"types":[]},{"text":"impl !Freeze for Pkcs7Ref","synthetic":true,"types":[]},{"text":"impl Freeze for Pkcs7Flags","synthetic":true,"types":[]},{"text":"impl Freeze for Id","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for PKey&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for PKeyRef&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Params","synthetic":true,"types":[]},{"text":"impl Freeze for Public","synthetic":true,"types":[]},{"text":"impl Freeze for Private","synthetic":true,"types":[]},{"text":"impl Freeze for Padding","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Rsa&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for RsaRef&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for RsaPrivateKeyBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for Sha1","synthetic":true,"types":[]},{"text":"impl Freeze for Sha224","synthetic":true,"types":[]},{"text":"impl Freeze for Sha256","synthetic":true,"types":[]},{"text":"impl Freeze for Sha384","synthetic":true,"types":[]},{"text":"impl Freeze for Sha512","synthetic":true,"types":[]},{"text":"impl Freeze for RsaPssSaltlen","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Signer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Verifier&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SrtpProtectionProfile","synthetic":true,"types":[]},{"text":"impl !Freeze for SrtpProtectionProfileRef","synthetic":true,"types":[]},{"text":"impl Freeze for SrtpProfileId","synthetic":true,"types":[]},{"text":"impl Freeze for ConnectConfiguration","synthetic":true,"types":[]},{"text":"impl Freeze for SslAcceptor","synthetic":true,"types":[]},{"text":"impl Freeze for SslAcceptorBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for SslConnector","synthetic":true,"types":[]},{"text":"impl Freeze for SslConnectorBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorCode","synthetic":true,"types":[]},{"text":"impl Freeze for SslOptions","synthetic":true,"types":[]},{"text":"impl Freeze for SslMode","synthetic":true,"types":[]},{"text":"impl Freeze for SslMethod","synthetic":true,"types":[]},{"text":"impl Freeze for SslVerifyMode","synthetic":true,"types":[]},{"text":"impl Freeze for SslSessionCacheMode","synthetic":true,"types":[]},{"text":"impl Freeze for ExtensionContext","synthetic":true,"types":[]},{"text":"impl Freeze for SslFiletype","synthetic":true,"types":[]},{"text":"impl Freeze for StatusType","synthetic":true,"types":[]},{"text":"impl Freeze for NameType","synthetic":true,"types":[]},{"text":"impl Freeze for SniError","synthetic":true,"types":[]},{"text":"impl Freeze for SslAlert","synthetic":true,"types":[]},{"text":"impl Freeze for AlpnError","synthetic":true,"types":[]},{"text":"impl Freeze for ClientHelloResponse","synthetic":true,"types":[]},{"text":"impl Freeze for SslVersion","synthetic":true,"types":[]},{"text":"impl Freeze for SslContextBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for SslContext","synthetic":true,"types":[]},{"text":"impl !Freeze for SslContextRef","synthetic":true,"types":[]},{"text":"impl Freeze for CipherBits","synthetic":true,"types":[]},{"text":"impl Freeze for SslCipher","synthetic":true,"types":[]},{"text":"impl !Freeze for SslCipherRef","synthetic":true,"types":[]},{"text":"impl Freeze for SslSession","synthetic":true,"types":[]},{"text":"impl !Freeze for SslSessionRef","synthetic":true,"types":[]},{"text":"impl Freeze for Ssl","synthetic":true,"types":[]},{"text":"impl !Freeze for SslRef","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for MidHandshakeSslStream&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for SslStream&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for SslStreamBuilder&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ShutdownState","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for HandshakeError&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ShutdownResult","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Stack&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for StackRef&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for OpensslString","synthetic":true,"types":[]},{"text":"impl !Freeze for OpensslStringRef","synthetic":true,"types":[]},{"text":"impl Freeze for Cipher","synthetic":true,"types":[]},{"text":"impl Freeze for Crypter","synthetic":true,"types":[]},{"text":"impl Freeze for Mode","synthetic":true,"types":[]},{"text":"impl Freeze for X509StoreContext","synthetic":true,"types":[]},{"text":"impl !Freeze for X509StoreContextRef","synthetic":true,"types":[]},{"text":"impl Freeze for X509Builder","synthetic":true,"types":[]},{"text":"impl Freeze for X509","synthetic":true,"types":[]},{"text":"impl !Freeze for X509Ref","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for X509v3Context&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for X509Extension","synthetic":true,"types":[]},{"text":"impl !Freeze for X509ExtensionRef","synthetic":true,"types":[]},{"text":"impl Freeze for X509NameBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for X509Name","synthetic":true,"types":[]},{"text":"impl !Freeze for X509NameRef","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for X509NameEntries&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for X509NameEntry","synthetic":true,"types":[]},{"text":"impl !Freeze for X509NameEntryRef","synthetic":true,"types":[]},{"text":"impl Freeze for X509ReqBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for X509Req","synthetic":true,"types":[]},{"text":"impl !Freeze for X509ReqRef","synthetic":true,"types":[]},{"text":"impl Freeze for X509VerifyResult","synthetic":true,"types":[]},{"text":"impl Freeze for GeneralName","synthetic":true,"types":[]},{"text":"impl !Freeze for GeneralNameRef","synthetic":true,"types":[]},{"text":"impl Freeze for X509Algorithm","synthetic":true,"types":[]},{"text":"impl !Freeze for X509AlgorithmRef","synthetic":true,"types":[]},{"text":"impl Freeze for X509Object","synthetic":true,"types":[]},{"text":"impl !Freeze for X509ObjectRef","synthetic":true,"types":[]},{"text":"impl Freeze for X509CheckFlags","synthetic":true,"types":[]},{"text":"impl Freeze for X509VerifyFlags","synthetic":true,"types":[]},{"text":"impl Freeze for X509VerifyParam","synthetic":true,"types":[]},{"text":"impl !Freeze for X509VerifyParamRef","synthetic":true,"types":[]},{"text":"impl Freeze for BasicConstraints","synthetic":true,"types":[]},{"text":"impl Freeze for KeyUsage","synthetic":true,"types":[]},{"text":"impl Freeze for ExtendedKeyUsage","synthetic":true,"types":[]},{"text":"impl Freeze for SubjectKeyIdentifier","synthetic":true,"types":[]},{"text":"impl Freeze for AuthorityKeyIdentifier","synthetic":true,"types":[]},{"text":"impl Freeze for SubjectAlternativeName","synthetic":true,"types":[]},{"text":"impl Freeze for X509StoreBuilder","synthetic":true,"types":[]},{"text":"impl !Freeze for X509StoreBuilderRef","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for X509Lookup&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for X509LookupRef&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for HashDir","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for X509LookupMethod&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for X509LookupMethodRef&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for X509Store","synthetic":true,"types":[]},{"text":"impl !Freeze for X509StoreRef","synthetic":true,"types":[]}];
implementors["openssl_probe"] = [{"text":"impl Freeze for ProbeResult","synthetic":true,"types":[]}];
implementors["openssl_sys"] = [{"text":"impl Freeze for AES_KEY","synthetic":true,"types":[]},{"text":"impl Freeze for ASN1_ENCODING","synthetic":true,"types":[]},{"text":"impl Freeze for ERR_STRING_DATA","synthetic":true,"types":[]},{"text":"impl Freeze for X509V3_CTX","synthetic":true,"types":[]},{"text":"impl Freeze for SHA_CTX","synthetic":true,"types":[]},{"text":"impl Freeze for SHA256_CTX","synthetic":true,"types":[]},{"text":"impl Freeze for SHA512_CTX","synthetic":true,"types":[]},{"text":"impl Freeze for SRTP_PROTECTION_PROFILE","synthetic":true,"types":[]},{"text":"impl Freeze for X509_VAL","synthetic":true,"types":[]},{"text":"impl Freeze for GENERAL_NAME","synthetic":true,"types":[]},{"text":"impl Freeze for AUTHORITY_KEYID","synthetic":true,"types":[]},{"text":"impl Freeze for stack_st_ASN1_OBJECT","synthetic":true,"types":[]},{"text":"impl Freeze for BIO_METHOD","synthetic":true,"types":[]},{"text":"impl Freeze for CMS_ContentInfo","synthetic":true,"types":[]},{"text":"impl Freeze for stack_st_void","synthetic":true,"types":[]},{"text":"impl Freeze for point_conversion_form_t","synthetic":true,"types":[]},{"text":"impl Freeze for EC_METHOD","synthetic":true,"types":[]},{"text":"impl Freeze for EC_GROUP","synthetic":true,"types":[]},{"text":"impl Freeze for EC_POINT","synthetic":true,"types":[]},{"text":"impl Freeze for ECDSA_SIG","synthetic":true,"types":[]},{"text":"impl Freeze for OCSP_CERTID","synthetic":true,"types":[]},{"text":"impl Freeze for OCSP_ONEREQ","synthetic":true,"types":[]},{"text":"impl Freeze for OCSP_REQUEST","synthetic":true,"types":[]},{"text":"impl Freeze for OCSP_BASICRESP","synthetic":true,"types":[]},{"text":"impl Freeze for ASN1_INTEGER","synthetic":true,"types":[]},{"text":"impl Freeze for ASN1_GENERALIZEDTIME","synthetic":true,"types":[]},{"text":"impl Freeze for ASN1_STRING","synthetic":true,"types":[]},{"text":"impl Freeze for ASN1_BIT_STRING","synthetic":true,"types":[]},{"text":"impl Freeze for ASN1_TIME","synthetic":true,"types":[]},{"text":"impl Freeze for ASN1_TYPE","synthetic":true,"types":[]},{"text":"impl Freeze for ASN1_OBJECT","synthetic":true,"types":[]},{"text":"impl Freeze for ASN1_OCTET_STRING","synthetic":true,"types":[]},{"text":"impl Freeze for bio_st","synthetic":true,"types":[]},{"text":"impl Freeze for BIO","synthetic":true,"types":[]},{"text":"impl Freeze for BIGNUM","synthetic":true,"types":[]},{"text":"impl Freeze for BN_BLINDING","synthetic":true,"types":[]},{"text":"impl Freeze for BN_MONT_CTX","synthetic":true,"types":[]},{"text":"impl Freeze for BN_CTX","synthetic":true,"types":[]},{"text":"impl Freeze for BN_GENCB","synthetic":true,"types":[]},{"text":"impl Freeze for EVP_CIPHER","synthetic":true,"types":[]},{"text":"impl Freeze for EVP_CIPHER_CTX","synthetic":true,"types":[]},{"text":"impl Freeze for EVP_MD","synthetic":true,"types":[]},{"text":"impl Freeze for EVP_MD_CTX","synthetic":true,"types":[]},{"text":"impl Freeze for EVP_PKEY","synthetic":true,"types":[]},{"text":"impl Freeze for PKCS8_PRIV_KEY_INFO","synthetic":true,"types":[]},{"text":"impl Freeze for EVP_PKEY_ASN1_METHOD","synthetic":true,"types":[]},{"text":"impl Freeze for EVP_PKEY_CTX","synthetic":true,"types":[]},{"text":"impl Freeze for HMAC_CTX","synthetic":true,"types":[]},{"text":"impl Freeze for DH","synthetic":true,"types":[]},{"text":"impl Freeze for DH_METHOD","synthetic":true,"types":[]},{"text":"impl Freeze for DSA","synthetic":true,"types":[]},{"text":"impl Freeze for DSA_METHOD","synthetic":true,"types":[]},{"text":"impl Freeze for RSA","synthetic":true,"types":[]},{"text":"impl Freeze for RSA_METHOD","synthetic":true,"types":[]},{"text":"impl Freeze for EC_KEY","synthetic":true,"types":[]},{"text":"impl Freeze for X509","synthetic":true,"types":[]},{"text":"impl Freeze for X509_ALGOR","synthetic":true,"types":[]},{"text":"impl Freeze for X509_LOOKUP_METHOD","synthetic":true,"types":[]},{"text":"impl Freeze for X509_NAME","synthetic":true,"types":[]},{"text":"impl Freeze for X509_STORE","synthetic":true,"types":[]},{"text":"impl Freeze for X509_STORE_CTX","synthetic":true,"types":[]},{"text":"impl Freeze for X509_VERIFY_PARAM","synthetic":true,"types":[]},{"text":"impl Freeze for CONF","synthetic":true,"types":[]},{"text":"impl Freeze for OPENSSL_INIT_SETTINGS","synthetic":true,"types":[]},{"text":"impl Freeze for ENGINE","synthetic":true,"types":[]},{"text":"impl Freeze for SSL","synthetic":true,"types":[]},{"text":"impl Freeze for SSL_CTX","synthetic":true,"types":[]},{"text":"impl Freeze for COMP_METHOD","synthetic":true,"types":[]},{"text":"impl Freeze for CRYPTO_EX_DATA","synthetic":true,"types":[]},{"text":"impl Freeze for OCSP_RESPONSE","synthetic":true,"types":[]},{"text":"impl Freeze for PKCS12","synthetic":true,"types":[]},{"text":"impl Freeze for PKCS7_SIGNED","synthetic":true,"types":[]},{"text":"impl Freeze for PKCS7_ENVELOPE","synthetic":true,"types":[]},{"text":"impl Freeze for PKCS7_SIGN_ENVELOPE","synthetic":true,"types":[]},{"text":"impl Freeze for PKCS7_DIGEST","synthetic":true,"types":[]},{"text":"impl Freeze for PKCS7_ENCRYPT","synthetic":true,"types":[]},{"text":"impl Freeze for PKCS7","synthetic":true,"types":[]},{"text":"impl Freeze for stack_st_OPENSSL_STRING","synthetic":true,"types":[]},{"text":"impl Freeze for SSL_METHOD","synthetic":true,"types":[]},{"text":"impl Freeze for SSL_CIPHER","synthetic":true,"types":[]},{"text":"impl Freeze for SSL_SESSION","synthetic":true,"types":[]},{"text":"impl Freeze for stack_st_SSL_CIPHER","synthetic":true,"types":[]},{"text":"impl Freeze for stack_st_SRTP_PROTECTION_PROFILE","synthetic":true,"types":[]},{"text":"impl Freeze for OPENSSL_STACK","synthetic":true,"types":[]},{"text":"impl Freeze for X509_NAME_ENTRY","synthetic":true,"types":[]},{"text":"impl Freeze for stack_st_X509_NAME","synthetic":true,"types":[]},{"text":"impl Freeze for X509_EXTENSION","synthetic":true,"types":[]},{"text":"impl Freeze for stack_st_X509_EXTENSION","synthetic":true,"types":[]},{"text":"impl Freeze for stack_st_X509_ATTRIBUTE","synthetic":true,"types":[]},{"text":"impl Freeze for X509_REQ_INFO","synthetic":true,"types":[]},{"text":"impl Freeze for X509_CRL","synthetic":true,"types":[]},{"text":"impl Freeze for stack_st_X509_CRL","synthetic":true,"types":[]},{"text":"impl Freeze for X509_CRL_INFO","synthetic":true,"types":[]},{"text":"impl Freeze for X509_REVOKED","synthetic":true,"types":[]},{"text":"impl Freeze for stack_st_X509_REVOKED","synthetic":true,"types":[]},{"text":"impl Freeze for X509_REQ","synthetic":true,"types":[]},{"text":"impl Freeze for X509_CINF","synthetic":true,"types":[]},{"text":"impl Freeze for stack_st_X509","synthetic":true,"types":[]},{"text":"impl Freeze for X509_OBJECT","synthetic":true,"types":[]},{"text":"impl Freeze for stack_st_X509_OBJECT","synthetic":true,"types":[]},{"text":"impl Freeze for X509_LOOKUP","synthetic":true,"types":[]},{"text":"impl Freeze for stack_st_X509_LOOKUP","synthetic":true,"types":[]},{"text":"impl Freeze for CONF_METHOD","synthetic":true,"types":[]},{"text":"impl Freeze for stack_st_GENERAL_NAME","synthetic":true,"types":[]}];
implementors["parking_lot"] = [{"text":"impl !Freeze for Condvar","synthetic":true,"types":[]},{"text":"impl Freeze for WaitTimeoutResult","synthetic":true,"types":[]},{"text":"impl !Freeze for Once","synthetic":true,"types":[]},{"text":"impl !Freeze for RawFairMutex","synthetic":true,"types":[]},{"text":"impl !Freeze for RawMutex","synthetic":true,"types":[]},{"text":"impl !Freeze for RawRwLock","synthetic":true,"types":[]},{"text":"impl Freeze for RawThreadId","synthetic":true,"types":[]},{"text":"impl Freeze for OnceState","synthetic":true,"types":[]}];
implementors["parking_lot_core"] = [{"text":"impl Freeze for ParkToken","synthetic":true,"types":[]},{"text":"impl Freeze for UnparkResult","synthetic":true,"types":[]},{"text":"impl Freeze for UnparkToken","synthetic":true,"types":[]},{"text":"impl Freeze for SpinWait","synthetic":true,"types":[]},{"text":"impl Freeze for FilterOp","synthetic":true,"types":[]},{"text":"impl Freeze for ParkResult","synthetic":true,"types":[]},{"text":"impl Freeze for RequeueOp","synthetic":true,"types":[]}];
implementors["percent_encoding"] = [{"text":"impl Freeze for AsciiSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for PercentEncode&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for PercentDecode&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["phf"] = [{"text":"impl&lt;K, V&gt; Freeze for Map&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Set&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Entries&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Keys&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Values&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["phf_shared"] = [{"text":"impl Freeze for Hashes","synthetic":true,"types":[]}];
implementors["postgres"] = [{"text":"impl Freeze for CancelToken","synthetic":true,"types":[]},{"text":"impl !Freeze for Client","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for CopyInWriter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Freeze for CopyOutReader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Notifications&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for RowIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Transaction&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for TransactionBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for BinaryCopyInWriter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for BinaryCopyOutIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Config","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for BlockingIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for TimeoutIter&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["postgres_protocol"] = [{"text":"impl Freeze for IsNull","synthetic":true,"types":[]},{"text":"impl Freeze for ChannelBinding","synthetic":true,"types":[]},{"text":"impl Freeze for ScramSha256","synthetic":true,"types":[]},{"text":"impl Freeze for Header","synthetic":true,"types":[]},{"text":"impl Freeze for AuthenticationMd5PasswordBody","synthetic":true,"types":[]},{"text":"impl !Freeze for AuthenticationGssContinueBody","synthetic":true,"types":[]},{"text":"impl !Freeze for AuthenticationSaslBody","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SaslMechanisms&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for AuthenticationSaslContinueBody","synthetic":true,"types":[]},{"text":"impl !Freeze for AuthenticationSaslFinalBody","synthetic":true,"types":[]},{"text":"impl Freeze for BackendKeyDataBody","synthetic":true,"types":[]},{"text":"impl !Freeze for CommandCompleteBody","synthetic":true,"types":[]},{"text":"impl !Freeze for CopyDataBody","synthetic":true,"types":[]},{"text":"impl !Freeze for CopyInResponseBody","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ColumnFormats&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for CopyOutResponseBody","synthetic":true,"types":[]},{"text":"impl !Freeze for DataRowBody","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for DataRowRanges&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for ErrorResponseBody","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ErrorFields&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ErrorField&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for NoticeResponseBody","synthetic":true,"types":[]},{"text":"impl !Freeze for NotificationResponseBody","synthetic":true,"types":[]},{"text":"impl !Freeze for ParameterDescriptionBody","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Parameters&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for ParameterStatusBody","synthetic":true,"types":[]},{"text":"impl Freeze for ReadyForQueryBody","synthetic":true,"types":[]},{"text":"impl !Freeze for RowDescriptionBody","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Fields&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Field&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for Message","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for CopyData&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for BindError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for HstoreEntries&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Varbit&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Array&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ArrayDimensions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ArrayDimension","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ArrayValues&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Point","synthetic":true,"types":[]},{"text":"impl Freeze for Box","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Path&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for PathPoints&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Inet","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for RangeBound&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Range&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["postgres_types"] = [{"text":"impl Freeze for Type","synthetic":true,"types":[]},{"text":"impl Freeze for Field","synthetic":true,"types":[]},{"text":"impl Freeze for WasNull","synthetic":true,"types":[]},{"text":"impl Freeze for WrongType","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Date&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Timestamp&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Kind","synthetic":true,"types":[]},{"text":"impl Freeze for IsNull","synthetic":true,"types":[]}];
implementors["ppv_lite86"] = [{"text":"impl Freeze for YesS3","synthetic":true,"types":[]},{"text":"impl Freeze for NoS3","synthetic":true,"types":[]},{"text":"impl Freeze for YesS4","synthetic":true,"types":[]},{"text":"impl Freeze for NoS4","synthetic":true,"types":[]},{"text":"impl Freeze for YesA1","synthetic":true,"types":[]},{"text":"impl Freeze for NoA1","synthetic":true,"types":[]},{"text":"impl Freeze for YesA2","synthetic":true,"types":[]},{"text":"impl Freeze for NoA2","synthetic":true,"types":[]},{"text":"impl Freeze for YesNI","synthetic":true,"types":[]},{"text":"impl Freeze for NoNI","synthetic":true,"types":[]},{"text":"impl&lt;S3, S4, NI&gt; Freeze for SseMachine&lt;S3, S4, NI&gt;","synthetic":true,"types":[]},{"text":"impl&lt;NI&gt; Freeze for Avx2Machine&lt;NI&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for vec128_storage","synthetic":true,"types":[]},{"text":"impl Freeze for vec256_storage","synthetic":true,"types":[]},{"text":"impl Freeze for vec512_storage","synthetic":true,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl Freeze for TokenStream","synthetic":true,"types":[]},{"text":"impl Freeze for LexError","synthetic":true,"types":[]},{"text":"impl Freeze for Span","synthetic":true,"types":[]},{"text":"impl Freeze for Group","synthetic":true,"types":[]},{"text":"impl Freeze for Punct","synthetic":true,"types":[]},{"text":"impl Freeze for Ident","synthetic":true,"types":[]},{"text":"impl Freeze for Literal","synthetic":true,"types":[]},{"text":"impl Freeze for TokenTree","synthetic":true,"types":[]},{"text":"impl Freeze for Delimiter","synthetic":true,"types":[]},{"text":"impl Freeze for Spacing","synthetic":true,"types":[]},{"text":"impl Freeze for IntoIter","synthetic":true,"types":[]}];
implementors["pyo3"] = [{"text":"impl&lt;'a&gt; Freeze for PyDowncastError&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for PyErr","synthetic":true,"types":[]},{"text":"impl Freeze for GILGuard","synthetic":true,"types":[]},{"text":"impl Freeze for GILPool","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Py&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'p&gt; Freeze for Python&lt;'p&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'p&gt; Freeze for PythonVersionInfo&lt;'p&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for PyAny","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for PyBuffer&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for ReadOnlyCell&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ElementType","synthetic":true,"types":[]},{"text":"impl Freeze for CompareOp","synthetic":true,"types":[]},{"text":"impl Freeze for PyTraverseError","synthetic":true,"types":[]},{"text":"impl&lt;'p&gt; Freeze for PyVisit&lt;'p&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Freeze for IterNextOutput&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for PyBufferProcs","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Freeze for IterANextOutput&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Freeze for PyBaseException","synthetic":true,"types":[]},{"text":"impl !Freeze for PyException","synthetic":true,"types":[]},{"text":"impl !Freeze for PyStopAsyncIteration","synthetic":true,"types":[]},{"text":"impl !Freeze for PyStopIteration","synthetic":true,"types":[]},{"text":"impl !Freeze for PyGeneratorExit","synthetic":true,"types":[]},{"text":"impl !Freeze for PyArithmeticError","synthetic":true,"types":[]},{"text":"impl !Freeze for PyLookupError","synthetic":true,"types":[]},{"text":"impl !Freeze for PyAssertionError","synthetic":true,"types":[]},{"text":"impl !Freeze for PyAttributeError","synthetic":true,"types":[]},{"text":"impl !Freeze for PyBufferError","synthetic":true,"types":[]},{"text":"impl !Freeze for PyEOFError","synthetic":true,"types":[]},{"text":"impl !Freeze for PyFloatingPointError","synthetic":true,"types":[]},{"text":"impl !Freeze for PyOSError","synthetic":true,"types":[]},{"text":"impl !Freeze for PyImportError","synthetic":true,"types":[]},{"text":"impl !Freeze for PyModuleNotFoundError","synthetic":true,"types":[]},{"text":"impl !Freeze for PyIndexError","synthetic":true,"types":[]},{"text":"impl !Freeze for PyKeyError","synthetic":true,"types":[]},{"text":"impl !Freeze for PyKeyboardInterrupt","synthetic":true,"types":[]},{"text":"impl !Freeze for PyMemoryError","synthetic":true,"types":[]},{"text":"impl !Freeze for PyNameError","synthetic":true,"types":[]},{"text":"impl !Freeze for PyOverflowError","synthetic":true,"types":[]},{"text":"impl !Freeze for PyRuntimeError","synthetic":true,"types":[]},{"text":"impl !Freeze for PyRecursionError","synthetic":true,"types":[]},{"text":"impl !Freeze for PyNotImplementedError","synthetic":true,"types":[]},{"text":"impl !Freeze for PySyntaxError","synthetic":true,"types":[]},{"text":"impl !Freeze for PyReferenceError","synthetic":true,"types":[]},{"text":"impl !Freeze for PySystemError","synthetic":true,"types":[]},{"text":"impl !Freeze for PySystemExit","synthetic":true,"types":[]},{"text":"impl !Freeze for PyTypeError","synthetic":true,"types":[]},{"text":"impl !Freeze for PyUnboundLocalError","synthetic":true,"types":[]},{"text":"impl !Freeze for PyUnicodeError","synthetic":true,"types":[]},{"text":"impl !Freeze for PyUnicodeDecodeError","synthetic":true,"types":[]},{"text":"impl !Freeze for PyUnicodeEncodeError","synthetic":true,"types":[]},{"text":"impl !Freeze for PyUnicodeTranslateError","synthetic":true,"types":[]},{"text":"impl !Freeze for PyValueError","synthetic":true,"types":[]},{"text":"impl !Freeze for PyZeroDivisionError","synthetic":true,"types":[]},{"text":"impl !Freeze for PyBlockingIOError","synthetic":true,"types":[]},{"text":"impl !Freeze for PyBrokenPipeError","synthetic":true,"types":[]},{"text":"impl !Freeze for PyChildProcessError","synthetic":true,"types":[]},{"text":"impl !Freeze for PyConnectionError","synthetic":true,"types":[]},{"text":"impl !Freeze for PyConnectionAbortedError","synthetic":true,"types":[]},{"text":"impl !Freeze for PyConnectionRefusedError","synthetic":true,"types":[]},{"text":"impl !Freeze for PyConnectionResetError","synthetic":true,"types":[]},{"text":"impl !Freeze for PyFileExistsError","synthetic":true,"types":[]},{"text":"impl !Freeze for PyFileNotFoundError","synthetic":true,"types":[]},{"text":"impl !Freeze for PyInterruptedError","synthetic":true,"types":[]},{"text":"impl !Freeze for PyIsADirectoryError","synthetic":true,"types":[]},{"text":"impl !Freeze for PyNotADirectoryError","synthetic":true,"types":[]},{"text":"impl !Freeze for PyPermissionError","synthetic":true,"types":[]},{"text":"impl !Freeze for PyProcessLookupError","synthetic":true,"types":[]},{"text":"impl !Freeze for PyTimeoutError","synthetic":true,"types":[]},{"text":"impl !Freeze for PyEnvironmentError","synthetic":true,"types":[]},{"text":"impl !Freeze for PyIOError","synthetic":true,"types":[]},{"text":"impl !Freeze for CancelledError","synthetic":true,"types":[]},{"text":"impl !Freeze for InvalidStateError","synthetic":true,"types":[]},{"text":"impl !Freeze for TimeoutError","synthetic":true,"types":[]},{"text":"impl !Freeze for IncompleteReadError","synthetic":true,"types":[]},{"text":"impl !Freeze for LimitOverrunError","synthetic":true,"types":[]},{"text":"impl !Freeze for QueueEmpty","synthetic":true,"types":[]},{"text":"impl !Freeze for QueueFull","synthetic":true,"types":[]},{"text":"impl !Freeze for herror","synthetic":true,"types":[]},{"text":"impl !Freeze for gaierror","synthetic":true,"types":[]},{"text":"impl !Freeze for timeout","synthetic":true,"types":[]},{"text":"impl Freeze for PyFutureFeatures","synthetic":true,"types":[]},{"text":"impl Freeze for Py_complex","synthetic":true,"types":[]},{"text":"impl Freeze for PyComplexObject","synthetic":true,"types":[]},{"text":"impl Freeze for PyDateTime_Delta","synthetic":true,"types":[]},{"text":"impl Freeze for PyDateTime_Time","synthetic":true,"types":[]},{"text":"impl Freeze for PyDateTime_Date","synthetic":true,"types":[]},{"text":"impl Freeze for PyDateTime_DateTime","synthetic":true,"types":[]},{"text":"impl Freeze for PyDateTime_CAPI","synthetic":true,"types":[]},{"text":"impl Freeze for PyDateTimeAPI","synthetic":true,"types":[]},{"text":"impl Freeze for PyGetSetDef","synthetic":true,"types":[]},{"text":"impl Freeze for PyFloatObject","synthetic":true,"types":[]},{"text":"impl Freeze for PyGenObject","synthetic":true,"types":[]},{"text":"impl Freeze for PyListObject","synthetic":true,"types":[]},{"text":"impl Freeze for PyLongObject","synthetic":true,"types":[]},{"text":"impl Freeze for PyMethodDef","synthetic":true,"types":[]},{"text":"impl Freeze for PyModuleDef_Base","synthetic":true,"types":[]},{"text":"impl Freeze for PyModuleDef_Slot","synthetic":true,"types":[]},{"text":"impl Freeze for PyModuleDef","synthetic":true,"types":[]},{"text":"impl Freeze for PyObject","synthetic":true,"types":[]},{"text":"impl Freeze for PyVarObject","synthetic":true,"types":[]},{"text":"impl Freeze for Py_buffer","synthetic":true,"types":[]},{"text":"impl Freeze for PyNumberMethods","synthetic":true,"types":[]},{"text":"impl Freeze for PySequenceMethods","synthetic":true,"types":[]},{"text":"impl Freeze for PyMappingMethods","synthetic":true,"types":[]},{"text":"impl Freeze for PyAsyncMethods","synthetic":true,"types":[]},{"text":"impl Freeze for PyTypeObject","synthetic":true,"types":[]},{"text":"impl Freeze for PyHeapTypeObject","synthetic":true,"types":[]},{"text":"impl Freeze for PyType_Slot","synthetic":true,"types":[]},{"text":"impl Freeze for PyType_Spec","synthetic":true,"types":[]},{"text":"impl Freeze for PyObjectArenaAllocator","synthetic":true,"types":[]},{"text":"impl Freeze for PyArena","synthetic":true,"types":[]},{"text":"impl Freeze for PyBaseExceptionObject","synthetic":true,"types":[]},{"text":"impl Freeze for PySyntaxErrorObject","synthetic":true,"types":[]},{"text":"impl Freeze for PyImportErrorObject","synthetic":true,"types":[]},{"text":"impl Freeze for PyUnicodeErrorObject","synthetic":true,"types":[]},{"text":"impl Freeze for PySystemExitObject","synthetic":true,"types":[]},{"text":"impl Freeze for PyOSErrorObject","synthetic":true,"types":[]},{"text":"impl Freeze for PyStopIterationObject","synthetic":true,"types":[]},{"text":"impl Freeze for PyHash_FuncDef","synthetic":true,"types":[]},{"text":"impl Freeze for PyMemAllocatorEx","synthetic":true,"types":[]},{"text":"impl Freeze for PyInterpreterState","synthetic":true,"types":[]},{"text":"impl Freeze for PyThreadState","synthetic":true,"types":[]},{"text":"impl Freeze for PyCompilerFlags","synthetic":true,"types":[]},{"text":"impl Freeze for _mod","synthetic":true,"types":[]},{"text":"impl Freeze for symtable","synthetic":true,"types":[]},{"text":"impl Freeze for _node","synthetic":true,"types":[]},{"text":"impl Freeze for setentry","synthetic":true,"types":[]},{"text":"impl Freeze for PySetObject","synthetic":true,"types":[]},{"text":"impl Freeze for PySliceObject","synthetic":true,"types":[]},{"text":"impl Freeze for PyStructSequence_Field","synthetic":true,"types":[]},{"text":"impl Freeze for PyStructSequence_Desc","synthetic":true,"types":[]},{"text":"impl Freeze for PyTupleObject","synthetic":true,"types":[]},{"text":"impl Freeze for PyWeakReference","synthetic":true,"types":[]},{"text":"impl Freeze for PyCodeObject","synthetic":true,"types":[]},{"text":"impl Freeze for PyDictKeysObject","synthetic":true,"types":[]},{"text":"impl Freeze for PyDictObject","synthetic":true,"types":[]},{"text":"impl Freeze for PyTryBlock","synthetic":true,"types":[]},{"text":"impl Freeze for PyFrameObject","synthetic":true,"types":[]},{"text":"impl Freeze for PyMemAllocatorDomain","synthetic":true,"types":[]},{"text":"impl Freeze for PyGILState_STATE","synthetic":true,"types":[]},{"text":"impl Freeze for PyMemberDef","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for FreeList&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Slot&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for GILOnceCell&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for PanicException","synthetic":true,"types":[]},{"text":"impl !Freeze for PyModule","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for PyCell&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'p, T&gt; Freeze for PyRef&lt;'p, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'p, T&gt; Freeze for PyRefMut&lt;'p, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for PyBorrowError","synthetic":true,"types":[]},{"text":"impl Freeze for PyBorrowMutError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for PyNativeTypeInitializer&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for PyClassInitializer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as PyTypeInfo&gt;::BaseType as PyTypeInfo&gt;::Initializer: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for PyClassDummySlot","synthetic":true,"types":[]},{"text":"impl Freeze for PyClassDictSlot","synthetic":true,"types":[]},{"text":"impl Freeze for PyClassWeakRefSlot","synthetic":true,"types":[]},{"text":"impl !Freeze for PyBool","synthetic":true,"types":[]},{"text":"impl !Freeze for PyByteArray","synthetic":true,"types":[]},{"text":"impl !Freeze for PyBytes","synthetic":true,"types":[]},{"text":"impl !Freeze for PyComplex","synthetic":true,"types":[]},{"text":"impl !Freeze for PyDate","synthetic":true,"types":[]},{"text":"impl !Freeze for PyDateTime","synthetic":true,"types":[]},{"text":"impl !Freeze for PyDelta","synthetic":true,"types":[]},{"text":"impl !Freeze for PyTime","synthetic":true,"types":[]},{"text":"impl !Freeze for PyTzInfo","synthetic":true,"types":[]},{"text":"impl !Freeze for PyDict","synthetic":true,"types":[]},{"text":"impl !Freeze for PyFloat","synthetic":true,"types":[]},{"text":"impl !Freeze for PyCFunction","synthetic":true,"types":[]},{"text":"impl !Freeze for PyFunction","synthetic":true,"types":[]},{"text":"impl !Freeze for PyIterator","synthetic":true,"types":[]},{"text":"impl !Freeze for PyList","synthetic":true,"types":[]},{"text":"impl !Freeze for PyLong","synthetic":true,"types":[]},{"text":"impl !Freeze for PySequence","synthetic":true,"types":[]},{"text":"impl !Freeze for PyFrozenSet","synthetic":true,"types":[]},{"text":"impl !Freeze for PySet","synthetic":true,"types":[]},{"text":"impl !Freeze for PySlice","synthetic":true,"types":[]},{"text":"impl Freeze for PySliceIndices","synthetic":true,"types":[]},{"text":"impl !Freeze for PyString","synthetic":true,"types":[]},{"text":"impl !Freeze for PyTuple","synthetic":true,"types":[]},{"text":"impl !Freeze for PyType","synthetic":true,"types":[]}];
implementors["pyo3_macros_backend"] = [{"text":"impl Freeze for PyClassArgs","synthetic":true,"types":[]},{"text":"impl Freeze for PyFunctionAttr","synthetic":true,"types":[]}];
implementors["r2d2"] = [{"text":"impl&lt;M&gt; Freeze for Builder&lt;M&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Extensions","synthetic":true,"types":[]},{"text":"impl Freeze for NopErrorHandler","synthetic":true,"types":[]},{"text":"impl Freeze for LoggingErrorHandler","synthetic":true,"types":[]},{"text":"impl Freeze for NopConnectionCustomizer","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; Freeze for Pool&lt;M&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for State","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; Freeze for PooledConnection&lt;M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;M as ManageConnection&gt;::Connection: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for NopEventHandler","synthetic":true,"types":[]},{"text":"impl Freeze for AcquireEvent","synthetic":true,"types":[]},{"text":"impl Freeze for ReleaseEvent","synthetic":true,"types":[]},{"text":"impl Freeze for CheckoutEvent","synthetic":true,"types":[]},{"text":"impl Freeze for TimeoutEvent","synthetic":true,"types":[]},{"text":"impl Freeze for CheckinEvent","synthetic":true,"types":[]}];
implementors["r2d2_postgres"] = [{"text":"impl&lt;T&gt; Freeze for PostgresConnectionManager&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rand"] = [{"text":"impl Freeze for Bernoulli","synthetic":true,"types":[]},{"text":"impl Freeze for Open01","synthetic":true,"types":[]},{"text":"impl Freeze for OpenClosed01","synthetic":true,"types":[]},{"text":"impl Freeze for Alphanumeric","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Freeze for Uniform&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Binomial","synthetic":true,"types":[]},{"text":"impl Freeze for Cauchy","synthetic":true,"types":[]},{"text":"impl Freeze for Dirichlet","synthetic":true,"types":[]},{"text":"impl Freeze for Exp","synthetic":true,"types":[]},{"text":"impl Freeze for Exp1","synthetic":true,"types":[]},{"text":"impl Freeze for Beta","synthetic":true,"types":[]},{"text":"impl Freeze for ChiSquared","synthetic":true,"types":[]},{"text":"impl Freeze for FisherF","synthetic":true,"types":[]},{"text":"impl Freeze for Gamma","synthetic":true,"types":[]},{"text":"impl Freeze for StudentT","synthetic":true,"types":[]},{"text":"impl Freeze for LogNormal","synthetic":true,"types":[]},{"text":"impl Freeze for Normal","synthetic":true,"types":[]},{"text":"impl Freeze for StandardNormal","synthetic":true,"types":[]},{"text":"impl Freeze for Pareto","synthetic":true,"types":[]},{"text":"impl Freeze for Poisson","synthetic":true,"types":[]},{"text":"impl Freeze for Triangular","synthetic":true,"types":[]},{"text":"impl Freeze for UnitCircle","synthetic":true,"types":[]},{"text":"impl Freeze for UnitSphereSurface","synthetic":true,"types":[]},{"text":"impl Freeze for Weibull","synthetic":true,"types":[]},{"text":"impl&lt;D, R, T&gt; Freeze for DistIter&lt;D, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Standard","synthetic":true,"types":[]},{"text":"impl Freeze for BernoulliError","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Freeze for UniformInt&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Freeze for UniformFloat&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for UniformDuration","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Freeze for WeightedIndex&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for WeightedError","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for WeightedIndex&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;W as SampleUniform&gt;::Sampler: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for EntropyRng","synthetic":true,"types":[]},{"text":"impl Freeze for StdRng","synthetic":true,"types":[]},{"text":"impl Freeze for ThreadRng","synthetic":true,"types":[]},{"text":"impl Freeze for ReadError","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for ReadRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Rsdr&gt; Freeze for ReseedingRng&lt;R, Rsdr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Rsdr: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for StepRng","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, T&gt; Freeze for SliceChooseIter&lt;'a, S, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for IndexVec","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for IndexVecIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for IndexVecIntoIter","synthetic":true,"types":[]}];
implementors["rand_chacha"] = [{"text":"impl Freeze for ChaCha12Core","synthetic":true,"types":[]},{"text":"impl Freeze for ChaCha12Rng","synthetic":true,"types":[]},{"text":"impl Freeze for ChaCha20Core","synthetic":true,"types":[]},{"text":"impl Freeze for ChaCha20Rng","synthetic":true,"types":[]},{"text":"impl Freeze for ChaCha8Core","synthetic":true,"types":[]},{"text":"impl Freeze for ChaCha8Rng","synthetic":true,"types":[]}];
implementors["rand_core"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for OsRng","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; Freeze for BlockRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; Freeze for BlockRng64&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rayon"] = [{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Drain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Freeze for IntoIter&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Freeze for IntoIter&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Drain&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Drain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Drain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Freeze for Chain&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Chunks&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Cloned&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Copied&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Empty&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Enumerate&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Freeze for Filter&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Freeze for FilterMap&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for FlatMap&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for FlatMapIter&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Flatten&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for FlattenIter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, ID, F&gt; Freeze for Fold&lt;I, ID, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;ID: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; Freeze for FoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for Inspect&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Freeze for Interleave&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Freeze for InterleaveShortest&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Intersperse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as ParallelIterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for MaxLen&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for MinLen&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for Map&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, INIT, F&gt; Freeze for MapInit&lt;I, INIT, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;INIT: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T, F&gt; Freeze for MapWith&lt;I, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for MultiZip&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Once&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for PanicFuse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Iter&gt; Freeze for IterBridge&lt;Iter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Iter: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Freeze for Positions&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Repeat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for RepeatN&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Rev&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Skip&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D, S&gt; Freeze for Split&lt;D, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Take&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, ID, F&gt; Freeze for TryFold&lt;I, U, ID, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;ID: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; Freeze for TryFoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as Try&gt;::Ok: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for Update&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for WhileSome&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Freeze for Zip&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Freeze for ZipEq&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for StepBy&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Freeze for Iter&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Freeze for Chunks&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Freeze for ChunksExact&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Freeze for Windows&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Freeze for IterMut&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Freeze for ChunksMut&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Freeze for ChunksExactMut&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T, P&gt; Freeze for Split&lt;'data, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T, P&gt; Freeze for SplitMut&lt;'data, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Freeze for Chars&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Freeze for CharIndices&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Freeze for Bytes&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Freeze for EncodeUtf16&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Freeze for Split&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Freeze for SplitTerminator&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Freeze for Lines&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Freeze for SplitWhitespace&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Freeze for Matches&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Freeze for MatchIndices&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Drain&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Freeze for Drain&lt;'data, T&gt;","synthetic":true,"types":[]}];
implementors["rayon_core"] = [{"text":"impl !Freeze for ThreadBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; !Freeze for Scope&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; !Freeze for ScopeFifo&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ThreadPool","synthetic":true,"types":[]},{"text":"impl Freeze for ThreadPoolBuildError","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for ThreadPoolBuilder&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Configuration","synthetic":true,"types":[]},{"text":"impl Freeze for FnContext","synthetic":true,"types":[]}];
implementors["regex"] = [{"text":"impl Freeze for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for RegexBuilder","synthetic":true,"types":[]},{"text":"impl !Freeze for RegexSet","synthetic":true,"types":[]},{"text":"impl Freeze for SetMatches","synthetic":true,"types":[]},{"text":"impl Freeze for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Freeze for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; Freeze for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Freeze for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Freeze for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Freeze for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Freeze for NoExpand&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Freeze for ReplacerRef&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Freeze for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Freeze for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; Freeze for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for RegexBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Freeze for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Freeze for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Freeze for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Freeze for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Freeze for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; Freeze for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Freeze for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; Freeze for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Freeze for ReplacerRef&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Freeze for NoExpand&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for RegexSet","synthetic":true,"types":[]},{"text":"impl Freeze for SetMatches","synthetic":true,"types":[]},{"text":"impl Freeze for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["regex_automata"] = [{"text":"impl&lt;D&gt; Freeze for Regex&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Freeze for DenseDFA&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Freeze for SparseDFA&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Freeze for Standard&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Freeze for ByteClass&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Freeze for Premultiplied&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Freeze for PremultipliedByteClass&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Freeze for Standard&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Freeze for ByteClass&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl !Freeze for Parser","synthetic":true,"types":[]},{"text":"impl Freeze for ParserBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for UnicodeWordError","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Span","synthetic":true,"types":[]},{"text":"impl Freeze for Position","synthetic":true,"types":[]},{"text":"impl Freeze for WithComments","synthetic":true,"types":[]},{"text":"impl Freeze for Comment","synthetic":true,"types":[]},{"text":"impl Freeze for Alternation","synthetic":true,"types":[]},{"text":"impl Freeze for Concat","synthetic":true,"types":[]},{"text":"impl Freeze for Literal","synthetic":true,"types":[]},{"text":"impl Freeze for ClassPerl","synthetic":true,"types":[]},{"text":"impl Freeze for ClassAscii","synthetic":true,"types":[]},{"text":"impl Freeze for ClassUnicode","synthetic":true,"types":[]},{"text":"impl Freeze for ClassBracketed","synthetic":true,"types":[]},{"text":"impl Freeze for ClassSetRange","synthetic":true,"types":[]},{"text":"impl Freeze for ClassSetUnion","synthetic":true,"types":[]},{"text":"impl Freeze for ClassSetBinaryOp","synthetic":true,"types":[]},{"text":"impl Freeze for Assertion","synthetic":true,"types":[]},{"text":"impl Freeze for Repetition","synthetic":true,"types":[]},{"text":"impl Freeze for RepetitionOp","synthetic":true,"types":[]},{"text":"impl Freeze for Group","synthetic":true,"types":[]},{"text":"impl Freeze for CaptureName","synthetic":true,"types":[]},{"text":"impl Freeze for SetFlags","synthetic":true,"types":[]},{"text":"impl Freeze for Flags","synthetic":true,"types":[]},{"text":"impl Freeze for FlagsItem","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorKind","synthetic":true,"types":[]},{"text":"impl Freeze for Ast","synthetic":true,"types":[]},{"text":"impl Freeze for LiteralKind","synthetic":true,"types":[]},{"text":"impl Freeze for SpecialLiteralKind","synthetic":true,"types":[]},{"text":"impl Freeze for HexLiteralKind","synthetic":true,"types":[]},{"text":"impl Freeze for Class","synthetic":true,"types":[]},{"text":"impl Freeze for ClassPerlKind","synthetic":true,"types":[]},{"text":"impl Freeze for ClassAsciiKind","synthetic":true,"types":[]},{"text":"impl Freeze for ClassUnicodeKind","synthetic":true,"types":[]},{"text":"impl Freeze for ClassUnicodeOpKind","synthetic":true,"types":[]},{"text":"impl Freeze for ClassSet","synthetic":true,"types":[]},{"text":"impl Freeze for ClassSetItem","synthetic":true,"types":[]},{"text":"impl Freeze for ClassSetBinaryOpKind","synthetic":true,"types":[]},{"text":"impl Freeze for AssertionKind","synthetic":true,"types":[]},{"text":"impl Freeze for RepetitionKind","synthetic":true,"types":[]},{"text":"impl Freeze for RepetitionRange","synthetic":true,"types":[]},{"text":"impl Freeze for GroupKind","synthetic":true,"types":[]},{"text":"impl Freeze for FlagsItemKind","synthetic":true,"types":[]},{"text":"impl Freeze for Flag","synthetic":true,"types":[]},{"text":"impl Freeze for ParserBuilder","synthetic":true,"types":[]},{"text":"impl !Freeze for Parser","synthetic":true,"types":[]},{"text":"impl Freeze for Printer","synthetic":true,"types":[]},{"text":"impl Freeze for CaseFoldError","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Hir","synthetic":true,"types":[]},{"text":"impl Freeze for ClassUnicode","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ClassUnicodeIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ClassUnicodeRange","synthetic":true,"types":[]},{"text":"impl Freeze for ClassBytes","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ClassBytesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ClassBytesRange","synthetic":true,"types":[]},{"text":"impl Freeze for Group","synthetic":true,"types":[]},{"text":"impl Freeze for Repetition","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorKind","synthetic":true,"types":[]},{"text":"impl Freeze for HirKind","synthetic":true,"types":[]},{"text":"impl Freeze for Literal","synthetic":true,"types":[]},{"text":"impl Freeze for Class","synthetic":true,"types":[]},{"text":"impl Freeze for Anchor","synthetic":true,"types":[]},{"text":"impl Freeze for WordBoundary","synthetic":true,"types":[]},{"text":"impl Freeze for GroupKind","synthetic":true,"types":[]},{"text":"impl Freeze for RepetitionKind","synthetic":true,"types":[]},{"text":"impl Freeze for RepetitionRange","synthetic":true,"types":[]},{"text":"impl Freeze for Literals","synthetic":true,"types":[]},{"text":"impl Freeze for Literal","synthetic":true,"types":[]},{"text":"impl Freeze for Printer","synthetic":true,"types":[]},{"text":"impl Freeze for TranslatorBuilder","synthetic":true,"types":[]},{"text":"impl !Freeze for Translator","synthetic":true,"types":[]},{"text":"impl Freeze for Utf8Range","synthetic":true,"types":[]},{"text":"impl Freeze for Utf8Sequences","synthetic":true,"types":[]},{"text":"impl Freeze for Utf8Sequence","synthetic":true,"types":[]}];
implementors["rusoto_core"] = [{"text":"impl Freeze for Client","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; !Freeze for RusotoError&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for EventStream&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for HttpResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for BufferedHttpResponse","synthetic":true,"types":[]},{"text":"impl Freeze for HttpDispatchError","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Freeze for HttpClient&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for HttpConfig","synthetic":true,"types":[]},{"text":"impl Freeze for TlsError","synthetic":true,"types":[]}];
implementors["rusoto_credential"] = [{"text":"impl Freeze for ContainerProvider","synthetic":true,"types":[]},{"text":"impl Freeze for EnvironmentProvider","synthetic":true,"types":[]},{"text":"impl Freeze for InstanceMetadataProvider","synthetic":true,"types":[]},{"text":"impl Freeze for ProfileProvider","synthetic":true,"types":[]},{"text":"impl Freeze for Secret","synthetic":true,"types":[]},{"text":"impl Freeze for StaticProvider","synthetic":true,"types":[]},{"text":"impl Freeze for AwsCredentials","synthetic":true,"types":[]},{"text":"impl Freeze for CredentialsError","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Freeze for AutoRefreshingProvider&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for DefaultCredentialsProvider","synthetic":true,"types":[]},{"text":"impl Freeze for ChainProvider","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Freeze for Variable&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rusoto_s3"] = [{"text":"impl Freeze for AbortIncompleteMultipartUpload","synthetic":true,"types":[]},{"text":"impl Freeze for AbortIncompleteMultipartUploadSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for AbortMultipartUploadOutput","synthetic":true,"types":[]},{"text":"impl Freeze for AbortMultipartUploadRequest","synthetic":true,"types":[]},{"text":"impl Freeze for AccelerateConfiguration","synthetic":true,"types":[]},{"text":"impl Freeze for AccelerateConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for AccessControlPolicy","synthetic":true,"types":[]},{"text":"impl Freeze for AccessControlPolicySerializer","synthetic":true,"types":[]},{"text":"impl Freeze for AccessControlTranslation","synthetic":true,"types":[]},{"text":"impl Freeze for AccessControlTranslationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for AccountIdSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for AllowQuotedRecordDelimiterSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for AllowedHeaderSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for AllowedHeadersSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for AllowedMethodSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for AllowedMethodsSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for AllowedOriginSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for AllowedOriginsSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for AnalyticsAndOperator","synthetic":true,"types":[]},{"text":"impl Freeze for AnalyticsAndOperatorSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for AnalyticsConfiguration","synthetic":true,"types":[]},{"text":"impl Freeze for AnalyticsConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for AnalyticsExportDestination","synthetic":true,"types":[]},{"text":"impl Freeze for AnalyticsExportDestinationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for AnalyticsFilter","synthetic":true,"types":[]},{"text":"impl Freeze for AnalyticsFilterSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for AnalyticsIdSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for AnalyticsS3BucketDestination","synthetic":true,"types":[]},{"text":"impl Freeze for AnalyticsS3BucketDestinationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for AnalyticsS3ExportFileFormatSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for BodySerializer","synthetic":true,"types":[]},{"text":"impl Freeze for Bucket","synthetic":true,"types":[]},{"text":"impl Freeze for BucketAccelerateStatusSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for BucketKeyEnabledSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for BucketLifecycleConfiguration","synthetic":true,"types":[]},{"text":"impl Freeze for BucketLifecycleConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for BucketLocationConstraintSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for BucketLoggingStatus","synthetic":true,"types":[]},{"text":"impl Freeze for BucketLoggingStatusSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for BucketLogsPermissionSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for BucketNameSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for BucketVersioningStatusSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for CORSConfiguration","synthetic":true,"types":[]},{"text":"impl Freeze for CORSConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for CORSRule","synthetic":true,"types":[]},{"text":"impl Freeze for CORSRuleSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for CORSRulesSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for CSVInput","synthetic":true,"types":[]},{"text":"impl Freeze for CSVInputSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for CSVOutput","synthetic":true,"types":[]},{"text":"impl Freeze for CSVOutputSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for CloudFunctionSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for CloudFunctionConfiguration","synthetic":true,"types":[]},{"text":"impl Freeze for CloudFunctionConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for CloudFunctionInvocationRoleSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for CommentsSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for CommonPrefix","synthetic":true,"types":[]},{"text":"impl Freeze for CompleteMultipartUploadOutput","synthetic":true,"types":[]},{"text":"impl Freeze for CompleteMultipartUploadRequest","synthetic":true,"types":[]},{"text":"impl Freeze for CompletedMultipartUpload","synthetic":true,"types":[]},{"text":"impl Freeze for CompletedMultipartUploadSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for CompletedPart","synthetic":true,"types":[]},{"text":"impl Freeze for CompletedPartSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for CompletedPartListSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for CompressionTypeSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for Condition","synthetic":true,"types":[]},{"text":"impl Freeze for ConditionSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ContinuationEvent","synthetic":true,"types":[]},{"text":"impl Freeze for CopyObjectOutput","synthetic":true,"types":[]},{"text":"impl Freeze for CopyObjectRequest","synthetic":true,"types":[]},{"text":"impl Freeze for CopyObjectResult","synthetic":true,"types":[]},{"text":"impl Freeze for CopyPartResult","synthetic":true,"types":[]},{"text":"impl Freeze for CreateBucketConfiguration","synthetic":true,"types":[]},{"text":"impl Freeze for CreateBucketConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for CreateBucketOutput","synthetic":true,"types":[]},{"text":"impl Freeze for CreateBucketRequest","synthetic":true,"types":[]},{"text":"impl Freeze for CreateMultipartUploadOutput","synthetic":true,"types":[]},{"text":"impl Freeze for CreateMultipartUploadRequest","synthetic":true,"types":[]},{"text":"impl Freeze for DateSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for DaysSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for DaysAfterInitiationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for DefaultRetention","synthetic":true,"types":[]},{"text":"impl Freeze for DefaultRetentionSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for Delete","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteBucketAnalyticsConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteBucketCorsRequest","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteBucketEncryptionRequest","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteBucketIntelligentTieringConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteBucketInventoryConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteBucketLifecycleRequest","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteBucketMetricsConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteBucketOwnershipControlsRequest","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteBucketPolicyRequest","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteBucketReplicationRequest","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteBucketRequest","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteBucketTaggingRequest","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteBucketWebsiteRequest","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteMarkerEntry","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteMarkerReplication","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteMarkerReplicationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteMarkerReplicationStatusSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteObjectOutput","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteObjectRequest","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteObjectTaggingOutput","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteObjectTaggingRequest","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteObjectsOutput","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteObjectsRequest","synthetic":true,"types":[]},{"text":"impl Freeze for DeletePublicAccessBlockRequest","synthetic":true,"types":[]},{"text":"impl Freeze for DeletedObject","synthetic":true,"types":[]},{"text":"impl Freeze for DelimiterSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for DescriptionSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for Destination","synthetic":true,"types":[]},{"text":"impl Freeze for DestinationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for DisplayNameSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ETagSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for EmailAddressSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for EnableRequestProgressSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for EncodingTypeSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for Encryption","synthetic":true,"types":[]},{"text":"impl Freeze for EncryptionSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for EncryptionConfiguration","synthetic":true,"types":[]},{"text":"impl Freeze for EncryptionConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for EndSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for EndEvent","synthetic":true,"types":[]},{"text":"impl Freeze for S3Error","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorDocument","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorDocumentSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for EventSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for EventListSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ExistingObjectReplication","synthetic":true,"types":[]},{"text":"impl Freeze for ExistingObjectReplicationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ExistingObjectReplicationStatusSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ExpirationStatusSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ExpiredObjectDeleteMarkerSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ExposeHeaderSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ExposeHeadersSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ExpressionSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ExpressionTypeSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for FetchOwnerSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for FieldDelimiterSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for FileHeaderInfoSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for FilterRule","synthetic":true,"types":[]},{"text":"impl Freeze for FilterRuleSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for FilterRuleListSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for FilterRuleNameSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for FilterRuleValueSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketAccelerateConfigurationOutput","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketAccelerateConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketAclOutput","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketAclRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketAnalyticsConfigurationOutput","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketAnalyticsConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketCorsOutput","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketCorsRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketEncryptionOutput","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketEncryptionRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketIntelligentTieringConfigurationOutput","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketIntelligentTieringConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketInventoryConfigurationOutput","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketInventoryConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketLifecycleConfigurationOutput","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketLifecycleConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketLifecycleOutput","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketLifecycleRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketLocationOutput","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketLocationRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketLoggingOutput","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketLoggingRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketMetricsConfigurationOutput","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketMetricsConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketNotificationConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketOwnershipControlsOutput","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketOwnershipControlsRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketPolicyOutput","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketPolicyRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketPolicyStatusOutput","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketPolicyStatusRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketReplicationOutput","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketReplicationRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketRequestPaymentOutput","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketRequestPaymentRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketTaggingOutput","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketTaggingRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketVersioningOutput","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketVersioningRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketWebsiteOutput","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketWebsiteRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetObjectAclOutput","synthetic":true,"types":[]},{"text":"impl Freeze for GetObjectAclRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetObjectLegalHoldOutput","synthetic":true,"types":[]},{"text":"impl Freeze for GetObjectLegalHoldRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetObjectLockConfigurationOutput","synthetic":true,"types":[]},{"text":"impl Freeze for GetObjectLockConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetObjectOutput","synthetic":true,"types":[]},{"text":"impl Freeze for GetObjectRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetObjectRetentionOutput","synthetic":true,"types":[]},{"text":"impl Freeze for GetObjectRetentionRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetObjectTaggingOutput","synthetic":true,"types":[]},{"text":"impl Freeze for GetObjectTaggingRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetObjectTorrentOutput","synthetic":true,"types":[]},{"text":"impl Freeze for GetObjectTorrentRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetPublicAccessBlockOutput","synthetic":true,"types":[]},{"text":"impl Freeze for GetPublicAccessBlockRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GlacierJobParameters","synthetic":true,"types":[]},{"text":"impl Freeze for GlacierJobParametersSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for Grant","synthetic":true,"types":[]},{"text":"impl Freeze for GrantSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for Grantee","synthetic":true,"types":[]},{"text":"impl Freeze for GranteeSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for GrantsSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for HeadBucketRequest","synthetic":true,"types":[]},{"text":"impl Freeze for HeadObjectOutput","synthetic":true,"types":[]},{"text":"impl Freeze for HeadObjectRequest","synthetic":true,"types":[]},{"text":"impl Freeze for HostNameSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for HttpErrorCodeReturnedEqualsSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for HttpRedirectCodeSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for IDSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for IndexDocument","synthetic":true,"types":[]},{"text":"impl Freeze for IndexDocumentSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for Initiator","synthetic":true,"types":[]},{"text":"impl Freeze for InputSerialization","synthetic":true,"types":[]},{"text":"impl Freeze for InputSerializationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for IntelligentTieringAccessTierSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for IntelligentTieringAndOperator","synthetic":true,"types":[]},{"text":"impl Freeze for IntelligentTieringAndOperatorSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for IntelligentTieringConfiguration","synthetic":true,"types":[]},{"text":"impl Freeze for IntelligentTieringConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for IntelligentTieringDaysSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for IntelligentTieringFilter","synthetic":true,"types":[]},{"text":"impl Freeze for IntelligentTieringFilterSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for IntelligentTieringIdSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for IntelligentTieringStatusSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for InventoryConfiguration","synthetic":true,"types":[]},{"text":"impl Freeze for InventoryConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for InventoryDestination","synthetic":true,"types":[]},{"text":"impl Freeze for InventoryDestinationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for InventoryEncryption","synthetic":true,"types":[]},{"text":"impl Freeze for InventoryEncryptionSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for InventoryFilter","synthetic":true,"types":[]},{"text":"impl Freeze for InventoryFilterSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for InventoryFormatSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for InventoryFrequencySerializer","synthetic":true,"types":[]},{"text":"impl Freeze for InventoryIdSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for InventoryIncludedObjectVersionsSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for InventoryOptionalFieldSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for InventoryOptionalFieldsSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for InventoryS3BucketDestination","synthetic":true,"types":[]},{"text":"impl Freeze for InventoryS3BucketDestinationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for InventorySchedule","synthetic":true,"types":[]},{"text":"impl Freeze for InventoryScheduleSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for IsEnabledSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for JSONInput","synthetic":true,"types":[]},{"text":"impl Freeze for JSONInputSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for JSONOutput","synthetic":true,"types":[]},{"text":"impl Freeze for JSONOutputSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for JSONTypeSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for KMSContextSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for KeyMarkerSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for KeyPrefixEqualsSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for LambdaFunctionArnSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for LambdaFunctionConfiguration","synthetic":true,"types":[]},{"text":"impl Freeze for LambdaFunctionConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for LambdaFunctionConfigurationListSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for LifecycleConfiguration","synthetic":true,"types":[]},{"text":"impl Freeze for LifecycleConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for LifecycleExpiration","synthetic":true,"types":[]},{"text":"impl Freeze for LifecycleExpirationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for LifecycleRule","synthetic":true,"types":[]},{"text":"impl Freeze for LifecycleRuleSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for LifecycleRuleAndOperator","synthetic":true,"types":[]},{"text":"impl Freeze for LifecycleRuleAndOperatorSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for LifecycleRuleFilter","synthetic":true,"types":[]},{"text":"impl Freeze for LifecycleRuleFilterSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for LifecycleRulesSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ListBucketAnalyticsConfigurationsOutput","synthetic":true,"types":[]},{"text":"impl Freeze for ListBucketAnalyticsConfigurationsRequest","synthetic":true,"types":[]},{"text":"impl Freeze for ListBucketIntelligentTieringConfigurationsOutput","synthetic":true,"types":[]},{"text":"impl Freeze for ListBucketIntelligentTieringConfigurationsRequest","synthetic":true,"types":[]},{"text":"impl Freeze for ListBucketInventoryConfigurationsOutput","synthetic":true,"types":[]},{"text":"impl Freeze for ListBucketInventoryConfigurationsRequest","synthetic":true,"types":[]},{"text":"impl Freeze for ListBucketMetricsConfigurationsOutput","synthetic":true,"types":[]},{"text":"impl Freeze for ListBucketMetricsConfigurationsRequest","synthetic":true,"types":[]},{"text":"impl Freeze for ListBucketsOutput","synthetic":true,"types":[]},{"text":"impl Freeze for ListMultipartUploadsOutput","synthetic":true,"types":[]},{"text":"impl Freeze for ListMultipartUploadsRequest","synthetic":true,"types":[]},{"text":"impl Freeze for ListObjectVersionsOutput","synthetic":true,"types":[]},{"text":"impl Freeze for ListObjectVersionsRequest","synthetic":true,"types":[]},{"text":"impl Freeze for ListObjectsOutput","synthetic":true,"types":[]},{"text":"impl Freeze for ListObjectsRequest","synthetic":true,"types":[]},{"text":"impl Freeze for ListObjectsV2Output","synthetic":true,"types":[]},{"text":"impl Freeze for ListObjectsV2Request","synthetic":true,"types":[]},{"text":"impl Freeze for ListPartsOutput","synthetic":true,"types":[]},{"text":"impl Freeze for ListPartsRequest","synthetic":true,"types":[]},{"text":"impl Freeze for LocationPrefixSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for LoggingEnabled","synthetic":true,"types":[]},{"text":"impl Freeze for LoggingEnabledSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for MFADeleteSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for MarkerSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for MaxAgeSecondsSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for MaxKeysSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for MaxPartsSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for MaxUploadsSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for MetadataEntry","synthetic":true,"types":[]},{"text":"impl Freeze for MetadataEntrySerializer","synthetic":true,"types":[]},{"text":"impl Freeze for MetadataKeySerializer","synthetic":true,"types":[]},{"text":"impl Freeze for MetadataValueSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for Metrics","synthetic":true,"types":[]},{"text":"impl Freeze for MetricsSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for MetricsAndOperator","synthetic":true,"types":[]},{"text":"impl Freeze for MetricsAndOperatorSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for MetricsConfiguration","synthetic":true,"types":[]},{"text":"impl Freeze for MetricsConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for MetricsFilter","synthetic":true,"types":[]},{"text":"impl Freeze for MetricsFilterSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for MetricsIdSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for MetricsStatusSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for MinutesSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for MultipartUpload","synthetic":true,"types":[]},{"text":"impl Freeze for MultipartUploadIdSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for NoncurrentVersionExpiration","synthetic":true,"types":[]},{"text":"impl Freeze for NoncurrentVersionExpirationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for NoncurrentVersionTransition","synthetic":true,"types":[]},{"text":"impl Freeze for NoncurrentVersionTransitionSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for NoncurrentVersionTransitionListSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for NotificationConfiguration","synthetic":true,"types":[]},{"text":"impl Freeze for NotificationConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for NotificationConfigurationDeprecated","synthetic":true,"types":[]},{"text":"impl Freeze for NotificationConfigurationDeprecatedSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for NotificationConfigurationFilter","synthetic":true,"types":[]},{"text":"impl Freeze for NotificationConfigurationFilterSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for NotificationIdSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for Object","synthetic":true,"types":[]},{"text":"impl Freeze for ObjectCannedACLSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ObjectIdentifier","synthetic":true,"types":[]},{"text":"impl Freeze for ObjectIdentifierSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ObjectIdentifierListSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ObjectKeySerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ObjectLockConfiguration","synthetic":true,"types":[]},{"text":"impl Freeze for ObjectLockConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ObjectLockEnabledSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ObjectLockLegalHold","synthetic":true,"types":[]},{"text":"impl Freeze for ObjectLockLegalHoldSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ObjectLockLegalHoldStatusSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ObjectLockRetention","synthetic":true,"types":[]},{"text":"impl Freeze for ObjectLockRetentionSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ObjectLockRetentionModeSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ObjectLockRule","synthetic":true,"types":[]},{"text":"impl Freeze for ObjectLockRuleSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ObjectOwnershipSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ObjectVersion","synthetic":true,"types":[]},{"text":"impl Freeze for ObjectVersionIdSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for OutputLocation","synthetic":true,"types":[]},{"text":"impl Freeze for OutputLocationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for OutputSerialization","synthetic":true,"types":[]},{"text":"impl Freeze for OutputSerializationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for Owner","synthetic":true,"types":[]},{"text":"impl Freeze for OwnerSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for OwnerOverrideSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for OwnershipControls","synthetic":true,"types":[]},{"text":"impl Freeze for OwnershipControlsSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for OwnershipControlsRule","synthetic":true,"types":[]},{"text":"impl Freeze for OwnershipControlsRuleSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for OwnershipControlsRulesSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ParquetInput","synthetic":true,"types":[]},{"text":"impl Freeze for ParquetInputSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for Part","synthetic":true,"types":[]},{"text":"impl Freeze for PartNumberSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for PartNumberMarkerSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for PayerSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for PermissionSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for PolicyStatus","synthetic":true,"types":[]},{"text":"impl Freeze for PrefixSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for PrioritySerializer","synthetic":true,"types":[]},{"text":"impl Freeze for Progress","synthetic":true,"types":[]},{"text":"impl Freeze for ProgressEvent","synthetic":true,"types":[]},{"text":"impl Freeze for ProtocolSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for PublicAccessBlockConfiguration","synthetic":true,"types":[]},{"text":"impl Freeze for PublicAccessBlockConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketAccelerateConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketAclRequest","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketAnalyticsConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketCorsRequest","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketEncryptionRequest","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketIntelligentTieringConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketInventoryConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketLifecycleConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketLifecycleRequest","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketLoggingRequest","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketMetricsConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketNotificationConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketNotificationRequest","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketOwnershipControlsRequest","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketPolicyRequest","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketReplicationRequest","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketRequestPaymentRequest","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketTaggingRequest","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketVersioningRequest","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketWebsiteRequest","synthetic":true,"types":[]},{"text":"impl Freeze for PutObjectAclOutput","synthetic":true,"types":[]},{"text":"impl Freeze for PutObjectAclRequest","synthetic":true,"types":[]},{"text":"impl Freeze for PutObjectLegalHoldOutput","synthetic":true,"types":[]},{"text":"impl Freeze for PutObjectLegalHoldRequest","synthetic":true,"types":[]},{"text":"impl Freeze for PutObjectLockConfigurationOutput","synthetic":true,"types":[]},{"text":"impl Freeze for PutObjectLockConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Freeze for PutObjectOutput","synthetic":true,"types":[]},{"text":"impl Freeze for PutObjectRequest","synthetic":true,"types":[]},{"text":"impl Freeze for PutObjectRetentionOutput","synthetic":true,"types":[]},{"text":"impl Freeze for PutObjectRetentionRequest","synthetic":true,"types":[]},{"text":"impl Freeze for PutObjectTaggingOutput","synthetic":true,"types":[]},{"text":"impl Freeze for PutObjectTaggingRequest","synthetic":true,"types":[]},{"text":"impl Freeze for PutPublicAccessBlockRequest","synthetic":true,"types":[]},{"text":"impl Freeze for QueueArnSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for QueueConfiguration","synthetic":true,"types":[]},{"text":"impl Freeze for QueueConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for QueueConfigurationDeprecated","synthetic":true,"types":[]},{"text":"impl Freeze for QueueConfigurationDeprecatedSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for QueueConfigurationListSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for QuietSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for QuoteCharacterSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for QuoteEscapeCharacterSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for QuoteFieldsSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for RecordDelimiterSerializer","synthetic":true,"types":[]},{"text":"impl !Freeze for RecordsEvent","synthetic":true,"types":[]},{"text":"impl Freeze for Redirect","synthetic":true,"types":[]},{"text":"impl Freeze for RedirectSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for RedirectAllRequestsTo","synthetic":true,"types":[]},{"text":"impl Freeze for RedirectAllRequestsToSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ReplaceKeyPrefixWithSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ReplaceKeyWithSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ReplicaKmsKeyIDSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ReplicaModifications","synthetic":true,"types":[]},{"text":"impl Freeze for ReplicaModificationsSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ReplicaModificationsStatusSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ReplicationConfiguration","synthetic":true,"types":[]},{"text":"impl Freeze for ReplicationConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ReplicationRule","synthetic":true,"types":[]},{"text":"impl Freeze for ReplicationRuleSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ReplicationRuleAndOperator","synthetic":true,"types":[]},{"text":"impl Freeze for ReplicationRuleAndOperatorSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ReplicationRuleFilter","synthetic":true,"types":[]},{"text":"impl Freeze for ReplicationRuleFilterSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ReplicationRuleStatusSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ReplicationRulesSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ReplicationTime","synthetic":true,"types":[]},{"text":"impl Freeze for ReplicationTimeSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ReplicationTimeStatusSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ReplicationTimeValue","synthetic":true,"types":[]},{"text":"impl Freeze for ReplicationTimeValueSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for RequestPaymentConfiguration","synthetic":true,"types":[]},{"text":"impl Freeze for RequestPaymentConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for RequestProgress","synthetic":true,"types":[]},{"text":"impl Freeze for RequestProgressSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ResponseCacheControlSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ResponseContentDispositionSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ResponseContentEncodingSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ResponseContentLanguageSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ResponseContentTypeSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ResponseExpiresSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for RestoreObjectOutput","synthetic":true,"types":[]},{"text":"impl Freeze for RestoreObjectRequest","synthetic":true,"types":[]},{"text":"impl Freeze for RestoreRequest","synthetic":true,"types":[]},{"text":"impl Freeze for RestoreRequestSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for RestoreRequestTypeSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for RoleSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for RoutingRule","synthetic":true,"types":[]},{"text":"impl Freeze for RoutingRuleSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for RoutingRulesSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for Rule","synthetic":true,"types":[]},{"text":"impl Freeze for RuleSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for RulesSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for S3KeyFilter","synthetic":true,"types":[]},{"text":"impl Freeze for S3KeyFilterSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for S3Location","synthetic":true,"types":[]},{"text":"impl Freeze for S3LocationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for SSEKMS","synthetic":true,"types":[]},{"text":"impl Freeze for SSEKMSSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for SSEKMSKeyIdSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for SSES3","synthetic":true,"types":[]},{"text":"impl Freeze for SSES3Serializer","synthetic":true,"types":[]},{"text":"impl Freeze for ScanRange","synthetic":true,"types":[]},{"text":"impl Freeze for ScanRangeSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for SelectObjectContentOutput","synthetic":true,"types":[]},{"text":"impl Freeze for SelectObjectContentRequest","synthetic":true,"types":[]},{"text":"impl Freeze for SelectObjectContentRequestSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for SelectParameters","synthetic":true,"types":[]},{"text":"impl Freeze for SelectParametersSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ServerSideEncryptionSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ServerSideEncryptionByDefault","synthetic":true,"types":[]},{"text":"impl Freeze for ServerSideEncryptionByDefaultSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ServerSideEncryptionConfiguration","synthetic":true,"types":[]},{"text":"impl Freeze for ServerSideEncryptionConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ServerSideEncryptionRule","synthetic":true,"types":[]},{"text":"impl Freeze for ServerSideEncryptionRuleSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ServerSideEncryptionRulesSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for SettingSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for SourceSelectionCriteria","synthetic":true,"types":[]},{"text":"impl Freeze for SourceSelectionCriteriaSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for SseKmsEncryptedObjects","synthetic":true,"types":[]},{"text":"impl Freeze for SseKmsEncryptedObjectsSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for SseKmsEncryptedObjectsStatusSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for StartSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for StartAfterSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for Stats","synthetic":true,"types":[]},{"text":"impl Freeze for StatsEvent","synthetic":true,"types":[]},{"text":"impl Freeze for StorageClassSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for StorageClassAnalysis","synthetic":true,"types":[]},{"text":"impl Freeze for StorageClassAnalysisSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for StorageClassAnalysisDataExport","synthetic":true,"types":[]},{"text":"impl Freeze for StorageClassAnalysisDataExportSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for StorageClassAnalysisSchemaVersionSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for SuffixSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for Tag","synthetic":true,"types":[]},{"text":"impl Freeze for TagSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for TagSetSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for Tagging","synthetic":true,"types":[]},{"text":"impl Freeze for TaggingSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for TargetBucketSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for TargetGrant","synthetic":true,"types":[]},{"text":"impl Freeze for TargetGrantSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for TargetGrantsSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for TargetPrefixSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for TierSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for Tiering","synthetic":true,"types":[]},{"text":"impl Freeze for TieringSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for TieringListSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for TokenSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for TopicArnSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for TopicConfiguration","synthetic":true,"types":[]},{"text":"impl Freeze for TopicConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for TopicConfigurationDeprecated","synthetic":true,"types":[]},{"text":"impl Freeze for TopicConfigurationDeprecatedSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for TopicConfigurationListSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for Transition","synthetic":true,"types":[]},{"text":"impl Freeze for TransitionSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for TransitionListSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for TransitionStorageClassSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for TypeSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for URISerializer","synthetic":true,"types":[]},{"text":"impl Freeze for UploadIdMarkerSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for UploadPartCopyOutput","synthetic":true,"types":[]},{"text":"impl Freeze for UploadPartCopyRequest","synthetic":true,"types":[]},{"text":"impl Freeze for UploadPartOutput","synthetic":true,"types":[]},{"text":"impl Freeze for UploadPartRequest","synthetic":true,"types":[]},{"text":"impl Freeze for UserMetadataSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ValueSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for VersionIdMarkerSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for VersioningConfiguration","synthetic":true,"types":[]},{"text":"impl Freeze for VersioningConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for WebsiteConfiguration","synthetic":true,"types":[]},{"text":"impl Freeze for WebsiteConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for YearsSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for S3Client","synthetic":true,"types":[]},{"text":"impl !Freeze for SelectObjectContentEventStreamItem","synthetic":true,"types":[]},{"text":"impl Freeze for AbortMultipartUploadError","synthetic":true,"types":[]},{"text":"impl Freeze for CompleteMultipartUploadError","synthetic":true,"types":[]},{"text":"impl Freeze for CopyObjectError","synthetic":true,"types":[]},{"text":"impl Freeze for CreateBucketError","synthetic":true,"types":[]},{"text":"impl Freeze for CreateMultipartUploadError","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteBucketError","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteBucketAnalyticsConfigurationError","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteBucketCorsError","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteBucketEncryptionError","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteBucketIntelligentTieringConfigurationError","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteBucketInventoryConfigurationError","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteBucketLifecycleError","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteBucketMetricsConfigurationError","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteBucketOwnershipControlsError","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteBucketPolicyError","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteBucketReplicationError","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteBucketTaggingError","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteBucketWebsiteError","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteObjectError","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteObjectTaggingError","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteObjectsError","synthetic":true,"types":[]},{"text":"impl Freeze for DeletePublicAccessBlockError","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketAccelerateConfigurationError","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketAclError","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketAnalyticsConfigurationError","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketCorsError","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketEncryptionError","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketIntelligentTieringConfigurationError","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketInventoryConfigurationError","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketLifecycleError","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketLifecycleConfigurationError","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketLocationError","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketLoggingError","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketMetricsConfigurationError","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketNotificationError","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketNotificationConfigurationError","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketOwnershipControlsError","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketPolicyError","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketPolicyStatusError","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketReplicationError","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketRequestPaymentError","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketTaggingError","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketVersioningError","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketWebsiteError","synthetic":true,"types":[]},{"text":"impl Freeze for GetObjectError","synthetic":true,"types":[]},{"text":"impl Freeze for GetObjectAclError","synthetic":true,"types":[]},{"text":"impl Freeze for GetObjectLegalHoldError","synthetic":true,"types":[]},{"text":"impl Freeze for GetObjectLockConfigurationError","synthetic":true,"types":[]},{"text":"impl Freeze for GetObjectRetentionError","synthetic":true,"types":[]},{"text":"impl Freeze for GetObjectTaggingError","synthetic":true,"types":[]},{"text":"impl Freeze for GetObjectTorrentError","synthetic":true,"types":[]},{"text":"impl Freeze for GetPublicAccessBlockError","synthetic":true,"types":[]},{"text":"impl Freeze for HeadBucketError","synthetic":true,"types":[]},{"text":"impl Freeze for HeadObjectError","synthetic":true,"types":[]},{"text":"impl Freeze for ListBucketAnalyticsConfigurationsError","synthetic":true,"types":[]},{"text":"impl Freeze for ListBucketIntelligentTieringConfigurationsError","synthetic":true,"types":[]},{"text":"impl Freeze for ListBucketInventoryConfigurationsError","synthetic":true,"types":[]},{"text":"impl Freeze for ListBucketMetricsConfigurationsError","synthetic":true,"types":[]},{"text":"impl Freeze for ListBucketsError","synthetic":true,"types":[]},{"text":"impl Freeze for ListMultipartUploadsError","synthetic":true,"types":[]},{"text":"impl Freeze for ListObjectVersionsError","synthetic":true,"types":[]},{"text":"impl Freeze for ListObjectsError","synthetic":true,"types":[]},{"text":"impl Freeze for ListObjectsV2Error","synthetic":true,"types":[]},{"text":"impl Freeze for ListPartsError","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketAccelerateConfigurationError","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketAclError","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketAnalyticsConfigurationError","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketCorsError","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketEncryptionError","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketIntelligentTieringConfigurationError","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketInventoryConfigurationError","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketLifecycleError","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketLifecycleConfigurationError","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketLoggingError","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketMetricsConfigurationError","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketNotificationError","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketNotificationConfigurationError","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketOwnershipControlsError","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketPolicyError","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketReplicationError","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketRequestPaymentError","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketTaggingError","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketVersioningError","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketWebsiteError","synthetic":true,"types":[]},{"text":"impl Freeze for PutObjectError","synthetic":true,"types":[]},{"text":"impl Freeze for PutObjectAclError","synthetic":true,"types":[]},{"text":"impl Freeze for PutObjectLegalHoldError","synthetic":true,"types":[]},{"text":"impl Freeze for PutObjectLockConfigurationError","synthetic":true,"types":[]},{"text":"impl Freeze for PutObjectRetentionError","synthetic":true,"types":[]},{"text":"impl Freeze for PutObjectTaggingError","synthetic":true,"types":[]},{"text":"impl Freeze for PutPublicAccessBlockError","synthetic":true,"types":[]},{"text":"impl Freeze for RestoreObjectError","synthetic":true,"types":[]},{"text":"impl Freeze for SelectObjectContentError","synthetic":true,"types":[]},{"text":"impl Freeze for UploadPartError","synthetic":true,"types":[]},{"text":"impl Freeze for UploadPartCopyError","synthetic":true,"types":[]},{"text":"impl Freeze for PreSignedRequestOption","synthetic":true,"types":[]}];
implementors["rusoto_signature"] = [{"text":"impl Freeze for ParseRegionError","synthetic":true,"types":[]},{"text":"impl Freeze for Region","synthetic":true,"types":[]},{"text":"impl !Freeze for SignedRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for SignedRequestPayload","synthetic":true,"types":[]},{"text":"impl Freeze for ByteStream","synthetic":true,"types":[]}];
implementors["rustc_demangle"] = [{"text":"impl&lt;'a&gt; Freeze for Demangle&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for TryDemangleError","synthetic":true,"types":[]}];
implementors["ryu"] = [{"text":"impl Freeze for Buffer","synthetic":true,"types":[]}];
implementors["scheduled_thread_pool"] = [{"text":"impl Freeze for JobHandle","synthetic":true,"types":[]},{"text":"impl Freeze for ScheduledThreadPool","synthetic":true,"types":[]}];
implementors["scopeguard"] = [{"text":"impl&lt;T, F, S&gt; Freeze for ScopeGuard&lt;T, F, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Always","synthetic":true,"types":[]}];
implementors["serde"] = [{"text":"impl Freeze for IgnoredAny","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Unexpected&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for UnitDeserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for BoolDeserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for I8Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for I16Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for I32Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for I64Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for IsizeDeserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for U8Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for U16Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for U64Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for UsizeDeserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for F32Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for F64Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for CharDeserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for I128Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for U128Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for U32Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Freeze for StrDeserializer&lt;'a, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; Freeze for BorrowedStrDeserializer&lt;'de, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for StringDeserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Freeze for CowStrDeserializer&lt;'a, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; Freeze for BorrowedBytesDeserializer&lt;'de, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; Freeze for SeqDeserializer&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for SeqAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, I, E&gt; Freeze for MapDeserializer&lt;'de, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as Iterator&gt;::Item as Pair&gt;::Second: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for MapAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Ok, Error&gt; Freeze for Impossible&lt;Ok, Error&gt;","synthetic":true,"types":[]}];
implementors["serde_json"] = [{"text":"impl&lt;R&gt; Freeze for Deserializer&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, R, T&gt; Freeze for StreamDeserializer&lt;'de, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;W, F&gt; Freeze for Serializer&lt;W, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Freeze for Map&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Number","synthetic":true,"types":[]},{"text":"impl Freeze for Value","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SliceRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for StrRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for IoRead&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Category","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for VacantEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for OccupiedEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Keys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ValuesMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Entry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for CompactFormatter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for PrettyFormatter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for CharEscape","synthetic":true,"types":[]},{"text":"impl Freeze for Serializer","synthetic":true,"types":[]}];
implementors["sha2"] = [{"text":"impl Freeze for Sha224","synthetic":true,"types":[]},{"text":"impl Freeze for Sha256","synthetic":true,"types":[]},{"text":"impl Freeze for Sha384","synthetic":true,"types":[]},{"text":"impl Freeze for Sha512","synthetic":true,"types":[]},{"text":"impl Freeze for Sha512Trunc224","synthetic":true,"types":[]},{"text":"impl Freeze for Sha512Trunc256","synthetic":true,"types":[]}];
implementors["shlex"] = [{"text":"impl&lt;'a&gt; Freeze for Shlex&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["signal_hook_registry"] = [{"text":"impl Freeze for SigId","synthetic":true,"types":[]}];
implementors["siphasher"] = [{"text":"impl Freeze for SipHasher13","synthetic":true,"types":[]},{"text":"impl Freeze for SipHasher24","synthetic":true,"types":[]},{"text":"impl Freeze for SipHasher","synthetic":true,"types":[]},{"text":"impl Freeze for Hash128","synthetic":true,"types":[]},{"text":"impl Freeze for SipHasher13","synthetic":true,"types":[]},{"text":"impl Freeze for SipHasher24","synthetic":true,"types":[]},{"text":"impl Freeze for SipHasher","synthetic":true,"types":[]}];
implementors["slab"] = [{"text":"impl&lt;T&gt; Freeze for Slab&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for VacantEntry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Drain&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["smallvec"] = [{"text":"impl&lt;'a, T&gt; Freeze for Drain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for SmallVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for CollectionAllocErr","synthetic":true,"types":[]}];
implementors["socket2"] = [{"text":"impl Freeze for SockAddr","synthetic":true,"types":[]},{"text":"impl Freeze for Socket","synthetic":true,"types":[]},{"text":"impl Freeze for Domain","synthetic":true,"types":[]},{"text":"impl Freeze for Type","synthetic":true,"types":[]},{"text":"impl Freeze for Protocol","synthetic":true,"types":[]}];
implementors["stringprep"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for CaseFoldForNfkc","synthetic":true,"types":[]}];
implementors["strum"] = [{"text":"impl Freeze for ParseError","synthetic":true,"types":[]}];
implementors["subtle"] = [{"text":"impl Freeze for Choice","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for CtOption&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["syn"] = [{"text":"impl Freeze for Attribute","synthetic":true,"types":[]},{"text":"impl Freeze for MetaList","synthetic":true,"types":[]},{"text":"impl Freeze for MetaNameValue","synthetic":true,"types":[]},{"text":"impl Freeze for Field","synthetic":true,"types":[]},{"text":"impl Freeze for FieldsNamed","synthetic":true,"types":[]},{"text":"impl Freeze for FieldsUnnamed","synthetic":true,"types":[]},{"text":"impl Freeze for Variant","synthetic":true,"types":[]},{"text":"impl Freeze for VisCrate","synthetic":true,"types":[]},{"text":"impl Freeze for VisPublic","synthetic":true,"types":[]},{"text":"impl Freeze for VisRestricted","synthetic":true,"types":[]},{"text":"impl Freeze for Arm","synthetic":true,"types":[]},{"text":"impl Freeze for FieldValue","synthetic":true,"types":[]},{"text":"impl Freeze for Label","synthetic":true,"types":[]},{"text":"impl Freeze for MethodTurbofish","synthetic":true,"types":[]},{"text":"impl Freeze for ExprArray","synthetic":true,"types":[]},{"text":"impl Freeze for ExprAssign","synthetic":true,"types":[]},{"text":"impl Freeze for ExprAssignOp","synthetic":true,"types":[]},{"text":"impl Freeze for ExprAsync","synthetic":true,"types":[]},{"text":"impl Freeze for ExprAwait","synthetic":true,"types":[]},{"text":"impl Freeze for ExprBinary","synthetic":true,"types":[]},{"text":"impl Freeze for ExprBlock","synthetic":true,"types":[]},{"text":"impl Freeze for ExprBox","synthetic":true,"types":[]},{"text":"impl Freeze for ExprBreak","synthetic":true,"types":[]},{"text":"impl Freeze for ExprCall","synthetic":true,"types":[]},{"text":"impl Freeze for ExprCast","synthetic":true,"types":[]},{"text":"impl Freeze for ExprClosure","synthetic":true,"types":[]},{"text":"impl Freeze for ExprContinue","synthetic":true,"types":[]},{"text":"impl Freeze for ExprField","synthetic":true,"types":[]},{"text":"impl Freeze for ExprForLoop","synthetic":true,"types":[]},{"text":"impl Freeze for ExprGroup","synthetic":true,"types":[]},{"text":"impl Freeze for ExprIf","synthetic":true,"types":[]},{"text":"impl Freeze for ExprIndex","synthetic":true,"types":[]},{"text":"impl Freeze for ExprLet","synthetic":true,"types":[]},{"text":"impl Freeze for ExprLit","synthetic":true,"types":[]},{"text":"impl Freeze for ExprLoop","synthetic":true,"types":[]},{"text":"impl Freeze for ExprMacro","synthetic":true,"types":[]},{"text":"impl Freeze for ExprMatch","synthetic":true,"types":[]},{"text":"impl Freeze for ExprMethodCall","synthetic":true,"types":[]},{"text":"impl Freeze for ExprParen","synthetic":true,"types":[]},{"text":"impl Freeze for ExprPath","synthetic":true,"types":[]},{"text":"impl Freeze for ExprRange","synthetic":true,"types":[]},{"text":"impl Freeze for ExprReference","synthetic":true,"types":[]},{"text":"impl Freeze for ExprRepeat","synthetic":true,"types":[]},{"text":"impl Freeze for ExprReturn","synthetic":true,"types":[]},{"text":"impl Freeze for ExprStruct","synthetic":true,"types":[]},{"text":"impl Freeze for ExprTry","synthetic":true,"types":[]},{"text":"impl Freeze for ExprTryBlock","synthetic":true,"types":[]},{"text":"impl Freeze for ExprTuple","synthetic":true,"types":[]},{"text":"impl Freeze for ExprType","synthetic":true,"types":[]},{"text":"impl Freeze for ExprUnary","synthetic":true,"types":[]},{"text":"impl Freeze for ExprUnsafe","synthetic":true,"types":[]},{"text":"impl Freeze for ExprWhile","synthetic":true,"types":[]},{"text":"impl Freeze for ExprYield","synthetic":true,"types":[]},{"text":"impl Freeze for Index","synthetic":true,"types":[]},{"text":"impl Freeze for BoundLifetimes","synthetic":true,"types":[]},{"text":"impl Freeze for ConstParam","synthetic":true,"types":[]},{"text":"impl Freeze for Generics","synthetic":true,"types":[]},{"text":"impl Freeze for LifetimeDef","synthetic":true,"types":[]},{"text":"impl Freeze for PredicateEq","synthetic":true,"types":[]},{"text":"impl Freeze for PredicateLifetime","synthetic":true,"types":[]},{"text":"impl Freeze for PredicateType","synthetic":true,"types":[]},{"text":"impl Freeze for TraitBound","synthetic":true,"types":[]},{"text":"impl Freeze for TypeParam","synthetic":true,"types":[]},{"text":"impl Freeze for WhereClause","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ImplGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Turbofish&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for TypeGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ForeignItemFn","synthetic":true,"types":[]},{"text":"impl Freeze for ForeignItemMacro","synthetic":true,"types":[]},{"text":"impl Freeze for ForeignItemStatic","synthetic":true,"types":[]},{"text":"impl Freeze for ForeignItemType","synthetic":true,"types":[]},{"text":"impl Freeze for ImplItemConst","synthetic":true,"types":[]},{"text":"impl Freeze for ImplItemMacro","synthetic":true,"types":[]},{"text":"impl Freeze for ImplItemMethod","synthetic":true,"types":[]},{"text":"impl Freeze for ImplItemType","synthetic":true,"types":[]},{"text":"impl Freeze for ItemConst","synthetic":true,"types":[]},{"text":"impl Freeze for ItemEnum","synthetic":true,"types":[]},{"text":"impl Freeze for ItemExternCrate","synthetic":true,"types":[]},{"text":"impl Freeze for ItemFn","synthetic":true,"types":[]},{"text":"impl Freeze for ItemForeignMod","synthetic":true,"types":[]},{"text":"impl Freeze for ItemImpl","synthetic":true,"types":[]},{"text":"impl Freeze for ItemMacro","synthetic":true,"types":[]},{"text":"impl Freeze for ItemMacro2","synthetic":true,"types":[]},{"text":"impl Freeze for ItemMod","synthetic":true,"types":[]},{"text":"impl Freeze for ItemStatic","synthetic":true,"types":[]},{"text":"impl Freeze for ItemStruct","synthetic":true,"types":[]},{"text":"impl Freeze for ItemTrait","synthetic":true,"types":[]},{"text":"impl Freeze for ItemTraitAlias","synthetic":true,"types":[]},{"text":"impl Freeze for ItemType","synthetic":true,"types":[]},{"text":"impl Freeze for ItemUnion","synthetic":true,"types":[]},{"text":"impl Freeze for ItemUse","synthetic":true,"types":[]},{"text":"impl Freeze for Receiver","synthetic":true,"types":[]},{"text":"impl Freeze for Signature","synthetic":true,"types":[]},{"text":"impl Freeze for TraitItemConst","synthetic":true,"types":[]},{"text":"impl Freeze for TraitItemMacro","synthetic":true,"types":[]},{"text":"impl Freeze for TraitItemMethod","synthetic":true,"types":[]},{"text":"impl Freeze for TraitItemType","synthetic":true,"types":[]},{"text":"impl Freeze for UseGlob","synthetic":true,"types":[]},{"text":"impl Freeze for UseGroup","synthetic":true,"types":[]},{"text":"impl Freeze for UseName","synthetic":true,"types":[]},{"text":"impl Freeze for UsePath","synthetic":true,"types":[]},{"text":"impl Freeze for UseRename","synthetic":true,"types":[]},{"text":"impl Freeze for File","synthetic":true,"types":[]},{"text":"impl Freeze for Lifetime","synthetic":true,"types":[]},{"text":"impl Freeze for LitBool","synthetic":true,"types":[]},{"text":"impl Freeze for LitByte","synthetic":true,"types":[]},{"text":"impl Freeze for LitByteStr","synthetic":true,"types":[]},{"text":"impl Freeze for LitChar","synthetic":true,"types":[]},{"text":"impl Freeze for LitFloat","synthetic":true,"types":[]},{"text":"impl Freeze for LitInt","synthetic":true,"types":[]},{"text":"impl Freeze for LitStr","synthetic":true,"types":[]},{"text":"impl Freeze for Macro","synthetic":true,"types":[]},{"text":"impl Freeze for DataEnum","synthetic":true,"types":[]},{"text":"impl Freeze for DataStruct","synthetic":true,"types":[]},{"text":"impl Freeze for DataUnion","synthetic":true,"types":[]},{"text":"impl Freeze for DeriveInput","synthetic":true,"types":[]},{"text":"impl Freeze for Block","synthetic":true,"types":[]},{"text":"impl Freeze for Local","synthetic":true,"types":[]},{"text":"impl Freeze for Abi","synthetic":true,"types":[]},{"text":"impl Freeze for BareFnArg","synthetic":true,"types":[]},{"text":"impl Freeze for TypeArray","synthetic":true,"types":[]},{"text":"impl Freeze for TypeBareFn","synthetic":true,"types":[]},{"text":"impl Freeze for TypeGroup","synthetic":true,"types":[]},{"text":"impl Freeze for TypeImplTrait","synthetic":true,"types":[]},{"text":"impl Freeze for TypeInfer","synthetic":true,"types":[]},{"text":"impl Freeze for TypeMacro","synthetic":true,"types":[]},{"text":"impl Freeze for TypeNever","synthetic":true,"types":[]},{"text":"impl Freeze for TypeParen","synthetic":true,"types":[]},{"text":"impl Freeze for TypePath","synthetic":true,"types":[]},{"text":"impl Freeze for TypePtr","synthetic":true,"types":[]},{"text":"impl Freeze for TypeReference","synthetic":true,"types":[]},{"text":"impl Freeze for TypeSlice","synthetic":true,"types":[]},{"text":"impl Freeze for TypeTraitObject","synthetic":true,"types":[]},{"text":"impl Freeze for TypeTuple","synthetic":true,"types":[]},{"text":"impl Freeze for Variadic","synthetic":true,"types":[]},{"text":"impl Freeze for FieldPat","synthetic":true,"types":[]},{"text":"impl Freeze for PatBox","synthetic":true,"types":[]},{"text":"impl Freeze for PatIdent","synthetic":true,"types":[]},{"text":"impl Freeze for PatLit","synthetic":true,"types":[]},{"text":"impl Freeze for PatMacro","synthetic":true,"types":[]},{"text":"impl Freeze for PatOr","synthetic":true,"types":[]},{"text":"impl Freeze for PatPath","synthetic":true,"types":[]},{"text":"impl Freeze for PatRange","synthetic":true,"types":[]},{"text":"impl Freeze for PatReference","synthetic":true,"types":[]},{"text":"impl Freeze for PatRest","synthetic":true,"types":[]},{"text":"impl Freeze for PatSlice","synthetic":true,"types":[]},{"text":"impl Freeze for PatStruct","synthetic":true,"types":[]},{"text":"impl Freeze for PatTuple","synthetic":true,"types":[]},{"text":"impl Freeze for PatTupleStruct","synthetic":true,"types":[]},{"text":"impl Freeze for PatType","synthetic":true,"types":[]},{"text":"impl Freeze for PatWild","synthetic":true,"types":[]},{"text":"impl Freeze for AngleBracketedGenericArguments","synthetic":true,"types":[]},{"text":"impl Freeze for Binding","synthetic":true,"types":[]},{"text":"impl Freeze for Constraint","synthetic":true,"types":[]},{"text":"impl Freeze for ParenthesizedGenericArguments","synthetic":true,"types":[]},{"text":"impl Freeze for Path","synthetic":true,"types":[]},{"text":"impl Freeze for PathSegment","synthetic":true,"types":[]},{"text":"impl Freeze for QSelf","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for AttrStyle","synthetic":true,"types":[]},{"text":"impl Freeze for Meta","synthetic":true,"types":[]},{"text":"impl Freeze for NestedMeta","synthetic":true,"types":[]},{"text":"impl Freeze for Fields","synthetic":true,"types":[]},{"text":"impl Freeze for Visibility","synthetic":true,"types":[]},{"text":"impl Freeze for GenericMethodArgument","synthetic":true,"types":[]},{"text":"impl Freeze for RangeLimits","synthetic":true,"types":[]},{"text":"impl Freeze for Expr","synthetic":true,"types":[]},{"text":"impl Freeze for Member","synthetic":true,"types":[]},{"text":"impl Freeze for GenericParam","synthetic":true,"types":[]},{"text":"impl Freeze for TraitBoundModifier","synthetic":true,"types":[]},{"text":"impl Freeze for TypeParamBound","synthetic":true,"types":[]},{"text":"impl Freeze for WherePredicate","synthetic":true,"types":[]},{"text":"impl Freeze for FnArg","synthetic":true,"types":[]},{"text":"impl Freeze for ForeignItem","synthetic":true,"types":[]},{"text":"impl Freeze for ImplItem","synthetic":true,"types":[]},{"text":"impl Freeze for Item","synthetic":true,"types":[]},{"text":"impl Freeze for TraitItem","synthetic":true,"types":[]},{"text":"impl Freeze for UseTree","synthetic":true,"types":[]},{"text":"impl Freeze for Lit","synthetic":true,"types":[]},{"text":"impl Freeze for StrStyle","synthetic":true,"types":[]},{"text":"impl Freeze for MacroDelimiter","synthetic":true,"types":[]},{"text":"impl Freeze for Data","synthetic":true,"types":[]},{"text":"impl Freeze for BinOp","synthetic":true,"types":[]},{"text":"impl Freeze for UnOp","synthetic":true,"types":[]},{"text":"impl Freeze for Stmt","synthetic":true,"types":[]},{"text":"impl Freeze for ReturnType","synthetic":true,"types":[]},{"text":"impl Freeze for Type","synthetic":true,"types":[]},{"text":"impl Freeze for Pat","synthetic":true,"types":[]},{"text":"impl Freeze for GenericArgument","synthetic":true,"types":[]},{"text":"impl Freeze for PathArguments","synthetic":true,"types":[]},{"text":"impl Freeze for Underscore","synthetic":true,"types":[]},{"text":"impl Freeze for Abstract","synthetic":true,"types":[]},{"text":"impl Freeze for As","synthetic":true,"types":[]},{"text":"impl Freeze for Async","synthetic":true,"types":[]},{"text":"impl Freeze for Auto","synthetic":true,"types":[]},{"text":"impl Freeze for Await","synthetic":true,"types":[]},{"text":"impl Freeze for Become","synthetic":true,"types":[]},{"text":"impl Freeze for Box","synthetic":true,"types":[]},{"text":"impl Freeze for Break","synthetic":true,"types":[]},{"text":"impl Freeze for Const","synthetic":true,"types":[]},{"text":"impl Freeze for Continue","synthetic":true,"types":[]},{"text":"impl Freeze for Crate","synthetic":true,"types":[]},{"text":"impl Freeze for Default","synthetic":true,"types":[]},{"text":"impl Freeze for Do","synthetic":true,"types":[]},{"text":"impl Freeze for Dyn","synthetic":true,"types":[]},{"text":"impl Freeze for Else","synthetic":true,"types":[]},{"text":"impl Freeze for Enum","synthetic":true,"types":[]},{"text":"impl Freeze for Extern","synthetic":true,"types":[]},{"text":"impl Freeze for Final","synthetic":true,"types":[]},{"text":"impl Freeze for Fn","synthetic":true,"types":[]},{"text":"impl Freeze for For","synthetic":true,"types":[]},{"text":"impl Freeze for If","synthetic":true,"types":[]},{"text":"impl Freeze for Impl","synthetic":true,"types":[]},{"text":"impl Freeze for In","synthetic":true,"types":[]},{"text":"impl Freeze for Let","synthetic":true,"types":[]},{"text":"impl Freeze for Loop","synthetic":true,"types":[]},{"text":"impl Freeze for Macro","synthetic":true,"types":[]},{"text":"impl Freeze for Match","synthetic":true,"types":[]},{"text":"impl Freeze for Mod","synthetic":true,"types":[]},{"text":"impl Freeze for Move","synthetic":true,"types":[]},{"text":"impl Freeze for Mut","synthetic":true,"types":[]},{"text":"impl Freeze for Override","synthetic":true,"types":[]},{"text":"impl Freeze for Priv","synthetic":true,"types":[]},{"text":"impl Freeze for Pub","synthetic":true,"types":[]},{"text":"impl Freeze for Ref","synthetic":true,"types":[]},{"text":"impl Freeze for Return","synthetic":true,"types":[]},{"text":"impl Freeze for SelfType","synthetic":true,"types":[]},{"text":"impl Freeze for SelfValue","synthetic":true,"types":[]},{"text":"impl Freeze for Static","synthetic":true,"types":[]},{"text":"impl Freeze for Struct","synthetic":true,"types":[]},{"text":"impl Freeze for Super","synthetic":true,"types":[]},{"text":"impl Freeze for Trait","synthetic":true,"types":[]},{"text":"impl Freeze for Try","synthetic":true,"types":[]},{"text":"impl Freeze for Type","synthetic":true,"types":[]},{"text":"impl Freeze for Typeof","synthetic":true,"types":[]},{"text":"impl Freeze for Union","synthetic":true,"types":[]},{"text":"impl Freeze for Unsafe","synthetic":true,"types":[]},{"text":"impl Freeze for Unsized","synthetic":true,"types":[]},{"text":"impl Freeze for Use","synthetic":true,"types":[]},{"text":"impl Freeze for Virtual","synthetic":true,"types":[]},{"text":"impl Freeze for Where","synthetic":true,"types":[]},{"text":"impl Freeze for While","synthetic":true,"types":[]},{"text":"impl Freeze for Yield","synthetic":true,"types":[]},{"text":"impl Freeze for Add","synthetic":true,"types":[]},{"text":"impl Freeze for AddEq","synthetic":true,"types":[]},{"text":"impl Freeze for And","synthetic":true,"types":[]},{"text":"impl Freeze for AndAnd","synthetic":true,"types":[]},{"text":"impl Freeze for AndEq","synthetic":true,"types":[]},{"text":"impl Freeze for At","synthetic":true,"types":[]},{"text":"impl Freeze for Bang","synthetic":true,"types":[]},{"text":"impl Freeze for Caret","synthetic":true,"types":[]},{"text":"impl Freeze for CaretEq","synthetic":true,"types":[]},{"text":"impl Freeze for Colon","synthetic":true,"types":[]},{"text":"impl Freeze for Colon2","synthetic":true,"types":[]},{"text":"impl Freeze for Comma","synthetic":true,"types":[]},{"text":"impl Freeze for Div","synthetic":true,"types":[]},{"text":"impl Freeze for DivEq","synthetic":true,"types":[]},{"text":"impl Freeze for Dollar","synthetic":true,"types":[]},{"text":"impl Freeze for Dot","synthetic":true,"types":[]},{"text":"impl Freeze for Dot2","synthetic":true,"types":[]},{"text":"impl Freeze for Dot3","synthetic":true,"types":[]},{"text":"impl Freeze for DotDotEq","synthetic":true,"types":[]},{"text":"impl Freeze for Eq","synthetic":true,"types":[]},{"text":"impl Freeze for EqEq","synthetic":true,"types":[]},{"text":"impl Freeze for Ge","synthetic":true,"types":[]},{"text":"impl Freeze for Gt","synthetic":true,"types":[]},{"text":"impl Freeze for Le","synthetic":true,"types":[]},{"text":"impl Freeze for Lt","synthetic":true,"types":[]},{"text":"impl Freeze for MulEq","synthetic":true,"types":[]},{"text":"impl Freeze for Ne","synthetic":true,"types":[]},{"text":"impl Freeze for Or","synthetic":true,"types":[]},{"text":"impl Freeze for OrEq","synthetic":true,"types":[]},{"text":"impl Freeze for OrOr","synthetic":true,"types":[]},{"text":"impl Freeze for Pound","synthetic":true,"types":[]},{"text":"impl Freeze for Question","synthetic":true,"types":[]},{"text":"impl Freeze for RArrow","synthetic":true,"types":[]},{"text":"impl Freeze for LArrow","synthetic":true,"types":[]},{"text":"impl Freeze for Rem","synthetic":true,"types":[]},{"text":"impl Freeze for RemEq","synthetic":true,"types":[]},{"text":"impl Freeze for FatArrow","synthetic":true,"types":[]},{"text":"impl Freeze for Semi","synthetic":true,"types":[]},{"text":"impl Freeze for Shl","synthetic":true,"types":[]},{"text":"impl Freeze for ShlEq","synthetic":true,"types":[]},{"text":"impl Freeze for Shr","synthetic":true,"types":[]},{"text":"impl Freeze for ShrEq","synthetic":true,"types":[]},{"text":"impl Freeze for Star","synthetic":true,"types":[]},{"text":"impl Freeze for Sub","synthetic":true,"types":[]},{"text":"impl Freeze for SubEq","synthetic":true,"types":[]},{"text":"impl Freeze for Tilde","synthetic":true,"types":[]},{"text":"impl Freeze for Brace","synthetic":true,"types":[]},{"text":"impl Freeze for Bracket","synthetic":true,"types":[]},{"text":"impl Freeze for Paren","synthetic":true,"types":[]},{"text":"impl Freeze for Group","synthetic":true,"types":[]},{"text":"impl Freeze for TokenBuffer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Cursor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Freeze for Punctuated&lt;T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; Freeze for Pairs&lt;'a, T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; Freeze for PairsMut&lt;'a, T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Freeze for IntoPairs&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Freeze for Pair&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Freeze for Lookahead1&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Freeze for ParseBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'a&gt; Freeze for StepCursor&lt;'c, 'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Nothing","synthetic":true,"types":[]}];
implementors["synstructure"] = [{"text":"impl&lt;'a&gt; Freeze for BindingInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for VariantAst&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for VariantInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Structure&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for AddBounds","synthetic":true,"types":[]},{"text":"impl Freeze for BindStyle","synthetic":true,"types":[]}];
implementors["termcolor"] = [{"text":"impl Freeze for StandardStream","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for StandardStreamLock&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for BufferedStandardStream","synthetic":true,"types":[]},{"text":"impl !Freeze for BufferWriter","synthetic":true,"types":[]},{"text":"impl Freeze for Buffer","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for NoColor&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for Ansi&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ColorSpec","synthetic":true,"types":[]},{"text":"impl Freeze for ParseColorError","synthetic":true,"types":[]},{"text":"impl Freeze for ColorChoice","synthetic":true,"types":[]},{"text":"impl Freeze for Color","synthetic":true,"types":[]}];
implementors["thread_local"] = [{"text":"impl&lt;T&gt; !Freeze for CachedIntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for CachedIterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for CachedThreadLocal&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for ThreadLocal&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]}];
implementors["time"] = [{"text":"impl Freeze for Date","synthetic":true,"types":[]},{"text":"impl Freeze for Duration","synthetic":true,"types":[]},{"text":"impl Freeze for Instant","synthetic":true,"types":[]},{"text":"impl Freeze for OffsetDateTime","synthetic":true,"types":[]},{"text":"impl Freeze for PrimitiveDateTime","synthetic":true,"types":[]},{"text":"impl Freeze for Time","synthetic":true,"types":[]},{"text":"impl Freeze for UtcOffset","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Format","synthetic":true,"types":[]},{"text":"impl Freeze for Sign","synthetic":true,"types":[]},{"text":"impl Freeze for Weekday","synthetic":true,"types":[]},{"text":"impl Freeze for ConversionRange","synthetic":true,"types":[]},{"text":"impl Freeze for ComponentRange","synthetic":true,"types":[]},{"text":"impl Freeze for IndeterminateOffset","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Format","synthetic":true,"types":[]}];
implementors["tinyvec"] = [{"text":"impl&lt;A&gt; Freeze for ArrayVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'p, A, I&gt; Freeze for ArrayVecSplice&lt;'p, A, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for ArrayVecIterator&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for ArrayVecDrain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'s, T&gt; Freeze for SliceVec&lt;'s, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'p, 's, T&gt; Freeze for SliceVecDrain&lt;'p, 's, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'p, A, I&gt; Freeze for TinyVecSplice&lt;'p, A, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for TinyVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'p, A&gt; Freeze for TinyVecDrain&lt;'p, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for TinyVecIterator&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["tokio"] = [{"text":"impl&lt;'a&gt; Freeze for ReadBuf&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Interest","synthetic":true,"types":[]},{"text":"impl Freeze for Ready","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ReadHalf&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for WriteHalf&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for BufReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;RW&gt; Freeze for BufStream&lt;RW&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;RW: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for BufWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for DuplexStream","synthetic":true,"types":[]},{"text":"impl Freeze for Empty","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Lines&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Repeat","synthetic":true,"types":[]},{"text":"impl Freeze for Sink","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Split&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Take&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for AsyncFd&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for AsyncFdReadyGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for AsyncFdReadyMutGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for TryIoError","synthetic":true,"types":[]},{"text":"impl !Freeze for TcpListener","synthetic":true,"types":[]},{"text":"impl Freeze for TcpSocket","synthetic":true,"types":[]},{"text":"impl !Freeze for TcpStream","synthetic":true,"types":[]},{"text":"impl !Freeze for UdpSocket","synthetic":true,"types":[]},{"text":"impl !Freeze for UnixDatagram","synthetic":true,"types":[]},{"text":"impl !Freeze for UnixListener","synthetic":true,"types":[]},{"text":"impl !Freeze for UnixStream","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ReadHalf&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for WriteHalf&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for OwnedReadHalf","synthetic":true,"types":[]},{"text":"impl Freeze for OwnedWriteHalf","synthetic":true,"types":[]},{"text":"impl Freeze for ReuniteError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ReadHalf&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for WriteHalf&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for OwnedReadHalf","synthetic":true,"types":[]},{"text":"impl Freeze for OwnedWriteHalf","synthetic":true,"types":[]},{"text":"impl Freeze for ReuniteError","synthetic":true,"types":[]},{"text":"impl Freeze for SocketAddr","synthetic":true,"types":[]},{"text":"impl Freeze for UCred","synthetic":true,"types":[]},{"text":"impl Freeze for Command","synthetic":true,"types":[]},{"text":"impl Freeze for Child","synthetic":true,"types":[]},{"text":"impl Freeze for ChildStdin","synthetic":true,"types":[]},{"text":"impl Freeze for ChildStdout","synthetic":true,"types":[]},{"text":"impl Freeze for ChildStderr","synthetic":true,"types":[]},{"text":"impl Freeze for Builder","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for EnterGuard&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Handle","synthetic":true,"types":[]},{"text":"impl !Freeze for Runtime","synthetic":true,"types":[]},{"text":"impl !Freeze for JoinError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for JoinHandle&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for Barrier","synthetic":true,"types":[]},{"text":"impl Freeze for BarrierWaitResult","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Mutex&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for MutexGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for TryLockError","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Freeze for OwnedMutexGuard&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for Notify","synthetic":true,"types":[]},{"text":"impl Freeze for AcquireError","synthetic":true,"types":[]},{"text":"impl !Freeze for Semaphore","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SemaphorePermit&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for OwnedSemaphorePermit","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for RwLock&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for RwLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for RwLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for TryAcquireError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for RecvError","synthetic":true,"types":[]},{"text":"impl Freeze for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Permit&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for UnboundedReceiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for UnboundedSender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for RecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for SendTimeoutError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for RecvError","synthetic":true,"types":[]},{"text":"impl Freeze for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Ref&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for RecvError","synthetic":true,"types":[]},{"text":"impl !Freeze for LocalSet","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for LocalKey&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for Sleep","synthetic":true,"types":[]},{"text":"impl Freeze for Instant","synthetic":true,"types":[]},{"text":"impl Freeze for Interval","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Timeout&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Elapsed","synthetic":true,"types":[]}];
implementors["tokio_native_tls"] = [{"text":"impl&lt;S&gt; Freeze for AllowStd&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for TlsStream&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for TlsConnector","synthetic":true,"types":[]},{"text":"impl Freeze for TlsAcceptor","synthetic":true,"types":[]}];
implementors["tokio_postgres"] = [{"text":"impl Freeze for CancelToken","synthetic":true,"types":[]},{"text":"impl Freeze for Client","synthetic":true,"types":[]},{"text":"impl&lt;S, T&gt; !Freeze for Connection&lt;S, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for CopyInSink&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for CopyOutStream","synthetic":true,"types":[]},{"text":"impl Freeze for Portal","synthetic":true,"types":[]},{"text":"impl Freeze for RowStream","synthetic":true,"types":[]},{"text":"impl Freeze for SimpleQueryStream","synthetic":true,"types":[]},{"text":"impl !Freeze for Socket","synthetic":true,"types":[]},{"text":"impl Freeze for Column","synthetic":true,"types":[]},{"text":"impl Freeze for Statement","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Transaction&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for TransactionBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Notification","synthetic":true,"types":[]},{"text":"impl Freeze for IsolationLevel","synthetic":true,"types":[]},{"text":"impl Freeze for AsyncMessage","synthetic":true,"types":[]},{"text":"impl !Freeze for SimpleQueryMessage","synthetic":true,"types":[]},{"text":"impl Freeze for BinaryCopyInWriter","synthetic":true,"types":[]},{"text":"impl Freeze for BinaryCopyOutStream","synthetic":true,"types":[]},{"text":"impl !Freeze for BinaryCopyOutRow","synthetic":true,"types":[]},{"text":"impl Freeze for Config","synthetic":true,"types":[]},{"text":"impl Freeze for TargetSessionAttrs","synthetic":true,"types":[]},{"text":"impl Freeze for SslMode","synthetic":true,"types":[]},{"text":"impl Freeze for ChannelBinding","synthetic":true,"types":[]},{"text":"impl Freeze for Host","synthetic":true,"types":[]},{"text":"impl Freeze for SqlState","synthetic":true,"types":[]},{"text":"impl Freeze for DbError","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Severity","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorPosition","synthetic":true,"types":[]},{"text":"impl !Freeze for Row","synthetic":true,"types":[]},{"text":"impl !Freeze for SimpleQueryRow","synthetic":true,"types":[]},{"text":"impl Freeze for ChannelBinding","synthetic":true,"types":[]},{"text":"impl Freeze for NoTls","synthetic":true,"types":[]},{"text":"impl Freeze for NoTlsFuture","synthetic":true,"types":[]},{"text":"impl Freeze for NoTlsError","synthetic":true,"types":[]},{"text":"impl Freeze for NoTlsStream","synthetic":true,"types":[]}];
implementors["tokio_stream"] = [{"text":"impl&lt;T&gt; Freeze for Empty&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Iter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Once&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Pending&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Freeze for StreamMap&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ReceiverStream&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for UnboundedReceiverStream&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for IntervalStream","synthetic":true,"types":[]}];
implementors["tokio_util"] = [{"text":"impl Freeze for BytesCodec","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Freeze for Framed&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Freeze for FramedParts&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, D&gt; Freeze for FramedRead&lt;T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Freeze for FramedWrite&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for LinesCodec","synthetic":true,"types":[]},{"text":"impl Freeze for LinesCodecError","synthetic":true,"types":[]},{"text":"impl Freeze for Builder","synthetic":true,"types":[]},{"text":"impl Freeze for LengthDelimitedCodecError","synthetic":true,"types":[]},{"text":"impl Freeze for LengthDelimitedCodec","synthetic":true,"types":[]},{"text":"impl Freeze for CancellationToken","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for WaitForCancellationFuture&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;L, R&gt; Freeze for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["tracing"] = [{"text":"impl Freeze for Span","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for WithDispatch&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Instrumented&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Entered&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["tracing_core"] = [{"text":"impl Freeze for Dispatch","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Event&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Field","synthetic":true,"types":[]},{"text":"impl Freeze for Level","synthetic":true,"types":[]},{"text":"impl Freeze for LevelFilter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Metadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Identifier","synthetic":true,"types":[]},{"text":"impl Freeze for DefaultGuard","synthetic":true,"types":[]},{"text":"impl Freeze for SetGlobalDefaultError","synthetic":true,"types":[]},{"text":"impl Freeze for Empty","synthetic":true,"types":[]},{"text":"impl Freeze for FieldSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ValueSet&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Iter","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DisplayValue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DebugValue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Kind","synthetic":true,"types":[]},{"text":"impl Freeze for ParseLevelFilterError","synthetic":true,"types":[]},{"text":"impl Freeze for ParseLevelError","synthetic":true,"types":[]},{"text":"impl Freeze for Id","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Attributes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Current","synthetic":true,"types":[]},{"text":"impl Freeze for Interest","synthetic":true,"types":[]}];
implementors["try_lock"] = [{"text":"impl&lt;T&gt; !Freeze for TryLock&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Locked&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["typenum"] = [{"text":"impl Freeze for Greater","synthetic":true,"types":[]},{"text":"impl Freeze for Less","synthetic":true,"types":[]},{"text":"impl Freeze for Equal","synthetic":true,"types":[]},{"text":"impl Freeze for B0","synthetic":true,"types":[]},{"text":"impl Freeze for B1","synthetic":true,"types":[]},{"text":"impl&lt;U&gt; Freeze for PInt&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;U&gt; Freeze for NInt&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Z0","synthetic":true,"types":[]},{"text":"impl Freeze for UTerm","synthetic":true,"types":[]},{"text":"impl&lt;U, B&gt; Freeze for UInt&lt;U, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ATerm","synthetic":true,"types":[]},{"text":"impl&lt;V, A&gt; Freeze for TArr&lt;V, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["unicode_bidi"] = [{"text":"impl Freeze for ParagraphInfo","synthetic":true,"types":[]},{"text":"impl&lt;'text&gt; Freeze for InitialInfo&lt;'text&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'text&gt; Freeze for BidiInfo&lt;'text&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for BidiClass","synthetic":true,"types":[]},{"text":"impl Freeze for Level","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["unicode_normalization"] = [{"text":"impl&lt;I&gt; Freeze for Decompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Recompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for StreamSafe&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for IsNormalized","synthetic":true,"types":[]}];
implementors["unicode_segmentation"] = [{"text":"impl&lt;'a&gt; Freeze for Graphemes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for GraphemeIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for GraphemeCursor","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for UWordBounds&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for UWordBoundIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for UnicodeWords&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for USentenceBounds&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for USentenceBoundIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for UnicodeSentences&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for GraphemeIncomplete","synthetic":true,"types":[]}];
implementors["want"] = [{"text":"impl Freeze for Giver","synthetic":true,"types":[]},{"text":"impl Freeze for Taker","synthetic":true,"types":[]},{"text":"impl Freeze for SharedGiver","synthetic":true,"types":[]},{"text":"impl Freeze for Closed","synthetic":true,"types":[]}];
implementors["xml"] = [{"text":"impl Freeze for ParserConfig","synthetic":true,"types":[]},{"text":"impl Freeze for EmitterConfig","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Name&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for ReprDisplay&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for OwnedName","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Attribute&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for OwnedAttribute","synthetic":true,"types":[]},{"text":"impl Freeze for TextPosition","synthetic":true,"types":[]},{"text":"impl Freeze for XmlVersion","synthetic":true,"types":[]},{"text":"impl Freeze for Namespace","synthetic":true,"types":[]},{"text":"impl Freeze for NamespaceStack","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for NamespaceStackMappings&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for CheckedTarget&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for EventReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Events&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for XmlEvent","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorKind","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for EventWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for EmitterError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for EndElementBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for StartElementBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for XmlEvent&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["zeroize"] = [{"text":"impl&lt;Z&gt; Freeze for Zeroizing&lt;Z&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Z: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()