(function() {var implementors = {};
implementors["connector_agent"] = [{"text":"impl&lt;D&gt; Freeze for <a class=\"struct\" href=\"connector_agent/struct.AnyArray.html\" title=\"struct connector_agent::AnyArray\">AnyArray</a>&lt;D&gt;","synthetic":true,"types":["connector_agent::any_array::AnyArray"]},{"text":"impl&lt;'a, D&gt; Freeze for <a class=\"struct\" href=\"connector_agent/struct.AnyArrayView.html\" title=\"struct connector_agent::AnyArrayView\">AnyArrayView</a>&lt;'a, D&gt;","synthetic":true,"types":["connector_agent::any_array::AnyArrayView"]},{"text":"impl&lt;'a, D&gt; Freeze for <a class=\"struct\" href=\"connector_agent/struct.AnyArrayViewMut.html\" title=\"struct connector_agent::AnyArrayViewMut\">AnyArrayViewMut</a>&lt;'a, D&gt;","synthetic":true,"types":["connector_agent::any_array::AnyArrayViewMut"]},{"text":"impl Freeze for <a class=\"enum\" href=\"connector_agent/enum.DataOrder.html\" title=\"enum connector_agent::DataOrder\">DataOrder</a>","synthetic":true,"types":["connector_agent::data_order::DataOrder"]},{"text":"impl Freeze for <a class=\"struct\" href=\"connector_agent/data_sources/csv/struct.CSVSource.html\" title=\"struct connector_agent::data_sources::csv::CSVSource\">CSVSource</a>","synthetic":true,"types":["connector_agent::data_sources::csv::CSVSource"]},{"text":"impl Freeze for <a class=\"struct\" href=\"connector_agent/data_sources/csv/struct.CSVSourcePartition.html\" title=\"struct connector_agent::data_sources::csv::CSVSourcePartition\">CSVSourcePartition</a>","synthetic":true,"types":["connector_agent::data_sources::csv::CSVSourcePartition"]},{"text":"impl&lt;'a&gt; Freeze for <a class=\"struct\" href=\"connector_agent/data_sources/csv/struct.CSVSourceParser.html\" title=\"struct connector_agent::data_sources::csv::CSVSourceParser\">CSVSourceParser</a>&lt;'a&gt;","synthetic":true,"types":["connector_agent::data_sources::csv::CSVSourceParser"]},{"text":"impl Freeze for <a class=\"struct\" href=\"connector_agent/data_sources/dummy/struct.MixedSource.html\" title=\"struct connector_agent::data_sources::dummy::MixedSource\">MixedSource</a>","synthetic":true,"types":["connector_agent::data_sources::dummy::MixedSource"]},{"text":"impl Freeze for <a class=\"struct\" href=\"connector_agent/data_sources/dummy/struct.MixedSourcePartition.html\" title=\"struct connector_agent::data_sources::dummy::MixedSourcePartition\">MixedSourcePartition</a>","synthetic":true,"types":["connector_agent::data_sources::dummy::MixedSourcePartition"]},{"text":"impl&lt;'a&gt; Freeze for <a class=\"struct\" href=\"connector_agent/data_sources/dummy/struct.MixedSourceParser.html\" title=\"struct connector_agent::data_sources::dummy::MixedSourceParser\">MixedSourceParser</a>&lt;'a&gt;","synthetic":true,"types":["connector_agent::data_sources::dummy::MixedSourceParser"]},{"text":"impl Freeze for <a class=\"enum\" href=\"connector_agent/data_sources/postgres/enum.PostgresDTypes.html\" title=\"enum connector_agent::data_sources::postgres::PostgresDTypes\">PostgresDTypes</a>","synthetic":true,"types":["connector_agent::data_sources::postgres::types::PostgresDTypes"]},{"text":"impl Freeze for <a class=\"struct\" href=\"connector_agent/data_sources/postgres/struct.PostgresSource.html\" title=\"struct connector_agent::data_sources::postgres::PostgresSource\">PostgresSource</a>","synthetic":true,"types":["connector_agent::data_sources::postgres::PostgresSource"]},{"text":"impl !Freeze for <a class=\"struct\" href=\"connector_agent/data_sources/postgres/struct.PostgresSourcePartition.html\" title=\"struct connector_agent::data_sources::postgres::PostgresSourcePartition\">PostgresSourcePartition</a>","synthetic":true,"types":["connector_agent::data_sources::postgres::PostgresSourcePartition"]},{"text":"impl&lt;'a&gt; !Freeze for <a class=\"struct\" href=\"connector_agent/data_sources/postgres/struct.PostgresSourceParser.html\" title=\"struct connector_agent::data_sources::postgres::PostgresSourceParser\">PostgresSourceParser</a>&lt;'a&gt;","synthetic":true,"types":["connector_agent::data_sources::postgres::PostgresSourceParser"]},{"text":"impl&lt;'a, S, TSS, W, TSW&gt; Freeze for <a class=\"struct\" href=\"connector_agent/struct.Dispatcher.html\" title=\"struct connector_agent::Dispatcher\">Dispatcher</a>&lt;'a, S, TSS, W, TSW&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":["connector_agent::dispatcher::Dispatcher"]},{"text":"impl Freeze for <a class=\"enum\" href=\"connector_agent/enum.ConnectorAgentError.html\" title=\"enum connector_agent::ConnectorAgentError\">ConnectorAgentError</a>","synthetic":true,"types":["connector_agent::errors::ConnectorAgentError"]},{"text":"impl Freeze for <a class=\"enum\" href=\"connector_agent/enum.DataType.html\" title=\"enum connector_agent::DataType\">DataType</a>","synthetic":true,"types":["connector_agent::types::DataType"]},{"text":"impl Freeze for <a class=\"struct\" href=\"connector_agent/writers/arrow/struct.ArrowWriter.html\" title=\"struct connector_agent::writers::arrow::ArrowWriter\">ArrowWriter</a>","synthetic":true,"types":["connector_agent::writers::arrow::ArrowWriter"]},{"text":"impl&lt;'a&gt; Freeze for <a class=\"struct\" href=\"connector_agent/writers/arrow/struct.ArrowPartitionWriter.html\" title=\"struct connector_agent::writers::arrow::ArrowPartitionWriter\">ArrowPartitionWriter</a>&lt;'a&gt;","synthetic":true,"types":["connector_agent::writers::arrow::ArrowPartitionWriter"]},{"text":"impl Freeze for <a class=\"struct\" href=\"connector_agent/writers/memory/struct.MemoryWriter.html\" title=\"struct connector_agent::writers::memory::MemoryWriter\">MemoryWriter</a>","synthetic":true,"types":["connector_agent::writers::memory::MemoryWriter"]},{"text":"impl&lt;'a&gt; Freeze for <a class=\"struct\" href=\"connector_agent/writers/memory/struct.MemoryPartitionWriter.html\" title=\"struct connector_agent::writers::memory::MemoryPartitionWriter\">MemoryPartitionWriter</a>&lt;'a&gt;","synthetic":true,"types":["connector_agent::writers::memory::MemoryPartitionWriter"]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()